<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ROS 正式开发 2</title>
      <link href="/2023/04/22/ROS-%E6%AD%A3%E5%BC%8F%E5%BC%80%E5%8F%91-2/"/>
      <url>/2023/04/22/ROS-%E6%AD%A3%E5%BC%8F%E5%BC%80%E5%8F%91-2/</url>
      
        <content type="html"><![CDATA[<h1 id="ROS架构"><a href="#ROS架构" class="headerlink" title="ROS架构"></a>ROS架构</h1><p>​        现在我们开始讲解ROS的架构</p><h2 id="设计者"><a href="#设计者" class="headerlink" title="设计者"></a>设计者</h2><p>​        ROS的设计者将ROS表述为“ROS = Plumbing + Tools + Capabilities + Ecosystem”</p><p>​        Plumbing 是通讯机制（实现ROS不同节点）</p><p>​        Tools 是工具软件包（ROS开发和调试工具）</p><p>​        Capabilities 机器人高层技能（导航）</p><p>​        EcoSystem 机器人生态</p><h2 id="维护角度"><a href="#维护角度" class="headerlink" title="维护角度"></a>维护角度</h2><p>​        main:核心部分</p><p>​        universe: 一些扩展的代码</p><h2 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h2><p>​        ROS可以有三层</p><p>​        （1）OS层 ，也就是经典操作系统 ，ROS是一个元操作系统</p><p>​        （2）中间层：封装了一些机器人开发的中间件</p><p>​                如：基于TCP/UDP 继续封装的TCPROS/UDPROS系统</p><p>​        （3）应用层</p><h2 id="自身结构"><a href="#自身结构" class="headerlink" title="自身结构"></a>自身结构</h2><p>​        文件系统：ROS文件系统指的是硬盘上面查看ROS源代码的组织形式。</p><p>​        计算图： 不同进程需要的进行数据交互。计算图可以良好的表现他们的作用关系</p><p>​        开源社区：略</p><h2 id="ROS文件系统"><a href="#ROS文件系统" class="headerlink" title="ROS文件系统"></a>ROS文件系统</h2><p><img src="image-20230419190503178.png" alt="image-20230419190503178"></p><p>​        如上图，这就是一个ROS的文件结构。</p><p><img src="image-20230419190959393.png" alt="image-20230419190959393"></p><p>​        下面详细重点的介绍如下的文件</p><h3 id="package-xml"><a href="#package-xml" class="headerlink" title="package.xml"></a>package.xml</h3><p>​        这个文件是自动生成的，他在这里：</p><p><img src="mage-20230419191623848.png" alt="image-20230419191623848"></p><p>​        是的，就在SRC文件夹下面</p><p>​        打开看看，就会发现这里有软件包名称，版本号，作者，维护者以及其他信息。</p><p><img src="image-20230419191807747.png" alt="image-20230419191807747"></p><p>​        <img src="image-20230419191842956.png" alt="image-20230419191842956"></p><p>​        这里可以查看依赖。</p><h3 id="CmakeLists-txt"><a href="#CmakeLists-txt" class="headerlink" title="CmakeLists.txt"></a>CmakeLists.txt</h3><p>​        隔壁就是CmakeLists.txt。大量的对象我们用到再说，先不说过多！</p><h2 id="ROS文件系统的相关命令"><a href="#ROS文件系统的相关命令" class="headerlink" title="ROS文件系统的相关命令"></a>ROS文件系统的相关命令</h2><p>​        下面我们来看一些常见的指令：</p><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><p>​        catkin_create_pkg 自定义的包名 依赖的包 == 创建新的ROS功能包</p><p>​        sudo apt install xxx ==安装ROS功能包 （后期经常用）</p><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><p>​        sudo apt purge xxx == 删除功能包</p><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><p>​        rospack list == 列出所有的功能包</p><p>​        rospack find 包名 == 查询寻包名是否存在，存在返回安装路径</p><p>​        roscd 包名 == 进入摸一个包</p><p>​        rosis 包名 == 列出包下的文件</p><p>​        apt search xxx == 搜索包</p><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><p>​        rosed 包名 文件名 === 修改功能包文件</p><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p>​        roscore === 是ROS系统先决条件和程序的集合，必须先启动ROScore</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roscore//roscore <span class="token parameter variable">-p</span> xxxx <span class="token comment"># 指定端口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="image-20230419192925843.png" alt="image-20230419192925843"></p><p>​        启动发现产生了大量的信息，这是熟知英文就可以读懂了，以及这个</p><p><img src="image-20230419193030054.png" alt="image-20230419193030054"></p><p>​        这个是输出日志的Linux地址，可以查看这里。</p><p>​        </p><pre class="line-numbers language-none"><code class="language-none">rosrun 包名 可执行文件名 &#x3D;&#x3D;&#x3D; 运行指定的ROS节点<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        尝试一下：（rospack list）</p><p><img src="image-20230419193647318.png" alt="image-20230419193647318"></p><p>​        cd 一下</p><p>​        <img src="image-20230419193838171.png" alt="image-20230419193838171"></p><p>​        在全网搜寻一下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> search ros-noetic-*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20230419194007901.png" alt="image-20230419194007901"></p><p>​        当然，这不好，我们grep检索一下、</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> search ros-noetic-* <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> gmapping<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20230419194126253.png" alt="image-20230419194126253"></p><h2 id="计算图"><a href="#计算图" class="headerlink" title="计算图"></a>计算图</h2><p>​        下面要说的是显示个节点关系的一个有效的动态展示图，他就是rqt_graph，用来展示错综复杂的节点关系！</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>​        直接先跑一下这个玩意</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rosrun rqt_graph rqt_graph <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        如果告诉你没安装，装一下就好了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ros-<span class="token operator">&lt;</span>distro<span class="token operator">></span>-rqt<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ros-<span class="token operator">&lt;</span>distro<span class="token operator">></span>-rqt-common-plugins-<span class="token operator">&lt;</span>distro<span class="token operator">></span>-用ROS你自己安装的版本替代！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230422205657970.png" alt=""></p><p>​        注意开的时候先把环境给开了！</p><p>​        然后，启动一下我们之前写的Launch脚本，这样，再次运行rosrun rqt_graph rqt_graph ：</p><p><img src="image-20230422210243852.png" alt="image-20230422210243852"></p><p>​        好了，基础的ROS认识就到这里，之后我们开始讲授核心！ROS的通讯机制！</p>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Modern_C++_SmartPtr(1)_UniquePtr</title>
      <link href="/2023/04/19/Modern-C-SmartPtr-1-UniquePtr/"/>
      <url>/2023/04/19/Modern-C-SmartPtr-1-UniquePtr/</url>
      
        <content type="html"><![CDATA[<h1 id="C-智能指针"><a href="#C-智能指针" class="headerlink" title="C++ 智能指针"></a>C++ 智能指针</h1><p>​        突发奇想，准备来点CPP狠活（）</p><h2 id="CPP智能指针类型"><a href="#CPP智能指针类型" class="headerlink" title="CPP智能指针类型"></a>CPP智能指针类型</h2><p>​    ·    就三个：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">std::unique_ptrstd::shared_ptrstd::weak_ptr    std::auto_ptr 已经被废弃！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        下面就开始一些简单的讲述</p><h2 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h2><p>​        在CPP智能指针诞生之后，CPP的指针就包括两类了： raw pointer裸指针和智能指针 smart_pointer。我们的cpp对指针进行了封装，优点就是可以自动分配内存，不需要你来干，不需要你来释放。</p><p>​        不过，需要知道的是：更多的时候裸指针会更加的方便而不是智能指针！在使用频率上，还是：原始指针 &gt; unique_ptr = shared_ptr &gt; weak_ptr的</p><p>​        对了，事实上我们的智能指针并没有完全解决内存安全！这是我们需要注意的。智能指针解决了所有权指针的释放和传输！因此，不是在开发中无脑的使用智能指针就完事了！否则还会造成内存安全隐患。</p><h2 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h2><p>​        人话：在任何给定时刻只有一个指针管理这片内存！并且，当这个指针出了作用域之后自动释放内存。BTW，因为只能一个指针管，因此不能复制，智能移动。</p><p>​        我们有三种创建方式。</p><p>​        1）现有的裸指针来创建（建议设置为空nullptr）</p><p>​        2）new一个</p><p>​        3）std::make_unique整一个（推介）</p><p>​        by the way我们使用get（）方法来获取地址</p><p>​        其余的-&gt;和 . 都跟裸指针都是一样的，下面来看下demo</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F; create a file of dog class::.h:&gt;#pragma once#include&lt;string&gt;#include&lt;iostream&gt;class dog&#123;public:dog(std::string name, unsigned int age);dog() &#x3D; default; &#x2F;&#x2F; using in C++11, to avoid being mistaken while you just simply write &quot;dog a&quot;~dog();void showDogInfo() const &#123;std::cout &lt;&lt; &quot;the dog&#39;s name is: &quot; &lt;&lt; name &lt;&lt; &quot;and it&#39;s &quot; &lt;&lt; age &lt;&lt; &quot;years old&quot; &lt;&lt; &#39;\n&#39;;&#125;void setInfo(const std::string name,const unsigned int age)&#123;this-&gt;name &#x3D; name;this-&gt;age &#x3D; age;return;&#125;std::string getInfoofName() &#123;return this-&gt;name;&#125;unsigned int getAge() &#123;return this-&gt;age;&#125;private:std::string name;unsigned int age;&#125;;.cpp:&gt;   #include &quot;dog.h&quot;dog::dog(std::string name, unsigned int age)&#123;std::cout &lt;&lt; &quot;building a dog actually...&quot;;this-&gt;name &#x3D; name;this-&gt;age &#x3D; age;return;&#125;dog::~dog() &#123;std::cout &lt;&lt; &quot;is being erased of...  &quot; &lt;&lt;this-&gt;name&lt;&lt; &#39;\n&#39;;&#125;:&gt; in main.cpp    #include&lt;iostream&gt;#include&lt;memory&gt;#include&quot;dog.h&quot;using namespace std;int main()&#123;&#x2F;&#x2F; creating in stackdog c1(&quot;yes&quot;, 10);c1.showDogInfo();&#123;&#x2F;&#x2F; using in limited areadog c1(&quot;yep!!!&quot;, 200);c1.showDogInfo();&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230416205015394.png" alt="image-20230416205015394"></p><p>​        那在裸指针的接收吧！</p><p><img src="image-20230416205243842.png" alt="image-20230416205243842"></p><p>​        出问题了，他没有调用析构，意味着内存泄漏</p><p>​        在CPP11之前，我们需要手动的delete！</p><p>​        但是就算如此还是会出现这样的问题！</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">dog<span class="token operator">*</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">dog</span><span class="token punctuation">(</span><span class="token string">"heap"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c2<span class="token operator">-></span><span class="token function">showDogInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#123;</span>c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">dog</span><span class="token punctuation">(</span><span class="token string">"heap"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c2<span class="token operator">-></span><span class="token function">showDogInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">delete</span> c2<span class="token punctuation">;</span><span class="token comment">// FATAL ERROR!!!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        我们发现指针的转移造成了一个内存不被指针记住！</p><p>​        那这样呢？</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">dog<span class="token operator">*</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">dog</span><span class="token punctuation">(</span><span class="token string">"heap"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c2<span class="token operator">-></span><span class="token function">showDogInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#123;</span>c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">dog</span><span class="token punctuation">(</span><span class="token string">"heap"</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c2<span class="token operator">-></span><span class="token function">showDogInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> c2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">delete</span> c2<span class="token punctuation">;</span><span class="token comment">// SO how???</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        还是错的！从这个变量已被改变开始，就找不回去了！所有，这个代码会崩溃。因此我们在这样的复杂场合下不应该使用裸指针。</p><h2 id="demo-of-智能指针创建"><a href="#demo-of-智能指针创建" class="headerlink" title="demo of 智能指针创建"></a>demo of 智能指针创建</h2><p><img src="image-20230416210214902.png" alt="image-20230416210214902"></p><p>​        你看，现在我们使用智能指针。没有调用delete还是成功的删除了dog在堆上的内存</p><p>​        但是还有一个大问题：我们就这样跑路了对不对？不对，没有对原始的空指针进行销毁：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; Correct one:...dog* c2 &#x3D; new dog(&quot;heap&quot;, 1000);c2-&gt;showDogInfo();unique_ptr&lt;dog&gt; uni_dogPtr(c2);c2 &#x3D; nullptr;uni_dogPtr-&gt;showDogInfo();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        我觉得不如这样写更加好：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">unique_ptr<span class="token operator">&lt;</span>dog<span class="token operator">></span> <span class="token function">uni_dogPtr</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">dog</span><span class="token punctuation">(</span><span class="token string">"smart"</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>uni_dogPtr<span class="token operator">-></span><span class="token function">showDogInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        但官方推介的是这个：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">unique_ptr<span class="token operator">&lt;</span>dog<span class="token operator">></span> recommend <span class="token operator">=</span> <span class="token generic-function"><span class="token function">make_unique</span><span class="token generic class-name"><span class="token operator">&lt;</span>dog<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token string">"recommend"</span><span class="token punctuation">,</span><span class="token number">114514</span><span class="token punctuation">)</span><span class="token punctuation">;</span>recommend<span class="token operator">-></span><span class="token function">showDogInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        显然这个更简洁。</p><p>​        下面是get()方法的应用：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"\nthe data's addr is :> "</span><span class="token operator">&lt;&lt;</span>recommend<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        也有可以对这个智能指针直接解引用的方式来处理问题：当然要预先定义解引用后怎么处置对象的问题。</p><p><img src="image-20230416212757013.png" alt="image-20230416212757013"></p><h2 id="unique-ptr和函数调用"><a href="#unique-ptr和函数调用" class="headerlink" title="unique_ptr和函数调用"></a>unique_ptr和函数调用</h2><p>​        注意！这个玩意不可以copy，而且在做函数参数或者是的时候一定要留心所有权的问题！</p><p>​        1）值传递</p><p>​        需要使用std::move来转移内存的拥有权</p><p>​        若参数直接传入到std::make_unique语句，那就自动转化成move!</p><p>​        2）引用传递</p><p>​        若设置了const就不能改变指针的指向！这是需要我们注意的！</p><p>​        3）返回值</p><p>​        指向一个local object</p><p>​        当然用于链式函数！</p><p>​        下面来看一个Demo, 现在我们来看一下，我们现在设计一个如下的函数！</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void do_WithDog(std::unique_ptr&lt;dog&gt; pDog)&#123;pDog-&gt;showInfo();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        但是很快，我们试图去传送的时候也，给你爆一个匪夷所思的错误：</p><p><img src="image-20230419214313273.png" alt="image-20230419214313273"></p><p>​        这个时候，其实就是ptr的权限不够，现在我们来用std::move来解决问题</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void do_WithDog(std::move(pDog))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        此后留意到，不可以再次使用这个指针来访问，因为以及被移动了！</p><p><img src="watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3MxMXNob3dfMTYz,size_16,color_FFFFFF,t_70.png" alt="img"></p><p>（本质上讨论！就是把左值变为右值）</p><p>​        能不能简单点？可以，但是注意到，这里发生了隐式类型转换！</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void do_WithDog(std::make_unique&lt;dog&gt;());<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        2)引用传递</p><p>​        现在我们重新设计一下！</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void doWithRefDof(std::unique_ptr&lt;dog&gt;&amp; pDog) &#123;pDog-&gt;setInfo(&quot;111&quot;, 100);pDog-&gt;showDogInfo();pDog.reset();&#x2F;&#x2F; 把pDog的指向转向0&#125;doWithRefDof(recommend);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        于是后面再次使用recommend的时候会发现代码会在运行的时候崩溃，因为</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">recommend.get() --&gt; 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        这是需要注意的！那这样呢？</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void doWithRefDof(const std::unique_ptr&lt;dog&gt;&amp; pDog) &#123;pDog-&gt;setInfo(&quot;111&quot;, 100);pDog-&gt;showDogInfo();pDog.reset();&#x2F;&#x2F; 把pDog的指向转向0&#125;doWithRefDof(recommend);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        然后发现爆了新错，不是因为setInfo不能使用，而是Reset 出了问题</p><p><img src="image-20230419214405927.png" alt="image-20230419214405927"></p><p>​        就像常指针一样了！</p><p>​        下面，我们来设计一个返回unique_ptr 的函数 ，他正是：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">std::unique_ptr&lt;dog&gt; getUniDogPtr(const std::string name,const unsigned int age)&#123;std::unique_ptr&lt;dog&gt; p_Dog &#x3D; std::make_unique&lt;dog&gt;(name,age);        return p_Dog;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        或者再简洁一点！</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">std::unique_ptr&lt;dog&gt; getUniqueDogPtr(const std::string name,const unsigned int age) &#123;return std::make_unique&lt;dog&gt;(name, age);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT NEW 4</title>
      <link href="/2023/04/19/QT-NEW-4/"/>
      <url>/2023/04/19/QT-NEW-4/</url>
      
        <content type="html"><![CDATA[<h1 id="QT-NEW-4"><a href="#QT-NEW-4" class="headerlink" title="QT NEW 4"></a>QT NEW 4</h1><p>复习一下：</p><p>​        1）信号可以链接信号</p><p>​        2）一个信号可以链接多个槽函数</p><p>​        3）多个信号可以链接同一个槽函数</p><p>​        4）但是信号与槽函数的参数必须一一对应</p><p>这是我们练习生活实际是不难发现的！关于四，仔细看看！</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token punctuation">(</span>Teacher<span class="token double-colon punctuation">::</span><span class="token operator">*</span>StringOne<span class="token punctuation">)</span><span class="token punctuation">(</span>QString<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>Teacher<span class="token double-colon punctuation">::</span>announceHungry<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token punctuation">(</span>student<span class="token double-colon punctuation">::</span><span class="token operator">*</span>reacOne<span class="token punctuation">)</span><span class="token punctuation">(</span>QString<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>student<span class="token double-colon punctuation">::</span>reactions<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        可以看到必须一 一对应！</p><p>​        5）信号的参数个数是可以多于槽的参数，也就是说，信号携带的信息必须多余槽需要的！</p><pre class="line-numbers language-none"><code class="language-none">void(A::*sig)(QString,int) &#x3D; &amp;A::singals;void(B::*slot)(QString,int) &#x3D; &amp;B::slots;(√)void(A::*sig)(QString,int) &#x3D; &amp;A::singals;void(B::*slot)(int，QString) &#x3D; &amp;B::slots;(×)必须一一对应<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        而在QT4之前，我们使用SIGNAL,SLOT宏链接的。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">connect(sig1,SIGNAL(signals()),slot1,SLOT(slot()))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="补充Lambda表达式"><a href="#补充Lambda表达式" class="headerlink" title="补充Lambda表达式"></a>补充Lambda表达式</h2><p>​        这是C++11的产物，我们由此创建一个匿名的函数以简化编程工作：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">[capture](parameters)mutable-&gt;return-type&#123;statements&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        人话：[函数对象参数]（操作符重载函数参数）mutable-&gt;返回值{函数体实现}</p><h3 id="1-函数对象参数"><a href="#1-函数对象参数" class="headerlink" title="1.函数对象参数"></a>1.函数对象参数</h3><p>​        [ ]，这标志Lambda表达式的开始，不允许省略！其中，空表示没有使用任何函数对象。</p><p>​        [=] : 函数体内可以使用Lambda所在作用范围下的所有可见的局部变量（包括Lambda表达式所在的类的 this），并且传递方式是值传递</p><p>​        [&amp;]： 函数体内可以使用Lambda所在作用范围下的所有可见的局部变量（包括Lambda表达式所在的类的 this），并且传递方式是引用传递。</p><p>​        这是一个修改的demo.</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">[&#x3D;]()&#123;   btn2-&gt;setText(&quot;Lol&quot;);&#125;();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        最后的（）表示的是当地声明马上调用</p><p>​        [this] :函数体内可以使用Lambda所在作用范围下的所有可见的局部变量（包括Lambda表达式所在的类的 this和内部成员的变量），并且传递方式是值传递</p><p>​        [varName] 只认识varName，其他都看不见到，用于仅操作一个变量的匿名表达式</p><p><img src="image-20230419202055676.png" alt="image-20230419202055676"></p><p>​        当然后面的很少使用！</p><p>​        mutable关键字：可以修改按值传递进来的拷贝</p><p>​        可以观察这个代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QPushButton<span class="token operator">*</span> btn2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token string">"this is a btn2"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>btn2<span class="token punctuation">,</span><span class="token operator">&amp;</span>QPushButton<span class="token double-colon punctuation">::</span>clicked<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">mutable</span><span class="token punctuation">&#123;</span>n<span class="token operator">=</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QPushButton<span class="token operator">*</span> btn3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token string">"this is a btn3"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn3<span class="token operator">-></span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>btn3<span class="token punctuation">,</span>QPushButton<span class="token double-colon punctuation">::</span>clicked<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">mutable</span><span class="token punctuation">&#123;</span><span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        你会发现，点击btn2之后又点击btn3，发现并没有修改n，说明确实只是更改了拷贝而已！</p><p>​        下面来用一下，复盘一下我们学习的知识，那就是设计一个按钮，位于图片中学附近，且点击之后可以使传入的一个值+=10，同时打印信息：From lambda’s reactions!</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &quot;widget.h&quot;Widget::Widget(QWidget *parent)    : QWidget(parent)&#123;    QPushButton* btn &#x3D; new QPushButton(&quot;this is a btn&quot;,this);    resize(640,480);    btn-&gt;move(320,240);    connect(btn,&amp;QPushButton::clicked,this,[]()&#123;qDebug()&lt;&lt;&quot;From lambda&#39;s reactions!&quot;;&#125;);    unsigned int m &#x3D; 10;    connect(btn,&amp;QPushButton::clicked,this,[m]()mutable&#123;m+&#x3D;10;qDebug()&lt;&lt;m;&#125;);&#125;Widget::~Widget()&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        返回值：就是在（）后写 -&gt; type随后写实现！</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">[]()-&gt;int&#123;return 1000&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        如</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int in &#x3D; 10;  int res &#x3D; [&#x3D;]()-&gt;int&#123;return in*in;&#125;();  qDebug() &lt;&lt; res;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        又如点击按钮关闭窗口的demo:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">QPushButton* btn &#x3D; new QPushButton(&quot;this is a btn&quot;,this);resize(640,480);btn-&gt;move(320,240);connect(btn,&amp;QPushButton::clicked,this,&amp;Widget::close);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        好吧，那又加一个打印log?转向Lambda就好了</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">QPushButton* btn &#x3D; new QPushButton(&quot;this is a btn&quot;,this);resize(640,480);btn-&gt;move(320,240);connect(btn,&amp;QPushButton::clicked,this,[this]()&#123;this-&gt;close();qDebug()&lt;&lt;&quot;Windows is closed!&quot;;&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS正式开发1</title>
      <link href="/2023/04/18/ROS%E6%AD%A3%E5%BC%8F%E5%BC%80%E5%8F%911/"/>
      <url>/2023/04/18/ROS%E6%AD%A3%E5%BC%8F%E5%BC%80%E5%8F%911/</url>
      
        <content type="html"><![CDATA[<h1 id="ROS入门"><a href="#ROS入门" class="headerlink" title="ROS入门"></a>ROS入门</h1><p>​        ROS：Robot operating System</p><p>​        他是一个开源元操作系统，类似于我们经典意义的操作系统，有大量的工具，库与协议，还可以在多台计算机上获取，构建编写和运行代码的工具和库。</p><p><img src="image-20230329203952156.png" alt="image-20230329203952156"></p><p>​        至于ROS 的安装，这就不在阐述！</p><p>​        还是决定提供一个简单的方式测试一下你的ROS有没有安装成功。启动Linux虚拟机，随后开三个终端！</p><p>​        第一个终端启动ros环境，输入</p><pre class="line-numbers language-none"><code class="language-none">roscore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        第二个输入</p><pre class="line-numbers language-none"><code class="language-none">rosrun turtlesim turtlesim_node<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        第三个输入</p><pre class="line-numbers language-none"><code class="language-none">rosrun turtlesim turtle_teleop_key<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        看看小乌龟可不可以跑！注意第三个终端要在最上面！（焦点必须在第三个终端）</p><h2 id="体验经典：hello-world"><a href="#体验经典：hello-world" class="headerlink" title="体验经典：hello world"></a>体验经典：hello world</h2><p>​        ROS工作的程序有C++ 和 Python。</p><p>​        首先，我们需要让Linux认识一下ROS的库！这需要我们来初始化工作环境！其基本步骤如下：</p><ol><li><p>先创建一个工作空间</p></li><li><p>创建一个工作包</p></li><li><p>编辑源文件</p></li><li><p>编辑配置文件</p></li><li><p>编译并执行</p></li></ol><p>​        当然，真正的差异就在第四步，那我们先来看前几步！</p><p>第一步：</p><p>​        简而言之，找个地方！安装当下的文件，今天我们先创建一个RosLearn 文件夹吧，以及我们的第一个实验：Learn1,注意，还要整一个 src 文件夹，并且必须是这个名字！！！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> Roslearn/learn1/src<span class="token builtin class-name">cd</span> Roslearn/learn1catkin_make <span class="token comment">#this instructions aims to init the workspace!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="1-16806218690051.png" alt="1"></p><p><img src="1 (2" alt="1 (2)">-16806218769883.png)</p><p>​        这些正是Cmake的日志，下面开始第二部，创建一些简单的package!</p><p>​        我们把我们一切的源文件放到src文件夹下，随后，在命令行下输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> src<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        如是，创建功能节点即可</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">catkin_create_pkg <span class="token string">'packName'</span> <span class="token string">'dependency'</span> <span class="token comment">#when writing , you are no need to add ''!</span><span class="token comment"># examples</span>catkin_create_pkg helloWorld roscpp rospy std_msgs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        会发现：</p><p><img src="4-16806218814825.png" alt="4"></p><p><img src="5-16806218834477.png" alt="5"></p><p>​        多了很多文件，我们不予理会，还没到时候！</p><p>​        roscpp是C++的实现库，rospy是 python库的，这点需要注意！</p><p>​        好了，开始第三步！！！cd到包里的src文件</p><p><img src="10.png" alt="10"></p><p>​        如果熟悉 vim, 可以直接 vim helloworld_cpp.cpp来一个！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> helloworld_cpp.cpp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        书写这些代码！</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&quot;ros&#x2F;ros.h&quot;int main(int argc,char* argv[])&#123;    ros::init(argc,argv,&quot;hello&quot;);        ROS_INFO(&quot;hello world!!!&quot;);        return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        摁esc退出insert模式，随后:wq退出vim。</p><p>​        随后，更改CmakeLists 配置文件，注意到是这里的</p><p><img src="image-20230404230008119.png" alt="image-20230404230008119"></p><p>​        找到第136行的 add_executable,和第149行的target_link_library做出这样的更改</p><p><img src="image-20230404230318106.png" alt="image-20230404230318106"></p><p>​        这个haha是Cmake下的临时变量，注意到149行的name必须和136行的name一致</p><p>​        最后一步就是编译！！！</p><p>​        退回到最顶层工作文件夹，再次编译，若有错，按照报错改！</p><p><img src="image-20230404231553533.png" alt="image-20230404231553533"></p><p>​        没有错的话，是这样的 </p><p><img src="image-20230404231631732.png" alt="image-20230404231631732"></p><p>​        开一个新端</p><p>​        先让ros环境启动一下！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roscore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        回到原来的终端，注意是原来的！！！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> ./devel/setup.bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        不知道啥情况的找到这个文件然后source一下。</p><p>​        下面，就可以有</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rosrun helloworld haha<span class="token comment">#helloworld包下的haha</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        至于集成的开发环境，可以考虑VScode+插件，具体的配置方法在我的博客已经讲述过了！不再讲述！</p><h2 id="ROS节点说明"><a href="#ROS节点说明" class="headerlink" title="ROS节点说明"></a>ROS节点说明</h2><p>​        我们大多数时候需要启动多个ROS节点，这就需要我们写Launch文件来完成这个工作！</p><p>​        其实现如下：(以经典乌龟为例)</p><p>​        1)选定功能包右击—&gt;添加launch文件夹</p><p>​        2)选定launch文件邮寄—&gt;添加launch文件(xml文件)</p><p>​        3)书写</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">...</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launch</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        node : 节点</p><p>​        pkg 功能包</p><p>​        type: 被运行的节点文件</p><p>​        name 为节点命名</p><p>​        output 设置日志的输出目标</p><pre class="line-numbers language-none"><code class="language-none">roslaunch 包名 launch文件名称<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="撸代码"><a href="#撸代码" class="headerlink" title="撸代码"></a>撸代码</h2><p>​        下面,在一个节点下新建一个launch文件夹,随后在这个文件夹下面新建xml文件        </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- add nodes here--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launch</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        不要急着就写下面,先保存,后跑一下可不可以跑!</p><p>​        摁 ctrl + ~打开bash ,先搞一下环境变量 source ./devel/setup.bash</p><p>​        然后跑一下</p><p><img src="image-20230418221943490.png" alt="image-20230418221943490"></p><p>​        这个Launch标签就是启动环境的,下面开始书写</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>launch</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- add nodes here--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>turtlesim<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>turtlesim_node<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>GUI<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>turtlesim<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>turtle_teleop_key<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Key<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello_cpp<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hello_cpp_c<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>try<span class="token punctuation">"</span></span> <span class="token attr-name">output</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>screen<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- pkg是包名 type就是运行文件!切记--></span><span class="token comment">&lt;!-- output 表示的是输出的日志输出在哪里--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>launch</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT NEW (3)</title>
      <link href="/2023/04/18/QT-NEW-3/"/>
      <url>/2023/04/18/QT-NEW-3/</url>
      
        <content type="html"><![CDATA[<h1 id="QT-NEW-3"><a href="#QT-NEW-3" class="headerlink" title="QT NEW 3"></a>QT NEW 3</h1><h2 id="信号与槽的基础概念"><a href="#信号与槽的基础概念" class="headerlink" title="信号与槽的基础概念"></a>信号与槽的基础概念</h2><p>​        我们现在开始关联我们的行为和效果！比若说：我希望点击按钮后就帮我关闭窗口！于是</p><p><img src="image-20230412232937449.png" alt="image-20230412232937449"></p><p>​        这就是我们分解完后发现就是这样的，现在开始关联他们：</p><p>​        英语里：connect就是连接的，结合上图发现，想要表达一个链接，无非就是：</p><pre class="line-numbers language-none"><code class="language-none">connect(sender, sendSignal, receiver, slogAsActionReact)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        注意了：注意！我们点击按钮，不一定是去关闭窗口，而窗口关闭了不一定时我点击了按钮导致的</p><p>​        于是，信号槽的优点就是：松散耦合的！他们之间本来没啥关联！但是现在我们直接用connect函数来耦合在一起！</p><p>​        QT里，就是connect函数完成我们的工作！先来看发送者：按钮！那信号呢？</p><p><img src="image-20230412233514694.png" alt="image-20230412233514694"></p><p>​        于是找到一个信号clicked. </p><p><img src="image-20230412233547084.png" alt="image-20230412233547084"></p><p>​        所以传入一个函数的地址！&amp;QPushButton::clicked</p><p>​        接收者同理！：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">connect(mine, &amp;QPushButton::clicked,this,&amp;QWidget::close);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        这一思想十分重要！还是需要好好消化！</p><p>​        现在尝试自己来书写两个类，来建立相应的关系！</p><p>​        现在构建程序如下：</p><p>​        在最大工程文件之下添加两个类！，首先是 Teacher类。 随后是学生类。假设这一场景！老师要求学生交作业！学生听到老师的要求来拿出作业，老师看到学生拿出作业之后再上前收取。这个行为我们使用 QT 的槽与信号来完成我们的实现。</p><p>​        选择新建两个类： Student 和 Teacher. 注意到为了能够使用 QT系统的一些性质，有必要来选择继承QT类。</p><p>​        当我们完成了新建，马上就发现，它同我们所想象的不太一样！</p><p><img src="image-20230414145816352.png" alt="image-20230414145816352"></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#ifndef TEACHER_H#define TEACHER_H#include &lt;QObject&gt;class Teacher : public QObject &#x2F;&#x2F; QObject 是 Teacher 的一个基类&#123;    Q_OBJECT &#x2F;&#x2F; 这是QObject宏，声明启用Slot - Signals关系的public:    explicit Teacher(QObject *parent &#x3D; nullptr);        &#x2F;&#x2F; 只有在有 Q_OBJECT下才生效signals:&#x2F;&#x2F; 我们在这里书写 signals 作为信号函数public slots:        &#x2F;&#x2F; 我们在这里书写 slots 作为响应信号的槽函数&#125;;#endif &#x2F;&#x2F; TEACHER_H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        注意到我们在这里完成槽函数和信号函数的书写！</p><p>​        以及这里需要提醒的是：槽函数在这里是一个实现的占位函数，这是在底层的文件中，QT为我们实现了函数了，不要在定义实现文件里再次定义信号函数，否则会发生报错。</p><p>​        但是，槽函数需要实现，这是需要在实现文件里自己重写的！</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void student::reactions()&#123;qDebug() &lt;&lt; &quot;Yep, I think I will help you!&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        书写完响应之后，我们现在可以来干活了（在Widget.cpp）</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &quot;widget.h&quot;#include&quot;student.h&quot;#include&quot;teacher.h&quot;Widget::Widget(QWidget *parent)    : QWidget(parent)&#123;    Teacher* t &#x3D; new Teacher(this);    student* s &#x3D; new student(this);    &#x2F;&#x2F; 这里是链接信号和槽，但是这又这样是不行的，英文不是所有的这个函数都是信号，只有当我们认为指定他是信号的时候才需要出发槽函数    connect(t,&amp;Teacher::announceHungry,s,&amp;s-&gt;reactions);&#x2F;&#x2F; 而emit就是声命这是这是一个信号函数且需要调用s-&gt;reactions    emit t-&gt;announceHungry();&#125;Widget::~Widget()&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        这样，只要我们一开始运行程序，就会发现</p><p><img src="image-20230418202145548.png" alt="image-20230418202145548"></p><p>​        嗯，打印了（如果跑的是我的那个demo就是Yep, I think I will help you!）</p><h2 id="槽函数的重载版本"><a href="#槽函数的重载版本" class="headerlink" title="槽函数的重载版本"></a>槽函数的重载版本</h2><p>​        下面，我们进一步的探索可以重载版本的槽函数</p><p>​        以上一小节的场景为例子，加上槽函数的重载版本！</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; in .hslots:void reactions(QString s); &#x2F;&#x2F; .cppvoid student::reactions(QSrting s)&#123;qDebug() &lt;&lt; &quot;yep, I think it is&quot; &lt;&lt; s;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        现在，注释掉原先的emit 就可以发现智能提示上函数有重载版本！</p><p>​        但是，当我们直接单击运行的时候，QT报错了！原因很简单！QT不知道你要那个回应！于是，我们转向传专门到具体的函数的指针！也就是直接传重载版本的函数指针！</p><p>​        但是，我们的信号来源信息是需要从信号函数那里来的，于是还要重载Signal函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//.h</span>signal<span class="token operator">:</span><span class="token keyword">void</span> <span class="token function">announceHungry</span><span class="token punctuation">(</span>QString s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// .cpp</span><span class="token keyword">void</span> <span class="token class-name">Teacher</span><span class="token double-colon punctuation">::</span><span class="token function">announceHungry</span><span class="token punctuation">(</span>QString s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 仍然不实现！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        现在，告诉引发的信号是来自：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">emit t<span class="token operator">-></span><span class="token function">announceHungry</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从这里编译器判断函数类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token punctuation">(</span>Teacher<span class="token double-colon punctuation">::</span><span class="token operator">*</span>StringOne<span class="token punctuation">)</span><span class="token punctuation">(</span>QString<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>Teacher<span class="token double-colon punctuation">::</span>announceHungry<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token punctuation">(</span>student<span class="token double-colon punctuation">::</span><span class="token operator">*</span>reacOne<span class="token punctuation">)</span><span class="token punctuation">(</span>QString<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>student<span class="token double-colon punctuation">::</span>reactions<span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>StringOne<span class="token punctuation">,</span>s<span class="token punctuation">,</span>reacOne<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="image-20230418210445433.png" alt="image-20230418210445433"></p><h2 id="令人恼火的是："><a href="#令人恼火的是：" class="headerlink" title="令人恼火的是："></a>令人恼火的是：</h2><p>​        马上强迫症发现了：不对啊，我们的111不应该打印“” 啊！，这是因为类型是QString导致的，这个时候只要我们进行转化就好了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span><span class="token function">toUtf8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// QString -> ByteArray -> const char*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="image-20230418211415114.png" alt="image-20230418211415114"></p><h2 id="高级一点的信号与槽"><a href="#高级一点的信号与槽" class="headerlink" title="高级一点的信号与槽"></a>高级一点的信号与槽</h2><p>​        现在，让我们点击按钮，连续的触发事件来让样例复杂起来。</p><p>​        信号与槽的一个重要的要求就是信号和槽的函数的参数必须一致(有参的信号和QPushButton的clicked信号的参数不匹配就会编译报错)，于是，包装一个Emit函数</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void Widget::Emit()&#123;&#x2F;&#x2F; 预先在Widget里添加成员t，并且初始化Emit t-&gt;announcement(&quot;111&quot;)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        现在，开始关联：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QPushButton<span class="token operator">*</span> btn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token string">"Press me"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token operator">-></span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>btn<span class="token punctuation">,</span>QPushButton<span class="token double-colon punctuation">::</span>clicked<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>Widget<span class="token double-colon punctuation">::</span>Emit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token punctuation">(</span>Teacher<span class="token double-colon punctuation">::</span><span class="token operator">*</span>StringOne<span class="token punctuation">)</span><span class="token punctuation">(</span>QString<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>Teacher<span class="token double-colon punctuation">::</span>announceHungry<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token punctuation">(</span>student<span class="token double-colon punctuation">::</span><span class="token operator">*</span>reacOne<span class="token punctuation">)</span><span class="token punctuation">(</span>QString<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>student<span class="token double-colon punctuation">::</span>reactions<span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>StringOne<span class="token punctuation">,</span>s<span class="token punctuation">,</span>reacOne<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230418213636339.png" alt="image-20230418213636339"></p><p>​        对了，信号也可以来连接信号，就是：</p><p><img src="image-20230418214613353.png" alt="image-20230418214613353"></p><p><img src="image-20230418214631458.png" alt="image-20230418214631458"></p><h2 id="断开链接"><a href="#断开链接" class="headerlink" title="断开链接"></a>断开链接</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">disconnect</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>signalF<span class="token punctuation">,</span>sloter<span class="token punctuation">,</span>slotF<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT NEW (2)</title>
      <link href="/2023/04/18/QT-NEW-2/"/>
      <url>/2023/04/18/QT-NEW-2/</url>
      
        <content type="html"><![CDATA[<h1 id="QT开发-NEW2"><a href="#QT开发-NEW2" class="headerlink" title="QT开发_NEW2"></a>QT开发_NEW2</h1><h2 id="创建一个按钮"><a href="#创建一个按钮" class="headerlink" title="创建一个按钮"></a>创建一个按钮</h2><p>​        我们查询帮助文档，得到这些信息</p><pre class="line-numbers language-none"><code class="language-none">QPushButton ClassThe QPushButton widget provides a command button. More...Header:#include &lt;QPushButton&gt; qmake:QT +&#x3D; widgetsInherits:QAbstractButtonInherited By:QCommandLinkButton<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        当然要留意是什么模块，如果 pro 文件里没有，那需要我们手动添加，在</p><p><img src="image-20230301221926786.png" alt="image-20230301221926786"></p><p>​        的QT += 处 添加模块。</p><p>​        当然可以看看函数的功能</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">QPushButton</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">)</span><span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token keyword">const</span> QString <span class="token operator">&amp;</span>text<span class="token punctuation">,</span> QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">)</span><span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token keyword">const</span> QIcon <span class="token operator">&amp;</span>icon<span class="token punctuation">,</span> <span class="token keyword">const</span> QString <span class="token operator">&amp;</span>text<span class="token punctuation">,</span> QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> Q_NULLPTR<span class="token punctuation">)</span><span class="token operator">~</span><span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span>bool <span class="token function">autoDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>bool <span class="token function">isDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>bool <span class="token function">isFlat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span>QMenu <span class="token operator">*</span><span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token keyword">void</span> <span class="token function">setAutoDefault</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">setDefault</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">setFlat</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">setMenu</span><span class="token punctuation">(</span>QMenu <span class="token operator">*</span>menu<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        于是可以在 widget.cpp 中书写如下代码：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include &quot;widget.h&quot;#include&lt;QPushButton&gt;Widget::Widget(QWidget *parent)    : QWidget(parent)&#123;    QPushButton* btn &#x3D; new QPushButton;    btn-&gt;setParent(this); &#x2F;&#x2F; 需要设置窗口对象作为对象书的叶子节点    btn-&gt;setText(&quot;hello world&quot;);&#125;Widget::~Widget()&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230301222534315.png" alt="image-20230301222534315"></p><p>​        如果我们重新设置一下窗口大小，那就</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">int</span> Height<span class="token punctuation">,</span><span class="token keyword">int</span> Width<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        但是如果我们直接创建第二个按钮，那就会覆盖第一个，那怎么办？使用 move 方法！</p><pre class="line-numbers language-none"><code class="language-none">btn-&gt;move(int x_pos,int y_pos)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        当然啊，我们可以设置窗口的名字：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">setWindowTitle(&quot;My first windows&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        以及可以固定窗口大小：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">setFixedSize</span><span class="token punctuation">(</span><span class="token keyword">int</span> Height<span class="token punctuation">,</span><span class="token keyword">int</span> Width<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20230301223238957.png" alt="image-20230301223238957"></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &quot;widget.h&quot;#include&lt;QPushButton&gt;Widget::Widget(QWidget *parent)    : QWidget(parent)&#123;    QPushButton* btn &#x3D; new QPushButton;    btn-&gt;setParent(this); &#x2F;&#x2F; 需要设置窗口对象作为对象书的叶子节点    btn-&gt;setText(&quot;hello world&quot;);    QPushButton* btn2 &#x3D; new QPushButton;    btn2-&gt;setParent(this); &#x2F;&#x2F; 需要设置窗口对象作为对象书的叶子节点    btn2-&gt;move(100,100);    setWindowTitle(&quot;My first Window&quot;);    resize(600,400);    setFixedSize(600,400);&#125;Widget::~Widget()&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="QT对象树"><a href="#QT对象树" class="headerlink" title="QT对象树"></a>QT对象树</h2><p>​        我们发现，程序结束后，不需要一个一个手动的释放对象，这是因为，我们调用构造函数指定了一个Parent父对象，其父对象会把我们自己搞的子对象挂到对象树上，</p><p><img src="image-20230411202327161.png" alt="image-20230411202327161"></p><p>​        （补充：一个类创建时需要调用一个函数来构造初始化这个类，这叫构造函数。当类的什么周期结束时需要调用一个删除函数，释放类占用的空间，这叫析构函数。类默认有这两个函数）于是在QT中只要指定好父对象就会帮助管理！不需要我们手动释放，很是方便</p><p>​        现在，我们来创建一个新类：MyPushBtn</p><p>​        右键工程-&gt; 添加新文件-&gt;C++ Class -&gt;选择 QWedget就好了。</p><p>​        随后，就发现多了一些文件</p><p><img src="image-20230411203853556.png" alt="image-20230411203853556"></p><p>​        pro文件下多了我们自己定义的类的cpp文件和头文件</p><p><img src="image-20230411204458973.png" alt="image-20230411204458973"></p><p><img src="image-20230411204545650.png" alt="image-20230411204545650"></p><p>​        现在我们调一下自己写的：</p><p><img src="image-20230411205908628.png" alt="image-20230411205908628"></p><p>​        可以看到我们自己的按钮产生了！</p><h2 id="QT-坐标系"><a href="#QT-坐标系" class="headerlink" title="QT 坐标系"></a>QT 坐标系</h2><p>​        QT的坐标原点在窗口的最左上角，这是值得注意的一点，同时：X向右增大，向左减小，而Y 向下增大，向上减小。对于嵌套窗口，则是以父窗口为例子的！</p><p>​        </p>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>High Quality of C_Cpp programming in formats(1)</title>
      <link href="/2023/04/17/High-Quality-of-C-Cpp-programming-in-formats-1/"/>
      <url>/2023/04/17/High-Quality-of-C-Cpp-programming-in-formats-1/</url>
      
        <content type="html"><![CDATA[<h1 id="高质量的C-C-规程规范"><a href="#高质量的C-C-规程规范" class="headerlink" title="高质量的C/C++规程规范"></a>高质量的C/C++规程规范</h1><h2 id="笔记篇"><a href="#笔记篇" class="headerlink" title="笔记篇"></a>笔记篇</h2><p>​        每个C++/C 程序通常分为两个文件。一个文件用于保存程序的声明（declaration），这被称之为头文件，另一个文件用于保存程序的实现，这是被称之为定义文件。</p><p>​        为此，我们选择了使用后缀来作为文件的区分。在C/C++中，我们选择使用.h/.hpp来作为头文件，而.c文件是C语言源文件，.cpp是C++源文件.</p><p>​        下面是头文件的开门格式</p><h2 id="头文件的结构"><a href="#头文件的结构" class="headerlink" title="头文件的结构"></a>头文件的结构</h2><p>​        三个基本结构: 开头的的版权和版本声明</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;**Copyright (c) * All rights reserved. * * 文件名称：filename.h * 文件标识：见配置管理计划书 * 摘 要：简要描述本文件的内容 * * 当前版本：1.1 * 作 者：输入作者（或修改者）名字 * 完成日期：2001年7月20日 * * 取代版本：1.0 * 原作者 ：输入原作者（或修改者）名字 * 完成日期：2001年5月10日*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        预处理块。</p><pre class="line-numbers language-none"><code class="language-none">#define ...#ifdef ...#ifndef ...#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        函数和类结构声明等。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; Some announcements hear<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>假设头文件名称为 graphics.h，头文件的结构参见示例 1-2。 </p><p><strong>【规则 1-2-1</strong>】为了防止头文件被重复引用，应当用ifndef/define/endif 结构产生预</p><p>处理块。</p><p><strong>【规则 1-2-2</strong>】用 #include <filename.h> 格式来引用标准库的头文件（编译器将从标准库目录开始搜索）。</p><p><strong>【规则 1-2-3</strong>】用 #include “filename.h” 格式来引用非标准库的头文件（编译器将</p><p>从用户的工作目录开始搜索）。</p><p><strong>【建议 1-2-1</strong>】头文件中只存放“声明”而不存放“定义”<br>        在 C++ 语法中，类的成员函数可以在声明的同时被定义，并且自动成为内联函数。这虽然会带来书写上的方便，但却造成了风格不一致，弊大于利。建议将成员函数的定义与声明分开，不论该函数体有多么小。<br><strong>【建议 1-2-2】</strong>不提倡使用全局变量，尽量不要在头文件中出现象 extern int value 这<br>类声明。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 版权和版本声明见示例 1-1，此处省略。</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">GRAPHICS_H </span><span class="token comment">// 防止 graphics.h 被重复引用 </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">GRAPHICS_H</span> </span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span> <span class="token comment">// 引用标准库的头文件 </span></span>…<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token expression">“myheader<span class="token punctuation">.</span>h” </span><span class="token comment">// 引用非标准库的头文件 </span></span>… <span class="token keyword">void</span> <span class="token function">Function1</span><span class="token punctuation">(</span>…<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 全局函数声明 </span>… <span class="token keyword">class</span> <span class="token class-name">Box</span> <span class="token comment">// 类结构声明 </span><span class="token punctuation">&#123;</span> … <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        早期的编程语言如 Basic、Fortran 没有头文件的概念，C++/C 语言的初学者虽然会<br>用使用头文件，但常常不明其理。这里对头文件的作用略作解释：<br>​        （1）通过头文件来调用库功能。在很多场合，源代码不便（或不准）向用户公布，只要向用户提供头文件和二进制的库即可。用户只需要按照头文件中的接口声明来调用库功能，而不必关心接口怎么实现的。编译器会从库中提取相应的代码。<br>​        （2）头文件能加强类型安全检查。如果某个接口被实现或被使用时，其方式与头文件中的声明不一致，编译器就会指出错误，这一简单的规则能大大减轻程序员调试、改错的负担</p><p>​        在目录结构上:如果一个软件的头文件数目比较多（如超过十个），通常应将头文件和定义文件分别保存于不同的目录，以便于维护。<br>例如可将头文件保存于 include 目录，将定义文件保存于 source 目录（可以是多级<br>目录）。<br>​        如果某些头文件是私有的，它不会被用户的程序直接引用，则没有必要公开其“声<br>明”。为了加强信息隐藏，这些私有的头文件可以和定义文件存放于同一个目录</p><h2 id="尽可能良好的书写程序"><a href="#尽可能良好的书写程序" class="headerlink" title="尽可能良好的书写程序"></a>尽可能良好的书写程序</h2><p>​        空行起着分隔程序段落的作用。空行得体（不过多也不过少）将使程序的布局更加清晰。空行不会浪费内存，虽然打印含有空行的程序是会多消耗一些纸张，但是值得。所以不要舍不得用空行。</p><p><img src="image-20230417143154203.png" alt="image-20230417143154203"></p><p>​        于是可以看到,在程序的逻辑模块之间, 我们采用空格来表明逻辑的独立性</p><p>【规则 2-2-1】一行代码只做一件事情，如只定义一个变量，或只写一条语句。这样<br>的代码容易阅读，并且方便于写注释。<br>【规则 2-2-2】if、for、while、do 等语句自占一行，执行语句不得紧跟其后。不论<br>执行语句有多少都要加{}。这样可以防止书写失误。</p><p>【建议 2-2-1】尽可能在定义变量的同时初始化该变量（就近原则）<br>如果变量的引用处和其定义处相隔比较远，变量的初始化很容易被忘记。如果引用<br>了未被初始化的变量，可能会导致程序错误。</p><p>2.3 代码行内的空格</p><p>【规则 2-3-1】关键字之后要留空格。象 const、virtual、inline、case 等关键字之<br>后至少要留一个空格，否则无法辨析关键字。象 if、for、while 等关键字之后应留<br>一个空格再跟左括号‘（’，以突出关键字。</p><p>【规则 2-3-2】函数名之后不要留空格，紧跟左括号‘（’，以与关键字区别。</p><p>【规则 2-3-3】‘（’向后紧跟，‘）’、‘，’、‘;’向前紧跟，紧跟处不留空格。</p><p>【规则 2-3-4】‘，’之后要留空格，如 Function(x, y, z)。如果‘;’不是一行的结束<br>符号，其后要留空格，如 for (initialization; condition; update)。</p><p>【规则 2-3-5】赋值操作符、比较操作符、算术操作符、逻辑操作符、位域操作符，<br>如“=”、“+=” “&gt;=”、“&lt;=”、“+”、“*”、“%”、“&amp;&amp;”、“||”、“&lt;&lt;”,“^”等二<br>元操作符的前后应当加空格。</p><p>【规则 2-3-6】一元操作符如“!”、“~”、“++”、“—”、“&amp;”（地址运算符）等前后不<br>加空格。</p><p>【规则 2-3-7】象“［］”、“.”、“-&gt;”这类操作符前后不加空格。</p><p>【建议 2-3-1】对于表达式比较长的 for 语句和 if 语句，为了紧凑起见可以适当地去<br>掉一些空格，如 for (i=0; i&lt;10; i++)和 if ((a&lt;=b) &amp;&amp; (c&lt;=d))</p><p><img src="image-20230417144044784.png" alt="image-20230417144044784"></p><p>对齐</p><p>​        【规则 2-4-1】程序的分界符‘{’和‘}’应独占一行并且位于同一列，同时与引用<br>它们的语句左对齐。</p><p>​        【规则 2-4-2】{ }之内的代码块在‘{’右边数格处左对齐。</p><p>长行的拆分</p><p>​    【规则 2-5-1】代码行最大长度宜控制在 70 至 80 个字符以内。代码行不要过长，否则眼睛看不过来，也不便于打印。<br>​    【规则 2-5-2】长表达式要在低优先级操作符处拆分成新行，操作符放在新行之首（以便突出操作符）。拆分出的新行要进行适当的缩进，使排版整齐，语句可读</p><p><img src="image-20230417144342762.png" alt="image-20230417144342762"></p><p>​        修饰符 <em> 和 ＆ 应该靠近数据类型还是该靠近变量名，是个有争议的活题。<br>​        若将修饰符 </em> 靠近数据类型，例如：int<em> x; 从语义上讲此写法比较直观，即 x<br>是 int 类型的指针 ,上述写法的弊端是容易引起误解，例如：int</em> x, y; 此处 y 容易被误解为指针变量。虽然将 x 和 y 分行定义可以避免误解，但并不是人人都愿意这样做。<br>​    【规则 2-6-1】应当将修饰符 <em> 和 ＆ 紧靠变量名<br>​        例如：<br>​        char </em>name;<br>         int *x, y; // 此处 y 不会被误s解为指针！</p><p>​        </p>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LearnLinuxBasicNote</title>
      <link href="/2023/04/16/LearnLinuxBasicNote/"/>
      <url>/2023/04/16/LearnLinuxBasicNote/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux入门"><a href="#Linux入门" class="headerlink" title="Linux入门"></a>Linux入门</h1><h2 id="操作系统概述"><a href="#操作系统概述" class="headerlink" title="操作系统概述"></a>操作系统概述</h2><p>​        首先计算机由硬件和软件组成，这是大家都知道的。硬件，就是你看到到的实体。至于软件，就是用户和计算机硬件之间的接口和桥梁。我们这次的主题：操作系统，就是软件！他是用户和计算机硬件之间的桥梁，调度和管理计算机硬件进行工作。</p><p>​        当代计算机不能失去计算机，就像西方不能失去耶路撒冷一样（）</p><p><img src="image-20230411185638955.png" alt="image-20230411185638955"></p><p>​        操作系统可以：调度CPU和内存进行工作，使用硬盘来进行数据存储，来使用网卡进行网络通讯，调用音响发出声音，调用打印机打印东西等等。</p><p>​        这是一个操作系统调用网卡的过程：</p><p><img src="image-20230411190152332.png" alt="image-20230411190152332"></p><p>​        常见的操作系统有：Windows 11 ， Linux， macOS（PC操作系统）和android, IOS Harmony OS等等是移动端操作系统了。</p><h2 id="Linux概述"><a href="#Linux概述" class="headerlink" title="Linux概述"></a>Linux概述</h2><p>​        1991年，Linux从一个佬那里诞生，并且逐渐被世界所接受。</p><p>​        Linux由Linux系统内核和系统级应用程序组成。</p><p>​        内核提供系统最核心的功能：比如说：调度CPU，调度缓存，调度文件系统，调度网络通信，调度IO等。</p><p>​        系统应用：比如说图片查看等等</p><p>​        </p><h2 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h2><p>​        Linux的目录结构是一个树形的结构，Linux不同于Windows，他只有一个根目录/，所有的文件都在它的下面</p><p><img src="image-20230411195709234.png" alt="image-20230411195709234"></p><p>​        首先，我们这个是在阐述文件路径的层级关系，打开你的Windows cmd (Win + R + Enter) ，发现这个：</p><p><img src="image-20230411195944592.png" alt="image-20230411195944592"></p><p>​        如果我们到Linux底下（不管是CentOS 还是 Ubuntu）都是 / 的</p><p><img src="image-20230411200155312.png" alt="image-20230411200155312"></p><p>​    （以Ubuntu 20.04作为示例）</p><p>​        于是，想要在文件中找到一个目标文件，在Windows中，我们已经很熟悉了：</p><pre class="line-numbers language-none"><code class="language-none">D:\data\work\hello.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        在Linux下就是</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;usr&#x2F;local&#x2F;hello.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        注意到<strong>Linux中，/出现在开头：根目录，/出现在中间：层次关系</strong></p><h2 id="第一个Linux命令：ls"><a href="#第一个Linux命令：ls" class="headerlink" title="第一个Linux命令：ls"></a>第一个Linux命令：ls</h2><p>​        先停！搞清楚什么是命令很重要：他是Linux的 Terminal，下命令提示符页面我们单纯的使用’字符’来操作系统，也就是使用各种字符指令来对系统发出操作指令。</p><p>​        而命令，本质上还是一个程序，只是没有图形化的相关界面。其反馈又以字符串的形式返回来。</p><p><img src="image-20230414222522060.png" alt="image-20230414222522060"></p><p>​        比如说在CentOS下，我们敲入字符ls 发现返回了东西。就是说明 ls 是程序，而下面的结果就是字符形式的返回</p><p>​        在Linux,命令具有相同的通用格式！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token punctuation">[</span>-options<span class="token punctuation">]</span> <span class="token punctuation">[</span>parameters<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        command 即是命令本身，</p><p>​        （选填）而 -options 就是 控制行为的一些具体的设置细节</p><p>​        （选填）parameter 就是命令之下的参数</p><p>​        举个例子：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-l</span> /home<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        ls 就是命令， -l 就是选项，表明如何执行这样的命令，/home表示参数。于是这条指令正是： 查看home文件夹下的内容，其显示方式使用列表</p><p><img src="image-20230414224112645.png" alt="image-20230414224112645"></p><p>​        现在主要看 ls ，他的格式如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token punctuation">[</span>-a <span class="token parameter variable">-l</span> -h<span class="token punctuation">]</span> <span class="token punctuation">[</span>/Linux/Path<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        直接使用ls 表明直接通过平铺的方式展示这一目录下的工作内容</p><p><img src="image-20230414224455558.png" alt="image-20230414224455558"></p><p><img src="image-20230414224618031.png" alt="image-20230414224618031"></p><p>​        还就是桌面上那个home文件夹的内容！于是 ls 就是等同于我们来看当前文件夹下的东西。</p><h2 id="什么是工作目录"><a href="#什么是工作目录" class="headerlink" title="什么是工作目录"></a>什么是工作目录</h2><p>​        当我们启动命令行时，默认我们的 home下的用户名为名称的目录正是工作目录：也就是我们准备执行若干操作的当下目录</p><p><img src="image-20230414225017894.png" alt="image-20230414225017894"></p><p><img src="image-20230414225600771.png" alt="image-20230414225600771"></p><h2 id="ls-参数详解"><a href="#ls-参数详解" class="headerlink" title="ls 参数详解"></a>ls 参数详解</h2><p>​        -a : all 的意思。于是。。。</p><p><img src="image-20230414231338693.png" alt="image-20230414231338693"></p><p>​        在 .Name 之类的就是Linux下的隐藏文件。总而言之，-a 就是展示所有的文件，包括那些被隐藏的文件</p><p>​        而在-l 下，就是以列表的方式展示我们的文件是怎样的。</p><p><img src="image-20230414232357814.png" alt="image-20230414232357814"></p><p>​        那如果我想： 既想展示所有的隐藏文件，又想用列表的方式展示，那就是可以有下面三种方式。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> <span class="token parameter variable">-l</span> <span class="token parameter variable">-a</span> <span class="token function">ls</span> <span class="token parameter variable">-la</span><span class="token function">ls</span> <span class="token parameter variable">-al</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="image-20230414232421335.png" alt="image-20230414232421335"></p><p><img src="image-20230414232443582.png" alt="image-20230414232443582"></p><p><img src="image-20230414232507927.png" alt="image-20230414232507927"></p><p>​        最后是 -h, 他表示我们以一种方便阅读的方式来列出文件的大小！注意必须和-l 一同使用，否则不会显示相关的效果！ </p><p><img src="image-20230414232733351.png" alt="image-20230414232733351"></p><p>​        可以看到我们更容易阅读文件的大小了</p><h2 id="cd-pwd指令"><a href="#cd-pwd指令" class="headerlink" title="cd  -  pwd指令"></a>cd  -  pwd指令</h2><p>​        使用 cd 命令来切换工作目录（Change Directory）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /Linux/Path<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        当我们不指定路径时，直接回到home目录</p><p><img src="image-20230415215546677.png" alt="image-20230415215546677"></p><p>​        ls并不是专门打印当下目录的正确指令，至少不恰当！事实上，还是pwd才合适，他就是 print work directory 的缩写</p><p><img src="image-20230415215936705.png" alt="image-20230415215936705"></p><p>​        只需要输入 pwd 就可以查看当下的目录了！·</p><h2 id="相对路径-绝对路径-特殊路径符"><a href="#相对路径-绝对路径-特殊路径符" class="headerlink" title="相对路径/绝对路径/特殊路径符"></a>相对路径/绝对路径/特殊路径符</h2><p>​        我们书写目录，一种是从根目录开始找： /usr/ Path，还有一种是从 当下的工作目录开始找： cd LinuxPath, 前者是就是从根目录找，称之为绝对路径，非常的绝对，代价即是很长。后者就是在当前目录去找！</p><p>​        下面是一些特殊的符号：</p><pre class="line-numbers language-none"><code class="language-none">. : 当前目录，常用的就是切换到当前目录下的文件夹，比如说：cd .&#x2F;Desktop&#x2F;SomeThing.. : 返回上一级目录 退两级：cd ..&#x2F;..~ : 直接回到home<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mkdir-命令"><a href="#mkdir-命令" class="headerlink" title="mkdir 命令"></a>mkdir 命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token punctuation">[</span>-p<span class="token punctuation">]</span> LinuxPath<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        mkdir正如缩写所义：make directory。创建一个在父目录之下的子目录。而参数 -p 是可选的，他让我们可以创建一个递归的目录，适用于直接创建多层的文件夹，实际看一下就是这个意思！</p><p><img src="image-20230415221252797.png" alt="image-20230415221252797"></p><p><img src="image-20230415221608598.png" alt="image-20230415221608598"></p><h2 id="torch-cat-more"><a href="#torch-cat-more" class="headerlink" title="torch cat more"></a>torch cat more</h2><p>​        使用torch命令来创建文件，格式是：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> LinuxPath/Filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20230415222041990.png" alt="image-20230415222041990"></p><p>​        随后，我们可以先给这个文件写点东西，会使用 vim 就用 vim：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; type in shell &gt;&gt;&gt;vim touch.txt&#x2F;&#x2F; press i to get into the insert mode&#x2F;&#x2F; write in file : Hello,welcome using cat to check the note off this file&#x2F;&#x2F; press ESC&#x2F;&#x2F; write :wq&#x2F;&#x2F; back to shell: &gt;&gt;&gt; cat touch.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230415222728934.png" alt="image-20230415222728934"></p><pre class="line-numbers language-none"><code class="language-none">cat Linux&#x2F;Path&#x2F;FileName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        对于more命令，那表示的是如果文件内容过长，可以使用more命令来查看文档</p><p><img src="image-20230415223140319.png" alt="image-20230415223140319"></p><p>​        </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">more</span> Linux/Path/FileName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        回车一行行查看，空格是一页一页看，退出是q</p><h2 id="cp-mv-rm"><a href="#cp-mv-rm" class="headerlink" title="cp mv rm"></a>cp mv rm</h2><p>​        cp是copy的缩写，就是复制文件的意思。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token punctuation">[</span>-r<span class="token punctuation">]</span> LinuxPath_beCopied LinuxPath_toThePlace<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        -r 递归复制文件</p><p>​        第一个Path表明被复制的对象，第二个表示的是复制到何处。</p><p><img src="image-20230415223633861.png" alt="image-20230415223633861"></p><p>​        而mv:即是 move 的缩写了！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> LinuxPath/FileName<span class="token punctuation">(</span>or dirName<span class="token punctuation">)</span> LinuxPathDir<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        当然目标不存在的话就会改名保证目标的存在</p><p><img src="image-20230415223930574.png" alt="image-20230415223930574"></p><p>​        <img src="image-20230415224110470.png" alt="image-20230415224110470"></p><p>​        看，1.txt就被改成3.txt了</p><p>​        rm命令就是remove，表明删除</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> <span class="token punctuation">[</span>-r -f<span class="token punctuation">]</span> file1 dir1 file2 dir2 <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        -r :递归删除，可以用来删除文件夹</p><p>​        -f: 强迫删除，不需要询问，都可以删！（force）</p><p>​        如此多的参数就是我们想要删除的内容，使用空格隔开</p><p><img src="image-20230415224446501.png" alt="image-20230415224446501"></p><p><img src="image-20230415224550942.png" alt="image-20230415224550942"></p><p>​        rm支持通配符*用来进行模糊搜索：如</p><p>​        test*表明以test开头的所有文件</p><p>​        *test表示以test结尾的所有文件</p><p>​        <em>test\</em>表所有包含了test这个子字符串的文件名</p><h2 id="which和find"><a href="#which和find" class="headerlink" title="which和find"></a>which和find</h2><p>​        我们知道，Linux下的大部分命令就是程序代码，which则会告诉我们这些程序的二进制代码在哪里</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">which</span> instName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20230415225204867.png" alt="image-20230415225204867"></p><p>​        Find既是搜索指定的文件名查找</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> PathStart <span class="token parameter variable">-name</span> <span class="token string">"fileNameBeSearched"</span> // 文件名查找<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20230415225404584.png" alt="image-20230415225404584"></p><p>​        (Permisson denied 表明权限不够，回开root的开root试试)</p><p><img src="image-20230415225529928.png" alt="image-20230415225529928"></p><p>​        这个也支持模糊查找！具体的不再演示</p><p>​        另一个find即是：按照大小查找：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> pathStart <span class="token parameter variable">-size</span> +<span class="token operator">|</span>- n<span class="token punctuation">[</span>KMG<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        +表大于 - 表小于，后面带上数字和单位表大小（k(小写！！)多少KB，MB，GB）</p><p><img src="image-20230415230150000.png" alt="image-20230415230150000"></p><h2 id="grep-与-wc"><a href="#grep-与-wc" class="headerlink" title="grep 与 wc"></a>grep 与 wc</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token punctuation">[</span>-n<span class="token punctuation">]</span> 关键字 文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        &gt;这里有可选参数 -n 表明在结果之中显示匹配的行的行号。</p><p>​        关键字参数时，表明查询的关键字，如果含有特殊符号请使用“”括起来</p><p>​        文件路径 表文件路径，可以作为内容输入端口</p><p><img src="image-20230416103713665.png" alt="image-20230416103713665"></p><p>​        wc做字符统计</p><pre class="line-numbers language-none"><code class="language-none">wc [-c -m -l -w] 文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        -c  : 统计bytes数量</p><p>​        -m 统计字符数量</p><p>​        -l 统计行数</p><p>​        -w 统计单词数量</p><p>​        文件路径那自然指向的时被统计文件，可以作为输入端的端口</p><p><img src="image-20230416105615266.png" alt="image-20230416105615266"></p><p>​        单词是用空格划分的！这是我们需要注意的。</p><h2 id="管道符"><a href="#管道符" class="headerlink" title="管道符 |"></a>管道符 |</h2><p>​        我们现在尝试管道符：他正是表示的是将左边命令的结果作为右边命令的输入。</p><p><img src="image-20230416110106424.png" alt="image-20230416110106424"></p><p><img src="image-20230416110206546.png" alt="image-20230416110206546"></p><p>​        这个表明的是将检索到的内容来统计行数</p><h2 id="echo命令输出内容"><a href="#echo命令输出内容" class="headerlink" title="echo命令输出内容"></a>echo命令输出内容</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> 输出的内容<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20230416110707817.png" alt="image-20230416110707817"></p><p>​        当然有特殊符号请用 “ “来括起来。</p><p>​        想要让他作为命令输出，如输出pwd的内容，加上`</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">pwd</span><span class="token variable">`</span></span> // 没什么用<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="重定向符号-gt-与-gt-gt"><a href="#重定向符号-gt-与-gt-gt" class="headerlink" title="重定向符号 &gt; 与&gt;&gt;"></a>重定向符号 &gt; 与&gt;&gt;</h2><p>​        &gt; :将左侧命令的结果覆盖到符号右侧的指定文件</p><p>​        &gt;&gt; : 将左侧命令的结果追加到符号右侧的指定文件</p><p><img src="image-20230416111428026.png" alt="image-20230416111428026"></p><h2 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tail</span> <span class="token punctuation">[</span>-f -num<span class="token punctuation">]</span> LinuxPath<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        参数，Linux的路径，这表示的是被跟踪的文件路径</p><p>​        -f 表示持续跟踪</p><p>​        -num 表示查看多少行，不填就是10行</p><p><img src="image-20230416111911011.png" alt="image-20230416111911011"></p><p><img src="image-20230416111948298.png" alt="image-20230416111948298"></p><p><img src="image-20230416112026385.png" alt="image-20230416112026385"></p><p><img src="image-20230416112203086.png" alt="image-20230416112203086"></p><h2 id="vim编辑器"><a href="#vim编辑器" class="headerlink" title="vim编辑器"></a>vim编辑器</h2><p>​        这是最经典的文本编辑器</p><p>​        下面开始介绍：</p><p>​        Command mode命令模式：这里所有的输入编辑器都理解为命令，从而驱动执行不同的功能</p><p>​        Insert mode： 我们可以对文编编辑</p><p>​        Last Line mode : 用 : 作为起头，通常用在文件的保存和退出</p><p><img src="image-20230416112744542.png" alt="image-20230416112744542"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>// <span class="token function">vim</span> LinuxPath<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        如果文件不存在就会创建一个新的文件，要不就会打开已经存在的文件。</p><p>​        一般打开的时候，会默认在命令模式。想要编写文件，必须先敲入 i 进入插入模式。</p><p>编辑结束后 esc 即可</p><p><img src="image-20230416113105108.png" alt="image-20230416113105108"></p><p><img src="image-20230416113210159.png" alt="image-20230416113210159"></p><h2 id="Root权限"><a href="#Root权限" class="headerlink" title="Root权限"></a>Root权限</h2><p>​        拥有最大的权限就是root.我们几乎做任何事情都不会受到阻挠。进入的方式就是</p><pre class="line-numbers language-none"><code class="language-none">su root&gt;&gt;&gt; encode your password in the Linux[root@...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        su 就是账户切换的系统命令，switch user</p><pre class="line-numbers language-none"><code class="language-none">su [-] -usrName<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        这个符号是可选的，是用来加载环境变量的，建议带上</p><p>​        可以用exit指令退回到上一个用户，快捷键是 ctrl + d</p><pre class="line-numbers language-none"><code class="language-none">sudo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        用户临时使用root权限。</p><p><img src="image-20230416114249475.png" alt="image-20230416114249475"></p><h2 id="用户和用户组"><a href="#用户和用户组" class="headerlink" title="用户和用户组"></a>用户和用户组</h2><p>​        我们可以配置多个用户和用户组。用户也可以加入多个用户组。在Linux下，权限管控分为针对用户的权限控制和针对用户组的权限控制。</p><h3 id="创建与删除用户组"><a href="#创建与删除用户组" class="headerlink" title="创建与删除用户组"></a>创建与删除用户组</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">groupadd</span> groupname <span class="token comment"># in root</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">groupdel groupname<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="用户的操作"><a href="#用户的操作" class="headerlink" title="用户的操作"></a>用户的操作</h3><p>1）useradd [-g -d]用户名</p><p>-g 用于指定用户所在的组，不指定-g会创建同名的组并让其进入这个组，注意如果指定的了的话必须组是存在的</p><p>-d 用于指定home在哪里，不写就是: /home/usrname</p><p><img src="image-20230416115407673.png" alt="image-20230416115407673"></p><p>2)userdel [-r] usrname</p><p>​        -r就是同时删除其用户的home文件夹</p><p>3)id [usrname]</p><p>​        查看自己所在的用户组，带上可选参数usrname就是查看 usrname 的用户组</p><p>4）usermod -aG 将指定的用户加到指定的用户组</p><p>5）getend 查看当前系统有哪些用户。</p><h2 id="查看权限工作"><a href="#查看权限工作" class="headerlink" title="查看权限工作"></a>查看权限工作</h2><p>在root下，输入ls -l即可：</p><p><img src="image-20230416120246176.png" alt="image-20230416120246176"></p><p><img src="image-20230416120355916.png" alt="image-20230416120355916"></p><p>其中：r有读权限 w有写权限 x有执行权限</p><p>当然具体来说也可能会有写不同：</p><p><img src="image-20230416120458085.png" alt="image-20230416120458085"></p><h2 id="修改权限控制"><a href="#修改权限控制" class="headerlink" title="修改权限控制"></a>修改权限控制</h2><p>chmod</p><p><img src="image-20230416120610230.png" alt="image-20230416120610230"></p><p><img src="image-20230416120725024.png" alt="image-20230416120725024"></p><p>chown </p><p><img src="image-20230416120752474.png" alt="image-20230416120752474"></p><h2 id="一些快速操作快捷键"><a href="#一些快速操作快捷键" class="headerlink" title="一些快速操作快捷键"></a>一些快速操作快捷键</h2><p>Ctrl + c强制停止</p><p>Ctrl + d 退出账户</p><p>history: 查看历史执行的命令， !命令前缀，自动执行从后往前的找到第一个匹配前缀的指令</p><p><img src="image-20230416121054792.png" alt="image-20230416121054792"></p><p><img src="image-20230416121101651.png" alt="image-20230416121101651"></p><p><img src="image-20230416121123675.png" alt="image-20230416121123675"></p><p><img src="image-20230416121152194.png" alt="image-20230416121152194"></p><p><img src="image-20230416121219359.png" alt="image-20230416121219359"></p><p><img src="image-20230416121319303.png" alt="image-20230416121319303"></p><p><img src="image-20230416121350614.png" alt="image-20230416121350614"></p><p><img src="image-20230416121411677.png" alt="image-20230416121411677"></p><p><img src="image-20230416121432968.png" alt="image-20230416121432968"></p><p><img src="image-20230416121446642.png" alt="image-20230416121446642"></p><p><img src="image-20230416121528040.png" alt="image-20230416121528040"></p><p><img src="image-20230416121543781.png" alt="image-20230416121543781"></p><p><img src="image-20230416121622511.png" alt="image-20230416121622511"></p><p><img src="image-20230416121635041.png" alt="image-20230416121635041"></p><p><img src="image-20230416121702592.png" alt="image-20230416121702592"></p><p><img src="image-20230416121713490.png" alt="image-20230416121713490"></p><p><img src="image-20230416121736563.png" alt="image-20230416121736563"></p><p><img src="image-20230416121748284.png" alt="image-20230416121748284"></p><p><img src="image-20230416121823770.png" alt="image-20230416121823770"></p><p><img src="image-20230416121835516.png" alt="image-20230416121835516"></p><p><img src="image-20230416121849522.png" alt="image-20230416121849522"></p><p><img src="image-20230416121904518.png" alt="image-20230416121904518"></p><p><img src="image-20230416121932632.png" alt="image-20230416121932632"></p><p><img src="image-20230416121949219.png" alt="image-20230416121949219"></p><p><img src="image-20230416122008858.png" alt="image-20230416122008858"></p><p><img src="image-20230416122034234.png" alt="image-20230416122034234"></p><p>​        这个有点像Windows下的PATH</p><p><img src="image-20230416122057738.png" alt="image-20230416122057738"></p><p><img src="image-20230416122108863.png" alt="image-20230416122108863"></p><p><img src="image-20230416122125643.png" alt="image-20230416122125643"></p><h2 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h2><p><img src="image-20230416122233062.png" alt="image-20230416122233062"></p><p><img src="image-20230416122248474.png" alt="image-20230416122248474"></p><p><img src="image-20230416122257252.png" alt="image-20230416122257252"></p><p><img src="image-20230416122319744.png" alt="image-20230416122319744"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解递归系列(2)</title>
      <link href="/2023/04/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E9%80%92%E5%BD%92%E7%B3%BB%E5%88%97-2/"/>
      <url>/2023/04/13/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E9%80%92%E5%BD%92%E7%B3%BB%E5%88%97-2/</url>
      
        <content type="html"><![CDATA[<h1 id="深入理解递归2"><a href="#深入理解递归2" class="headerlink" title="深入理解递归2"></a>深入理解递归2</h1><p>​        回忆一下，递归的本质就是函数的调用，而且特别的，是调用他自己，为了防止根本停不下来的调用，我们必须提供一个函数的递归出口——这正是我们之前所阐述的！</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;string&gt;#include&lt;iostream&gt;using namespace std;&#x2F;&#x2F; 如果你忘记了的话，看看这个复习一下吧！void printRecur(const int* array, unsigned int start, unsigned int end)&#123;if (array &#x3D;&#x3D; NULL) &#123;return;&#125;if (start &gt;&#x3D; end)&#123;return;&#125;cout &lt;&lt; array[start] &lt;&lt; &quot; &quot;;printRecur(array, start + 1, end);&#125;int main()&#123;int arr[10] &#x3D; &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;printRecur(arr, 0, 10);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        下面继续哔哔新东西！</p><p>​        我们刚刚一直在说系统栈，可不可以书写一个函数来实现我们的系统栈功能呢？可以的：</p><p>​        改造上面的代码为如下，详细的解说请参看代码的注释！</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void imitateSysRecur(const int* array, unsigned int start, unsigned int end)&#123;cout &lt;&lt; &#39;\n&#39;;stack&lt;int&gt;* sys &#x3D; new stack&lt;int&gt;();&#x2F;&#x2F; 创造一个空栈sys-&gt;push(array[start]);&#x2F;&#x2F; 这里等效做函数的第一次调用while (!sys-&gt;empty())&#x2F;&#x2F; 查看有没有弹出干净，没有继续弹出！&#123;int prt &#x3D; sys-&gt;top();&#x2F;&#x2F; 一下就弹出第一个任务if (start &gt;&#x3D; end)return;printf(&quot;%d &quot;, prt); &#x2F;&#x2F; 对之执行操作sys-&gt;push(array[++start]);&#x2F;&#x2F; 转向下一个&#125;&#125;int main()&#123;int arr[10] &#x3D; &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;imitateSysRecur(arr, 0, 10);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="虽说递归爽，但是注意到性能问题！"><a href="#虽说递归爽，但是注意到性能问题！" class="headerlink" title="虽说递归爽，但是注意到性能问题！"></a>虽说递归爽，但是注意到性能问题！</h2><p>​        递归也有代价：写的爽必然有代价。</p><p>​        首先函数调用就有时间的开销（注意到递归反复调用函数）</p><p>​        其次，这也存在空间上的开销！我们需要占一定的空间复杂度来运行我们的函数。</p><p>​        那么，什么时候使用递归呢？预告一下：正是那些非线性的数据结构我们使用递归来处理，这将会在树与图论中显的常见！</p><h2 id="练习1：递归求解线性表：如数组的和"><a href="#练习1：递归求解线性表：如数组的和" class="headerlink" title="练习1：递归求解线性表：如数组的和"></a>练习1：递归求解线性表：如数组的和</h2><p>​        首先，我们来看，对于一个线性表，我们若是想得知这些元素的和：</p><script type="math/tex; mode=display">A = \sum_{i=0}^{n-1}a[i]</script><p>​        然而马上发现，这个表达式可以写作：</p><script type="math/tex; mode=display">A = \sum_{i=0}^{n-1}a[i] = a[n-1] + \sum_{i=0}^{n-2}a[i]</script><p>​        啊哈！这递归就出来了：终止条件就是当取到 arr[0]时停止！，这样就可以开始设计递归了。</p><p>​        我们的结果可以存放在函数的参数列表里，这样的话递归不用开辟新的空间存放局部变量！</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">long getSumRecur(const int* arr, unsigned int arrSize,int curSum)&#x2F;&#x2F; 设计1&#123;if (arr &#x3D;&#x3D; nullptr) &#x2F;&#x2F; 不合法的数组return&#123;return -1;&#x2F;&#x2F; 这个地方放错误处理，可以是cstdlib下的exit!&#125;if (arrSize &#x3D;&#x3D; -1) &#x2F;&#x2F; 即将越界&#123;return curSum; &#x2F;&#x2F; 求和结束，直接返回当下参数的curSum就好了&#125;getSumRecur(arr, arrSize - 1, curSum + arr[arrSize]);    &#x2F;&#x2F; 递归！ 让arrSize减1， 表明arr[size-1]已经纳入和 curSum 了！    &#x2F;&#x2F; 同时，在参数列表中做出 curSum + arr[arrSize]的修改就好了&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        这样的递归适合与有前缀初始值的求和！</p><p>​        有没有别的形式的？有。直接注意到：没有必要新增一个参数，而是直接return掉局部和！就是说：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">return arr[size] + getCur2(arr,size-1)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        因为为了返回，必须要把getCur2的值求出来，一直递归到函数不需要调用自己为止！那就很是容易了，只要curSize == 0,返回 arr[curSize]就好了！（其实就是arr[0]）</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">long getSumRecur2(const int* arr,int arrSize)&#123;if (arr &#x3D;&#x3D; nullptr) &#123;return -1;&#125;if (arrSize &#x3D;&#x3D; 0)&#123;return arr[0];&#125;return arr[arrSize] + getSumRecur2(arr, arrSize - 1);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        run 一下代码！</p><pre class="line-numbers language-none"><code class="language-none">int main()&#123;int arr[10] &#x3D; &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;cout &lt;&lt; getSumRecur(arr, 9, 0)&lt;&lt; endl;cout &lt;&lt; getSumRecur2(arr, 9) &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230412214901272.png" alt="image-20230412214901272"></p>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas in Python</title>
      <link href="/2023/04/13/Pandas-in-Python/"/>
      <url>/2023/04/13/Pandas-in-Python/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 这里是我随手写的Pandas API 的一些笔记，为了省事直接拷贝于此！</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas<span class="token triple-quoted-string string">'''this is a pandas demoto show basic API of pandasto install the lib ...pip:    pip install pandas IN terminal    or if conda is available in your operating system, using    conda install pandas == version_you_want_to_install    '''</span><span class="token triple-quoted-string string">'''Pandas 1 : using this sentence to show the version of pandas:>'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>pandas<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span><span class="token comment"># Sections1: Series</span><span class="token triple-quoted-string string">'''Series in pandas is considered as a data structure with indexAs D &amp; Alg has already pointed out, index can be string or just numbersin pandas, it's the same'''</span><span class="token triple-quoted-string string">'''---------------------------------------------------------------------------------    the creation of series---------------------------------------------------------------------------------'''</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'this is to create a series by using two ways'</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">''' to check, try to run it in terminal '''</span><span class="token comment"># this is a list</span>height_among_stu_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">141</span><span class="token punctuation">,</span> <span class="token number">182</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">178</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>height_among_stu_list<span class="token punctuation">)</span><span class="token comment"># this is a series</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Series is gonna printed:>\n"</span><span class="token punctuation">)</span>height_series <span class="token operator">=</span> pandas<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>height_among_stu_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>height_series<span class="token punctuation">)</span><span class="token comment"># we can set a name of a series:></span>set_name <span class="token operator">=</span> pandas<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'An Increasing subsequence'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>set_name<span class="token punctuation">)</span><span class="token comment"># Back to what I said before... series is a data structure with index... maybe hashSet or hash table?</span>val <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>label <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">]</span>set_with_label <span class="token operator">=</span> pandas<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>val<span class="token punctuation">,</span> index<span class="token operator">=</span>label<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>set_with_label<span class="token punctuation">)</span><span class="token comment"># if you are serious about the index list, use series.index to gain a result:></span><span class="token keyword">print</span><span class="token punctuation">(</span>set_with_label<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token comment"># another quick way to create a series is to use a dictionary as input</span>dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token number">111</span><span class="token punctuation">,</span>    <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token number">222</span><span class="token punctuation">,</span>    <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token number">333</span><span class="token punctuation">,</span>    <span class="token string">'D'</span><span class="token punctuation">:</span> <span class="token number">444</span><span class="token punctuation">&#125;</span>ser_dic <span class="token operator">=</span> pandas<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ser_dic<span class="token punctuation">)</span><span class="token comment"># here comes an interesting questions:> what if we have 3 inputs but owns four labels? have a try...</span>dic <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'A'</span><span class="token punctuation">:</span> <span class="token number">111</span><span class="token punctuation">,</span>    <span class="token string">'B'</span><span class="token punctuation">:</span> <span class="token number">222</span><span class="token punctuation">,</span>    <span class="token string">'C'</span><span class="token punctuation">:</span> <span class="token number">333</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>ser_dic_loss <span class="token operator">=</span> pandas<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>dic<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ser_dic_loss<span class="token punctuation">)</span><span class="token comment"># we get a nan as result! NAN in pandas means a loss of number. We are supposed to make a deal with it!</span><span class="token comment"># another creation , especially for vals, is to do in this way:>1</span>set_num <span class="token operator">=</span> pandas<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>set_num<span class="token punctuation">)</span><span class="token comment"># we see the labels own the same value of 10...</span><span class="token triple-quoted-string string">'''-----------------------------------------------------------------------------------    the usage of index and its relative API-----------------------------------------------------------------------------------'''</span><span class="token comment"># usually, when we visit a hash set, we do visit elements by offering a label.</span><span class="token comment"># for example, we can get 'A' by inputting 1 in a hash set:></span><span class="token comment"># for series in pandas, things got the same...</span>dic_for_search <span class="token operator">=</span> dicsetSearch <span class="token operator">=</span> pandas<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>dic_for_search<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Print the key by the visitor[]"</span><span class="token punctuation">)</span><span class="token comment"># this for loop is to visit elements in series</span>searchLabels <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>setSearch<span class="token punctuation">[</span>searchLabels<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># but if the key is hard to get, while it's relatively easy to know the position,</span><span class="token comment"># this API is just for the case:> called 'iloc': i locations in other words...</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>setSearch<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># differently, we can output the suitable value by just inputting the logical expression in []</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"this key - val set is a set which the val is above 222"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>setSearch<span class="token punctuation">[</span>setSearch <span class="token operator">></span> <span class="token number">222</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># Also, if the val is supported to make basic calculations, we can operate all the elements by...</span>setSearch <span class="token operator">+=</span> <span class="token number">222</span><span class="token keyword">print</span><span class="token punctuation">(</span>setSearch<span class="token punctuation">)</span><span class="token comment"># here comes a big difference comparing list in python and series in pandas</span>mylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span>mylist <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>mylist<span class="token punctuation">)</span><span class="token comment"># See , we actually directly append the elements backward to the mylist</span><span class="token comment"># while this one is...</span>setSearch <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>setSearch<span class="token punctuation">)</span><span class="token comment"># add the elements to all the vals instead of appending</span><span class="token triple-quoted-string string">'''----------------------------------------------------------------------------------------------            index----------------------------------------------------------------------------------------------'''</span><span class="token comment"># index has variety of types</span><span class="token comment"># when we do not offer a coefficient of index in the initialization, pandas will</span><span class="token comment"># automatically use RangeIndex</span>val <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>a <span class="token operator">=</span> pandas<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>val<span class="token punctuation">)</span>b <span class="token operator">=</span> pandas<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>val<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">)</span>c <span class="token operator">=</span> pandas<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'abcde'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token triple-quoted-string string">''' VAlS in pandas '''</span><span class="token comment"># 1 iloc and loc</span><span class="token comment"># loc is [ ] while iloc is [ )</span><span class="token comment"># no examples... as they have been used previously</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"this is the size:> "</span><span class="token punctuation">,</span> setSearch<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token comment"># is_unique:> if there is the same elem in the set, return false, else return true</span><span class="token keyword">print</span><span class="token punctuation">(</span>setSearch<span class="token punctuation">.</span>is_unique<span class="token punctuation">)</span><span class="token comment"># we can modify the elements by offering the key name:></span>setSearch<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10000</span><span class="token keyword">print</span><span class="token punctuation">(</span>setSearch<span class="token punctuation">)</span><span class="token comment"># also it can be multipy:></span>setSearch<span class="token punctuation">[</span><span class="token string">'B'</span><span class="token punctuation">:</span><span class="token string">'C'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20000</span><span class="token keyword">print</span><span class="token punctuation">(</span>setSearch<span class="token punctuation">)</span><span class="token comment"># back to the way of appending the series: by just offering a new key with value:></span>setSearch<span class="token punctuation">[</span><span class="token string">'E'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2000000</span><span class="token keyword">print</span><span class="token punctuation">(</span>setSearch<span class="token punctuation">)</span><span class="token comment"># or using the api: append</span>appender <span class="token operator">=</span> pandas<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">10000000</span><span class="token punctuation">,</span><span class="token number">20000000</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'G'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>setSearch<span class="token punctuation">.</span>append<span class="token punctuation">(</span>appender<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>setSearch<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''-----------------------------------------------------------------------------------------------------                                        del-----------------------------------------------------------------------------------------------------'''</span><span class="token comment"># use del directly to erase the elements</span><span class="token keyword">del</span> setSearch<span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>setSearch<span class="token punctuation">)</span><span class="token comment"># or use tha api in pandas:></span>setSearch<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token string">'B'</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>setSearch<span class="token punctuation">)</span><span class="token comment"># if we want to erase the duplicate elements, use:></span>duplicate <span class="token operator">=</span> pandas<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'abcdef'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>duplicate<span class="token punctuation">)</span>duplicate <span class="token operator">=</span> duplicate<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>keep<span class="token operator">=</span><span class="token string">'first'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>duplicate<span class="token punctuation">)</span><span class="token comment"># duel and check the NAN</span>aNAN <span class="token operator">=</span> pandas<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>NaN<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>NaN<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>NaN<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">'abcdef'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>aNAN<span class="token punctuation">.</span>isna<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># use dropna() can be a good choice to erase the invalid data</span>aNAN <span class="token operator">=</span> aNAN<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>aNAN<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解递归系列（1）</title>
      <link href="/2023/04/10/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E9%80%92%E5%BD%92%E7%B3%BB%E5%88%97%EF%BC%881%EF%BC%89/"/>
      <url>/2023/04/10/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E9%80%92%E5%BD%92%E7%B3%BB%E5%88%97%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="深入理解递归系列（1）"><a href="#深入理解递归系列（1）" class="headerlink" title="深入理解递归系列（1）"></a>深入理解递归系列（1）</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p><a href="https://blog.csdn.net/charlie114514191/article/details/130049282">(43条消息) 深入理解递归系列（1）_charlie114514191的博客-CSDN博客</a></p><p>​        我们在学习与工作中，常常看到这样递归。是的，递归让代码变得简洁，复用率更高。但是我们往往不会很好的使用递归（包括我，QAQ）。 一般来讲，这可能是不知道递归的本质是函数调用，不清晰函数调用的本质造成的，其次，我们很容易陷入递归里去出不来了，搞不清楚当前的状态，也即是：搞错了方向。宏观把控更为重要（后面会细说）</p><p>​        简单来讲，函数体内一次递归是对线性数据结构的遍历处理，二次递归是对二叉树数据结构的递归处理。多次递归是对多叉树进行处理。但这样讲还是抽象，我们先不从应用层面而是转向原理层面来了解递归！</p><h2 id="从栈讲起！"><a href="#从栈讲起！" class="headerlink" title="从栈讲起！"></a>从栈讲起！</h2><p>​        有点莫名奇妙，我们为什么要从栈讲起呢？这是为了后面的系统函数调用栈做准备，如果对栈比自己喜欢吃啥都熟悉，建议移步到系统调用栈下面去。</p><p>​        其实他不是什么新东西，只是一个受到了限制的数据结构（数组，单链表）等。什么意思呢》以数组为例，数组可以在结构的两端插入元素，链表同理。但是现在我们规定我们只能从一端来操作数据结构。举个例子。现在我们要往一个数组里扔东西。对于一个一般的数组，我爱怎么扔怎么扔。但是对于栈来讲，他只能如下图所示的这样的放入数组或者弹出数组。这样受限的数据结构正是栈。</p><p><img src="image-20230409112854441.png" alt="image-20230409112854441"></p><p>​        可以看到，我们把插入和删除换成了 push back 和 pop out. 在栈里，这样的行为叫压栈和弹栈。</p><pre class="line-numbers language-none"><code class="language-none">往栈里放入元素的过程叫压栈往栈里弹出元素的过程叫弹栈<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        而且，我们只可以对最上面的元素展开操作而不能对下面的元素操作。这样的特点从动态角度来看，不正是后进先出嘛！就是说，最后进入栈的必须第一个出栈</p><p><img src="image-20230409113920536.png" alt="image-20230409113920536"></p><p>​        至于栈的实现如何，这里不做说明，可以看我搞的其他博客或者自行查询怎样实现。</p><h2 id="系统函数调用栈"><a href="#系统函数调用栈" class="headerlink" title="系统函数调用栈"></a>系统函数调用栈</h2><p>​        可以说，栈的一个在操作系统级别的应用，就是系统函数的调用栈。话说的太抽象了，来看个例子！</p><p>​        今天我们需要书写一个程序，很简单，不难的：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt; &#x2F;&#x2F; 不熟悉这个的，理解为python 的 import 包就可以了！int getModFrom2Int(int num1,int num2)&#123;    return a % b; &#x2F;&#x2F; 函数执行取余数的操作，并将其返回！&#125;int getAddOf2Int(int num1,int num2)&#123;    int resFromMod &#x3D; getModFrom2Int(num1,num2);    return resFromMod + b;&#125;int main() &#x2F;&#x2F; 程序入口&#123;    int a &#x3D; 3;    int b &#x3D; 2;    int c &#x3D; getAddOf2Int(a,b); &#x2F;&#x2F;     printf(&quot;%d&quot;,c); &#x2F;&#x2F; print the num on console控制台的打印    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        这是一份简单的C语言代码。从程序运行的顺序来看：程序从 main 进入，经过初始化 a,b的时候，准备初始 c ，但是注意到，c的初始化是由<code>getAddOf2Int</code>这个函数的返回值赋值的，意味着程序必须要进入函数当中。 当程序执行到<code>getAddOf2Int</code>里，他马上又发现， 里头的另一个变量 res ，需要调用函数<code>getModFrom2Int</code>来解决。程序又跳转到<code>getModFrom2Int</code>里去，终于我们不折腾了，对 作为实参的 a, b 取完余数就直接扔回去（优雅的讲叫返回结果指调用处），res 得到了值 3 % 2 = 1，随后，<code>getAddOf2Int</code>又把res和 b 再次相加， 作为<code>getAddOf2Int</code>返回去了，显然这是 3。分析结束，是不是这样呢？我们在Linux下跑一下代码！</p><p>​        如果不知道怎么搞，就这样</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 找到一个文件夹，进入到里面，打开终端 open in terminal</span><span class="token operator">>></span><span class="token operator">></span> <span class="token function">vim</span> runCode1.c<span class="token comment">#书写代码， 当然不熟悉的话，先摁i进入编辑模式随后输入代码</span><span class="token comment"># 写完了退出去，方法是：摁esc，输入:wq退出</span><span class="token operator">>></span><span class="token operator">></span> gcc runCode1 <span class="token comment">#没有就跟提示 sudo apt install gcc</span><span class="token comment"># 没有指定可执行文件，会自动生成 a.out</span><span class="token operator">>></span><span class="token operator">></span> ./a.outres: <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230409204340812.png" alt="image-20230409204340812"></p><p>​        找到你的可执行文件，不然就会出现如上图各种各样的报错。我们的分析没有大问题。</p><p>​        可是这跟我们的主题有什么关系呢？别着急，现在就来问你，怎么实现的？怎么让函数按部就班的调用，返回呢？答案就是系统调用函数栈</p><p>​        很好，我们遇到一个函数就把函数地址（函数在哪）压到里面去！直到程序不在调用新的函数（最后一个入栈的不调函数了！）开始逐级返回，函数出栈！</p><p><img src="image-20230409205354471.png" alt="image-20230409205354471"></p><p>​        这些函数在栈里，就用这里的属于说话吧！他们叫栈帧，如同视频一般，一帧一帧展示调用返回。</p><p>​        栈帧是一个复杂的复合体，一般而言他有三个部分构成！</p><p>​        1.函数参数，如 main 函数没有函数参数，而<code>getAddOf2Int</code>有两个参数 num1 ,num2</p><p>​        2.局部变量，如 main 函数里有 a, b ,c 三个在函数体内的变量，<code>getAddOf2Int</code>里有个res 来接受 Mod 函数的返回值。</p><p>​        3.(不好理解)返回地址。这是干嘛的呢？我们在文本编辑器里，可以直观的看到…</p><p><img src="image-20230409210330240.png" alt="image-20230409210330240"></p><p>但是对于CPU来讲，它进到getModFrom2Int里，再次出来的时候不知道下一条指令在哪里。于是，需要存储下一条指令（return resFromMod + num2）的指令地址，方便CPU从其他函数调用之后又再次回来时找到继续执行的地方.</p><p><img src="image-20230409210832275.png" alt="image-20230409210832275"></p><p>​        什么？口说无凭？上汇编！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">objdump <span class="token parameter variable">-S</span> a.out<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>A</p><p><img src="image-20230409211229724.png" alt="image-20230409211229724"></p><p>​        留心到 callq 指令，这是函数调用的指令。函数执行完毕，CPU直接读取栈帧的存储返回地址继续走。</p><h2 id="步入正题！函数调用自己！（就是递归）"><a href="#步入正题！函数调用自己！（就是递归）" class="headerlink" title="步入正题！函数调用自己！（就是递归）"></a>步入正题！函数调用自己！（就是递归）</h2><p>​        我们学习完基本的函数调用之后，有没有一个大胆的想法：函数可不可以调他自己呢？试试！</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std;int main()&#123;cout &lt;&lt; &quot;Lol, I am calling myself again and again!&quot;;Sleep(500); &#x2F;&#x2F; 加个这个，防止程序栈炸了main();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230409212333392.png" alt="image-20230409212333392"></p><p>​        是的，尝试自己调用自己！这个函数正在不停的调用他自己，直到函数调用栈溢出崩溃。</p><p><img src="image-20230409213106889.png" alt="image-20230409213106889"></p><p>​        歪！不能这样啊，那咋办，简单，来个中止条件就可以了！简单加个出口。方法就是引入一个计数器，来控制调用次数</p><p><img src="image-20230409213315526.png" alt="image-20230409213315526"></p><p>​        就调用了十次，很好！</p><p>​        当然，没人，除非是真的需要，会对主函数干这种事情。事实上，以递归执行的函数的调用计时器往往放在参数列表里，通过检测参数来停止函数调用</p><p>​        比如说，打印函数3次：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void PrintinLimits(int times)&#123;if (times &#x3D;&#x3D; 0) &#123; &#x2F;&#x2F; if time is used up,process exited by returning val directlyreturn;&#125;cout &lt;&lt; &quot;Calling for times:&gt;&quot; &lt;&lt; times &lt;&lt; &#39;\n&#39;;PrintinLimits(times - 1); &#x2F;&#x2F; 次数减1，趋向于停止（0就跳出去了）return;&#125;int main()&#123;PrintinLimits(3);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230409214645855.png" alt="image-20230409214645855"></p><p>所以，到底怎么回事，还是回到调用栈上</p><p><img src="image-20230409215339623.png" alt="image-20230409215339623"></p><p>​        比如说我们今天不好好写高斯求和函数：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;#include&lt;windows.h&gt;using namespace std;static int callLimits &#x3D; 10;long GaussainSumInRecurssion(int curAdder)&#123;if (curAdder &#x3D;&#x3D; 0) &#123;return 0;&#125;return curAdder + GaussainSumInRecurssion(curAdder-1);&#125;int main()&#123;cout &lt;&lt; GaussainSumInRecurssion(10);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230409214756137.png" alt="image-20230409214756137"></p><p>​        是跟上面同理的，但是这个是尾递归，不好理解，我们先不去分析。</p><p>​        仿照这一思路，打印数组也有花样！</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void printArrayInRecur(int* array, unsigned int arraySize)&#123;if (arraySize &#x3D;&#x3D; 0) &#123;return;&#125;cout &lt;&lt; array[arraySize - 1] &lt;&lt; &quot; &quot; ; &#x2F;&#x2F; for correctly print&#x2F;&#x2F; 数组下标从0开始，减个一！printArrayInRecur(array, arraySize - 1);return;&#125;int main()&#123;int array[4] &#x3D; &#123;1,2,3,4&#125;;printArrayInRecur(array, 4);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230409215928720.png" alt="image-20230409215928720"></p><p>​        手动实现了倒序打印！</p><p>​        那正序呢？</p><p><img src="image-20230409220243255.png" alt="image-20230409220243255"></p><p>​        就这样！下面的有空再开一个。</p>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matlab自学专题1 -- 图像绘制(1)</title>
      <link href="/2023/04/07/Matlab%E8%87%AA%E5%AD%A6%E4%B8%93%E9%A2%981-%E5%9B%BE%E5%83%8F%E7%BB%98%E5%88%B6-1/"/>
      <url>/2023/04/07/Matlab%E8%87%AA%E5%AD%A6%E4%B8%93%E9%A2%981-%E5%9B%BE%E5%83%8F%E7%BB%98%E5%88%B6-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Matlab自学专题1"><a href="#Matlab自学专题1" class="headerlink" title="Matlab自学专题1"></a>Matlab自学专题1</h1><h2 id="图形绘制"><a href="#图形绘制" class="headerlink" title="图形绘制"></a>图形绘制</h2><p>​        我们来做个假设，假设我们已经熟知了Matlab的矩阵操作，基础概念和基本编程框架。我们下面就开始来围绕Matlab的绘图展开说说。</p><h3 id="离散数据绘制"><a href="#离散数据绘制" class="headerlink" title="离散数据绘制"></a>离散数据绘制</h3><p>​        什么离散的数据呢？简而言之，就是单蹦的数据，而不是连续的数据。比若说【1，2，3，4，5，6】这就是离散的数据，而集合{x | 9 &gt; x &gt; 6}就不是离散的，而是连续的。换而言之，一个简单的说法，正是这些数据要是可数可列的，我们才说他们是离散的。</p><p>​        现在，打开我们的matlab，来尝试绘制一下离散的数据。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">clear all# 清除所有的变量X1 <span class="token operator">=</span> <span class="token function">linspace</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> # 产生一个从 <span class="token number">1</span> 到 <span class="token number">100</span> 的离散行向量Y1 <span class="token operator">=</span> <span class="token function">linspace</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> # 产生一个从 <span class="token number">2</span> 到 <span class="token number">200</span> 的离散行向量<span class="token function">figure</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span># 注意，这是指绘制在第一个弹窗上，可以用一个变量接受返回值！自行查看他是啥吧！<span class="token function">plot</span><span class="token punctuation">(</span>X1<span class="token punctuation">,</span>Y1<span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'MarkerSize'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span> # 绘图关键指令，他表示绘制一个 Y <span class="token operator">-</span> X 离散关系图， 这个MarkerSize就是点画多大<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230407125527093.png" alt="image-20230407125527093"></p><h3 id="连续函数"><a href="#连续函数" class="headerlink" title="连续函数"></a>连续函数</h3><p>​        下面，我们来尝试一下，绘制连续的函数。</p><p>​        注意到，matlab没有那么聪明，可以不带脑子的直接传入函数就直接帮你开画的，我们回顾函数绘制的一般办法，那就是，转向通过化连续 为 离散的变量 的关系来绘制函数，说白了，就是使用足够密集的点来绘制图像。这不正是我们从离散推向连续的过程嘛！</p><p>​        我们只需要像手绘函数图像那样，离散的点出 $[X_i, Y_i ]$那样就好了。那样的话：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">clear all# 划定X的范围， Y的离散值（第一个函数）X1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">144</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">72</span><span class="token punctuation">;</span>Y1 <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span>X1<span class="token punctuation">)</span><span class="token punctuation">;</span># 划定X的范围， Y的离散值（第二个函数）X2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">1080</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">740</span><span class="token punctuation">;</span>Y2 <span class="token operator">=</span> <span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span>X2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">figure</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span># subplot指令，这里是用来多图像绘制的，subplot正是子图像的意思<span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> # 一行几个？ 一共几行？ 这是第几个子图像？<span class="token function">plot</span><span class="token punctuation">(</span>X1<span class="token punctuation">,</span>Y1<span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'MarkerSize'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">xlim</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> # 函数用来限定X的绘制范围#下面雷同了。。。<span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">plot</span><span class="token punctuation">(</span>X1<span class="token punctuation">,</span>Y1<span class="token punctuation">,</span><span class="token string">'LineWidth'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">xlim</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">plot</span><span class="token punctuation">(</span>X2<span class="token punctuation">,</span>Y2<span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'MarkerSize'</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">xlim</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">subplot</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token function">plot</span><span class="token punctuation">(</span>X2<span class="token punctuation">,</span>Y2<span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'LineWidth'</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">xlim</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230407130913302.png" alt="image-20230407130913302"></p><p>​        当然，也不是那麽麻烦，实际上，这样也可以：</p><pre class="line-numbers language-none"><code class="language-none">X1 &#x3D; -pi&#x2F;2:0.001:pi&#x2F;2;Y1 &#x3D; x + sin(x) + exp(x);plot(X1,Y1);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="image-20230407131223232.png" alt="image-20230407131223232"></p><p>​        好像这个不太好点对点啊，可不可以加上网格便于观察呢， 当然可以，加上点东西就好了！</p><p>​        首先介绍一下刚才一直没说的那个：plot里的那些’ xxx ‘是什么呢？ 查阅一下，发现是一个叫 PropertyName的东西，就是属性名称，比如说， MarkerSize 就是点的大小， 而 LineWidth 就是绘制图像线宽的属性名称，注意一定要输对，大小写都不要错（尽可能），后面跟上的就是属性值 PropertyValue 了。 当然有一个例外就是图形的样式。 这是不用说 PropertyName的，直接在输完X,Y 之后，直接用单引号括起来想要的款式。</p><p>​        来来，例子上了！</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">plot</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span>Y<span class="token punctuation">,</span><span class="token string">'ro'</span><span class="token punctuation">)</span> # 就是对上面那个函数，加点东西就好了grid on #打开网格显示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="image-20230407131949917.png" alt="image-20230407131949917"></p><p>​        可是，就是这样拿给别人看，这不好。这是啥啊？？？不知道，含义是啥，不知道。可不可以加点注释呢？可以！</p><pre class="line-numbers language-none"><code class="language-none">title(&#39;I think this is a sample of 1dim image demonstration&#39;);xlabel(&#39;I am X&#39;);ylabel(&#39;I am Y, the function&#39;s val&#39;);legend(&#39;y &#x3D; x + sin(x) + e^x&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230407132306428.png" alt="image-20230407132306428"></p><p>​        很有意思了。 注意到legend 就是图例的意思！</p><h3 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h3><p>​        我们绘制简单的离散数据与连续函数，使用的就是如下的步骤来完成我们的工作！</p><p>（1）准备数据， 就是准备好你的X Y</p><p>（2）确定好在那里画，第一个子图，还是哪里，但一定不是你的草稿纸！</p><p>（3）调用图像绘制函数来画！ plot是我们现在搞到的</p><p>（4）制定好坐标轴的范围</p><p>（5）添加绘制的属性（懒狗可以不管）</p><p>（6）添加一些注释（针对要不要做的话。。。你知道我要说什么）</p><p>（7）图像导出与展示</p>]]></content>
      
      
      
        <tags>
            
            <tag> Matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch 1</title>
      <link href="/2023/03/29/pytorch-1/"/>
      <url>/2023/03/29/pytorch-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Pytorch学习"><a href="#Pytorch学习" class="headerlink" title="Pytorch学习"></a>Pytorch学习</h1><h2 id="学习加载数据集"><a href="#学习加载数据集" class="headerlink" title="学习加载数据集"></a>学习加载数据集</h2><p>​        我们首先需要学会导入数据集。在Pytorch里，负责导入数据集的有两个大类：DataSet 和DataLoader.</p><p>​        DataSet 可以认为是提供一种方式来获取数据和对应的标签</p><p>​        DataLoader为后面的网络提供不同的数据形式（需要dataSet来作为源数据集）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Dataset</span><span class="token punctuation">(</span>Generic<span class="token punctuation">[</span>T_co<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">r"""An abstract class representing a :class:`Dataset`.    All datasets that represent a map from keys to data samples should subclass    it. All subclasses should overwrite :meth:`__getitem__`, supporting fetching a    data sample for a given key. Subclasses could also optionally overwrite    :meth:`__len__`, which is expected to return the size of the dataset by many    :class:`~torch.utils.data.Sampler` implementations and the default options    of :class:`~torch.utils.data.DataLoader`.    .. note::      :class:`~torch.utils.data.DataLoader` by default constructs a index      sampler that yields integral indices.  To make it work with a map-style      dataset with non-integral indices/keys, a custom sampler must be provided.    """</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> T_co<span class="token punctuation">:</span>        <span class="token keyword">raise</span> NotImplementedError    <span class="token keyword">def</span> <span class="token function">__add__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">:</span> <span class="token string">'Dataset[T_co]'</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token string">'ConcatDataset[T_co]'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> ConcatDataset<span class="token punctuation">(</span><span class="token punctuation">[</span>self<span class="token punctuation">,</span> other<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># No `def __len__(self)` default?</span>    <span class="token comment"># See NOTE [ Lack of Default `__len__` in Python Abstract Base Classes ]</span>    <span class="token comment"># in pytorch/torch/utils/data/sampler.py</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        可以看到这是抽象类，需要我们重写DataSet 来运行：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> Dataset<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> os<span class="token keyword">class</span> <span class="token class-name">Mydata</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 准备一下路径</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>rootDir<span class="token punctuation">,</span>label_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :param rootDir: the root image source        :param label_dir: whether it is ants or bees        """</span>        self<span class="token punctuation">.</span>rootDir <span class="token operator">=</span> rootDir        self<span class="token punctuation">.</span>label_dir <span class="token operator">=</span>label_dir        self<span class="token punctuation">.</span>path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>rootDir<span class="token punctuation">,</span>self<span class="token punctuation">.</span>label_dir<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>imagePath <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token comment">#获取东西</span>    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>        img_name <span class="token operator">=</span> self<span class="token punctuation">.</span>imagePath<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>        img_item_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>path<span class="token punctuation">,</span>img_name<span class="token punctuation">)</span>        img <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>img_item_path<span class="token punctuation">)</span>        label <span class="token operator">=</span> self<span class="token punctuation">.</span>label_dir        <span class="token keyword">return</span> img<span class="token punctuation">,</span>label    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>imagePath<span class="token punctuation">)</span>rootDir <span class="token operator">=</span> <span class="token string">"hymenoptera_data/train"</span>labelDir <span class="token operator">=</span> <span class="token string">"ants"</span>ants_dataset <span class="token operator">=</span> Mydata<span class="token punctuation">(</span>rootDir<span class="token punctuation">,</span>labelDir<span class="token punctuation">)</span>img<span class="token punctuation">,</span>label <span class="token operator">=</span> ants_dataset<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>img<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="TensorBoard的基本使用"><a href="#TensorBoard的基本使用" class="headerlink" title="TensorBoard的基本使用"></a>TensorBoard的基本使用</h2><p>​        我们为了使用 tensorBoard可视化，需要在我们自己的源代码文件中引入 SummaryWriter类。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        我们就是在这里实现可视化的！</p><p>​        来看看简介怎么说</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">"""Writes entries directly to event files in the log_dir to be   consumed by TensorBoard.   The `SummaryWriter` class provides a high-level API to create an event file   in a given directory and add summaries and events to it. The class updates the   file contents asynchronously. This allows a training program to call methods   to add data to the file directly from the training loop, without slowing down   training.   """</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        简单来讲。就是通过生成event file(事件文件)来预备可视化，在cmd或者是已经被激活的 pytorch环境下来整指令：</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">tensorboard --logdir&#x3D;&lt;logFileName&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        SummaryWriter的构造函数（<strong> init </strong>()）是这样说的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>    self<span class="token punctuation">,</span> <span class="token comment"># this 指针一样的东西</span>    log_dir<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>    comment<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span>    purge_step<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span>    max_queue<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>    flush_secs<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">,</span>    filename_suffix<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Creates a `SummaryWriter` that will write out events and summaries    to the event file.    Args:        log_dir (str): Save directory location. Default is          runs/**CURRENT_DATETIME_HOSTNAME**, which changes after each run.          Use hierarchical folder structure to compare          between runs easily. e.g. pass in 'runs/exp1', 'runs/exp2', etc.          for each new experiment to compare across them.        comment (str): Comment log_dir suffix appended to the default          ``log_dir``. If ``log_dir`` is assigned, this argument has no effect.        purge_step (int):          When logging crashes at step :math:`T+X` and restarts at step :math:`T`,          any events whose global_step larger or equal to :math:`T` will be          purged and hidden from TensorBoard.          Note that crashed and resumed experiments should have the same ``log_dir``.        max_queue (int): Size of the queue for pending events and          summaries before one of the 'add' calls forces a flush to disk.          Default is ten items.        flush_secs (int): How often, in seconds, to flush the          pending events and summaries to disk. Default is every two minutes.        filename_suffix (str): Suffix added to all event filenames in          the log_dir directory. More details on filename construction in          tensorboard.summary.writer.event_file_writer.EventFileWriter.    Examples::        from torch.utils.tensorboard import SummaryWriter        # create a summary writer with automatically generated folder name.        writer = SummaryWriter()        # folder location: runs/May04_22-14-54_s-MacBook-Pro.local/        # create a summary writer using the specified folder name.        writer = SummaryWriter("my_experiment")        # folder location: my_experiment        # create a summary writer with comment appended.        writer = SummaryWriter(comment="LR_0.1_BATCH_16")        # folder location: runs/May04_22-14-54_s-MacBook-Pro.localLR_0.1_BATCH_16/    """</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        于是，我们实例化一个SummaryWriter,只需要告诉构造函数一个文件夹的名字即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">)</span><span class="token comment"># 产生一个logs文件夹，其事件文件就在里面！</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        向里头输入样本点，比如说函数”y = x”，就需要加入：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"y = x"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        不要忘记关闭文件流</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="经验来了"><a href="#经验来了" class="headerlink" title="经验来了"></a>经验来了</h3><p>​        首先，如果你打开终端，发现是PS控制台，那就麻烦你手动改成cmd控制台，他在Files - settings - tools - terminal里，选择CMD控制台</p><p><img src="image-20230329201937164.png" alt="image-20230329201937164"></p><p>​        回到终端，他就是这样的了。</p><p><img src="image-20230329202008458.png" alt="image-20230329202008458"></p><p>​        但是，这个时候输入 tensorboard —logdir=logs(你自己看看你指定的文件夹的名字是什么，比如说我的是这个，以及如果你发现你甚至没有log文件夹那就检查代码，去文件的上级找找，但大概率是你代码出错了！)</p><p><img src="image-20230329202055328.png" alt="image-20230329202055328"></p><p><img src="image-20230329202202553.png" alt="image-20230329202202553"></p><p>​        出现了上图的 bug，说明cmd没认识，不知道tensorboard.那就这样，输入</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">pip install tensorboard -i --trusted-host  http:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        这是使用pip 来下载tensorboard, 其中，后面信任域名是为了防止下图种类的报错</p><p><img src="image-20230329202344121.png" alt="image-20230329202344121"></p><p>​        但是，即使这样，我还是遇到了另一个奇怪的错误：</p><p><img src="image-20230329202418314.png" alt="image-20230329202418314"></p><p>​        这个时候马上换源即可，是源的问题</p><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">pip install tensorboard -i https:&#x2F;&#x2F;pypi.douban.com&#x2F;simple --trusted-host https:&#x2F;&#x2F;pypi.douban.com&#x2F;simple <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20230329202505259.png" alt="image-20230329202505259"></p><p>​        我们再试一次，成功了！</p><p>​        对了。如果发现端口冲突了，可以手动指定端口，就是在指令的后面在塞上一个—port=</p><p><img src="image-20230329202803683.png" alt="image-20230329202803683"></p><p>下面来看图片的添加！在Pytorch下，我们使用add_image来添加图片</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">add_image</span><span class="token punctuation">(</span>    self<span class="token punctuation">,</span> tag<span class="token punctuation">,</span> img_tensor<span class="token punctuation">,</span> global_step<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> walltime<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> dataformats<span class="token operator">=</span><span class="token string">"CHW"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Add image data to summary.    Note that this requires the ``pillow`` package.    Args:        tag (str): Data identifier        img_tensor (torch.Tensor, numpy.ndarray, or string/blobname): Image data        global_step (int): Global step value to record        walltime (float): Optional override default walltime (time.time())          seconds after epoch of event        dataformats (str): Image data format specification of the form          CHW, HWC, HW, WH, etc.    Shape:        img_tensor: Default is :math:`(3, H, W)`. You can use ``torchvision.utils.make_grid()`` to        convert a batch of tensor into 3xHxW format or call ``add_images`` and let us do the job.        Tensor with :math:`(1, H, W)`, :math:`(H, W)`, :math:`(H, W, 3)` is also suitable as long as        corresponding ``dataformats`` argument is passed, e.g. ``CHW``, ``HWC``, ``HW``.    Examples::        from torch.utils.tensorboard import SummaryWriter        import numpy as np        img = np.zeros((3, 100, 100))        img[0] = np.arange(0, 10000).reshape(100, 100) / 10000        img[1] = 1 - np.arange(0, 10000).reshape(100, 100) / 10000        img_HWC = np.zeros((100, 100, 3))        img_HWC[:, :, 0] = np.arange(0, 10000).reshape(100, 100) / 10000        img_HWC[:, :, 1] = 1 - np.arange(0, 10000).reshape(100, 100) / 10000        writer = SummaryWriter()        writer.add_image('my_image', img, 0)        # If you have non-default dimension setting, set the dataformats argument.        writer.add_image('my_image_HWC', img_HWC, 0, dataformats='HWC')        writer.close()    Expected result:    .. image:: _static/img/tensorboard/add_image.png       :scale: 50 %    """</span>    torch<span class="token punctuation">.</span>_C<span class="token punctuation">.</span>_log_api_usage_once<span class="token punctuation">(</span><span class="token string">"tensorboard.logging.add_image"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>_check_caffe2_blob<span class="token punctuation">(</span>img_tensor<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> caffe2<span class="token punctuation">.</span>python <span class="token keyword">import</span> workspace        img_tensor <span class="token operator">=</span> workspace<span class="token punctuation">.</span>FetchBlob<span class="token punctuation">(</span>img_tensor<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>_get_file_writer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_summary<span class="token punctuation">(</span>        image<span class="token punctuation">(</span>tag<span class="token punctuation">,</span> img_tensor<span class="token punctuation">,</span> dataformats<span class="token operator">=</span>dataformats<span class="token punctuation">)</span><span class="token punctuation">,</span> global_step<span class="token punctuation">,</span> walltime    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        是的，当我们加载图片的时候，函数的参数接受Tensor类型的图片和ndarray类型，这就需要我们调用API来进行转化</p><pre class="line-numbers language-Python" data-language="Python"><code class="language-Python">from torch.utils.tensorboard import SummaryWriterfrom PIL import Imageimport numpy as npwriter &#x3D; SummaryWriter(&quot;logs&quot;)imgPath &#x3D; &quot;hymenoptera_data&#x2F;train&#x2F;ants&#x2F;0013035.jpg&quot;imgPIL &#x3D; Image.open(imgPath)imgArray &#x3D; np.array(imgPIL) # 转化writer.add_image(&quot;test&quot;,imgArray,1,dataformats&#x3D;&quot;HWC&quot;) #指明通道是如何的！writer.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> pytorch </tag>
            
            <tag> python </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deep Learning in English 2</title>
      <link href="/2023/03/29/Deep-Learning-in-English-2/"/>
      <url>/2023/03/29/Deep-Learning-in-English-2/</url>
      
        <content type="html"><![CDATA[<h1 id="Deep-Learning-2"><a href="#Deep-Learning-2" class="headerlink" title="Deep Learning 2"></a>Deep Learning 2</h1><h2 id="Supervised-learning-with-Neural-Networks"><a href="#Supervised-learning-with-Neural-Networks" class="headerlink" title="Supervised learning with Neural Networks"></a>Supervised learning with Neural Networks</h2><p>​    Recently, with a rapid dedvelopment of Artificial Intelligence, it has already created a large amount of economic benefit to society. Supervised learning, as a part of machine learning, has a large propotions of the benefit created by AI.</p><p>​    Supervised learning can be considered as a type of machine learning that requires exact features and specific targets which was set by human beings . It can be considered as  a semi - automatic  learning methods as we need to input specific data by humans</p><p>​    To be exact, we need to tell the machine what is input, and what is the output to get a model of predictions. Like nowadays, we need to make predictions of our real estate or differatiating the images like photo tagging. (I recently make classifications of kinds of flowers by making machines gather features of variaty kinds of flowers and make classifications according to the features it get), or make precises and pretty translations among languages. Perhaps the most lucrative applications of it is Online advertising. By collecting your personal informations and detecting whether you click the ads, the machines learn whether you get favor of this kind of ads . As returned, it will offer you the ads you likely like more.</p><p>​    These kinds of applications all use the relatively standard neural networks. There are several kind of NN( NN stands for Nerual networks). The traditional one is SNN(Standard NN). and also, we use  CNN(Convolutional NN)(卷积)  in image processing . RNN(Recurrent NN) is fit for one- dimensional sequence data that has maybe a temporal component.</p><p><img src="image-20230321113600065.png" alt="image-20230321113600065"></p><p>​        Supervised learning can deal with Structured data and Unstructured data. Structured data is a kind of data that has been quantified in database, while unstructured data involves audio ,images , texts and so on. Computers is harder to deal with unstructured data, but with a development of AI , computers are getting a better understanding of unstructured data.</p><p>​        So, NN has a deep effect on machine learning, so how should we make NN work properly? Let’s go to the next page!</p>]]></content>
      
      
      
        <tags>
            
            <tag> Deep-Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deep Learning in English 1</title>
      <link href="/2023/03/29/Deep-Learning-in-English-1/"/>
      <url>/2023/03/29/Deep-Learning-in-English-1/</url>
      
        <content type="html"><![CDATA[<h1 id="Deep-Learning-Notes"><a href="#Deep-Learning-Notes" class="headerlink" title="Deep Learning Notes"></a>Deep Learning Notes</h1><p>​        Here, I want to write a passage that related to deep learning in English,which  undoubtedly aims to practice my English writing and improve my English expressions.</p><p>​        （Passage in this series has already been basically proofread! You can read it for free!）</p><h2 id="What-is-a-deep-learning"><a href="#What-is-a-deep-learning" class="headerlink" title="What is a deep learning"></a>What is a deep learning</h2><p>​    To start with, we can simply say that deep learning  refers to training neural networks. In this case,to get a deep understanding of neural network, let’s take the prediction of house price as an example:</p><p>​    Often, we point the such Price - size relationship on the tablet,and , I mean , if we are good at linear regressions, we will choose to use linear functions , in other words, the functions that can be described as  $kx+b$ to what we call as “FIT” in machine learning. So we definitely get a line if we draw in the figure.</p><p><img src="image-20230319210045067.png" alt="image-20230319210045067"></p><p>​        We can already finish this simple work when we are in high school. But let’s review this process in another way. I mean , Let’s take the size of house as imput because it affects the price of house. So relatively, we treat price as the output. The functions that make fitting can be called: <strong>neural </strong>, as it is single when we establish the model of predictions</p><p><img src="image-20230319210353903.png" alt="image-20230319210353903"></p><p>But what we should get mentioned is that price can’t be negative as it will create finacial wonder(just kidding), so we do need to rectify the line.</p><p><img src="image-20230319220650497.png" alt="image-20230319220650497"></p><p>​        This kind of new line can be called rectified functions , in short, ReLU. But we should also be recognized that the affect can’t be singled. Instead, it should be mutiplied .</p><p>​        Let’s take the advanced example. We  usually take : size ,zip code ,wealth or even whether the house have lavatory as the target.</p><p><img src="image-20230319223411804.png" alt="image-20230319223411804"></p><p>​        We can build up the network by compounding the single neural. We just input the data and train to get the weight.</p><p>​        Let’s sum it up!</p><p><img src="image-20230319223731215.png" alt="image-20230319223731215"></p><p> The input is treated as input features and the neural network is aimed to predict the price, and on the next sections , we will offer more examples of this kind of neural networks</p>]]></content>
      
      
      
        <tags>
            
            <tag> Deep-Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023展望与开发事宜（试行版）</title>
      <link href="/2023/03/24/2023%E5%B1%95%E6%9C%9B%E4%B8%8E%E5%BC%80%E5%8F%91%E4%BA%8B%E5%AE%9C%EF%BC%88%E8%AF%95%E8%A1%8C%E7%89%88%EF%BC%89/"/>
      <url>/2023/03/24/2023%E5%B1%95%E6%9C%9B%E4%B8%8E%E5%BC%80%E5%8F%91%E4%BA%8B%E5%AE%9C%EF%BC%88%E8%AF%95%E8%A1%8C%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="2023展望与开发事宜（试行版）"><a href="#2023展望与开发事宜（试行版）" class="headerlink" title="2023展望与开发事宜（试行版）"></a>2023展望与开发事宜（试行版）</h1><h2 id="不行，必须开水！"><a href="#不行，必须开水！" class="headerlink" title="不行，必须开水！"></a>不行，必须开水！</h2><p>​        最近忙完了些事情，打算重新把注意力放到学习计算机，电子和人工智能的相关内容。这里打算写一个大纲水一水东西（破真）</p><h2 id="数学基础教程"><a href="#数学基础教程" class="headerlink" title="数学基础教程"></a>数学基础教程</h2><h3 id="微积分简明教程"><a href="#微积分简明教程" class="headerlink" title="微积分简明教程"></a>微积分简明教程</h3><h3 id="线性代数简明教程"><a href="#线性代数简明教程" class="headerlink" title="线性代数简明教程"></a>线性代数简明教程</h3><h3 id="概率论简明教程"><a href="#概率论简明教程" class="headerlink" title="概率论简明教程"></a>概率论简明教程</h3><h3 id="复变函数与积分变换简明教程"><a href="#复变函数与积分变换简明教程" class="headerlink" title="复变函数与积分变换简明教程"></a>复变函数与积分变换简明教程</h3><h3 id="数学物理方程简明教程"><a href="#数学物理方程简明教程" class="headerlink" title="数学物理方程简明教程"></a>数学物理方程简明教程</h3><h3 id="离散数学简明教程"><a href="#离散数学简明教程" class="headerlink" title="离散数学简明教程"></a>离散数学简明教程</h3><h2 id="计算机简明教程"><a href="#计算机简明教程" class="headerlink" title="计算机简明教程"></a>计算机简明教程</h2><h3 id="计算机理论"><a href="#计算机理论" class="headerlink" title="计算机理论"></a>计算机理论</h3><h4 id="一-数据结构与算法"><a href="#一-数据结构与算法" class="headerlink" title="一.数据结构与算法"></a>一.数据结构与算法</h4><ol><li><p>算法导论 总结版（可能含coding，但是看我有没有空）</p></li><li><p>基于Java的算法课程笔记</p></li><li><p>C数据结构代码实现与简单概论</p></li></ol><h4 id="二-操作系统引论"><a href="#二-操作系统引论" class="headerlink" title="二.操作系统引论"></a>二.操作系统引论</h4><ol><li>现代操作系统总结</li><li>Linux操作系统导读</li></ol><h3 id="程序语言设计"><a href="#程序语言设计" class="headerlink" title="程序语言设计"></a>程序语言设计</h3><p>1.C/C++手搓 MyTinyStdC / C++库，具体目录待我自 3.26日起开始规划和着手开发</p><p>2.C/C++学习笔记（水）</p><p>3.Python程序设计引论</p><p>4.项目导读与源码解释</p><h3 id="ROS开发水文"><a href="#ROS开发水文" class="headerlink" title="ROS开发水文"></a>ROS开发水文</h3><h3 id="Opencv4入门与程序实例"><a href="#Opencv4入门与程序实例" class="headerlink" title="Opencv4入门与程序实例"></a>Opencv4入门与程序实例</h3><h3 id="入门人工智能"><a href="#入门人工智能" class="headerlink" title="入门人工智能"></a>入门人工智能</h3><p>1.吴恩达机器学习（But in English）</p><p>2.torch学习</p><p>3.tensorFlow学习</p><p>4.自己读书顺手的笔记随记上传</p>]]></content>
      
      
      
        <tags>
            
            <tag> Planning and pre-arranging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C数据结构 1</title>
      <link href="/2023/03/19/C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-1/"/>
      <url>/2023/03/19/C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-1/</url>
      
        <content type="html"><![CDATA[<h1 id="C-算法与数据结构1"><a href="#C-算法与数据结构1" class="headerlink" title="C 算法与数据结构1"></a>C 算法与数据结构1</h1><p>​        鸽了好几天的博客（），现在准备整点花活，开几个大坑，这是其中一个：</p><h2 id="Recursion"><a href="#Recursion" class="headerlink" title="Recursion"></a>Recursion</h2><p>​        递归是用来解决那些可以分开治理的问题的好办法。我们分开求解，随后合并，这正是递归的主要思路，也就是说，我们可以把大问题化成性质相同的子问题。我想，代表性的应用正是斐波那契数列的应用</p><script type="math/tex; mode=display">\begin{equation}a_n=\left\{\begin{aligned}1  && n = 1,2\\a_{n-1}+a_{n-2}  && n\geq 3 \end{aligned}\right.\end{equation}</script><p>​        那么，根据这样的递推公式：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">long long getNFeb(int pos)&#123;if(pos &#x3D;&#x3D; 1 || pos &#x3D;&#x3D; 2)&#123;        return 1;    &#125;    else&#123;        return getNFeb(pos-1)+getNFeb(pos-2);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        是的，你拿去验证一下，马上就会发现这个没啥大的问题。但是，现在让你求一下 Feb(50).你就会高兴的发现自己的电脑寄了！因为这样的递归是不恰当的。它大量的调用了函数的，导致频繁的压栈，而这些压栈往往确实不必要的。有大量的值我们已经计算过了，可以使用备忘录的方式直接索引！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">long long getFeb(int X)&#123;    &#x2F;&#x2F; memory Tab    int x1 &#x3D; 1;    int x2 &#x3D; 1;    &#x2F;&#x2F; use &#39;res&#39; to record the result     int res ;        &#x2F;&#x2F; in this for loop , we specifically use recursion alike to solve problems     for(int i &#x3D; 2; i &lt; X; i++)&#123;        res &#x3D; x1 + x2;        x1 &#x3D; x2;        x2 &#x3D; res;    &#125;    return res;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        这样就很快了！</p><p>​        我们再来看一个也是稍微简单但是常见的例子：</p><p>​        我们常常这样书写 pow 函数来求乘方：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">long long pow(int X, int N)&#123;    long long res &#x3D; 1;    for(int i &#x3D; 0 ; i&lt; N ; i++)&#123;        res *&#x3D; X;    &#125;    return res;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        递归如何呢？</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">long long newPos(int x , int n)&#123;    if(x &#x3D;&#x3D; 1)&#123;        return X;    &#125;    if(n % 2 &#x3D;&#x3D; 0)&#123;        return newPow(int x,n&#x2F;2)*newPow(int x,n&#x2F;2)    &#125;    else    &#123;        return newPow(int x,n&#x2F;2)*newPow(int x,n&#x2F;2)*x;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        不错，本质上就是二分来求。但是好像不对，我们的递归还是变成了两个部分，似乎还是O( N )不太好，那么，本质上是同样的递归，不妨合并起来： </p><pre class="line-numbers language-C" data-language="C"><code class="language-C">long long newPow(int X , int N)&#123;if(N &#x3D;&#x3D; 1)&#123;        return X;    &#125;    if(N % 2 &#x3D;&#x3D; 0)&#123;        &#x2F;&#x2F; 下分为 (X^2)^(N&#x2F;2)的问题处理，处理的终点是发现 N &#x3D; 1了的时候停止         return newPow(X*X, N&#x2F;2);    &#125;    else    &#123;        return newPos(X*X, N&#x2F;2)*X;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        很好，这样就是 O(log n)了！</p><p>​        我们再来看一个：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int binarySearch(const int arr[],int findElem,int low,int high)&#123;if(low &gt; high)&#123;        return -1;&#x2F;&#x2F; or an abstractions called NOTFOUND as -1;    &#125;        int mid &#x3D; low + (high - low)&gt;&gt;1;        if(arr[mid] &#x3D;&#x3D; findElem)&#123;        return mid;    &#125;        if(arr[mid] &gt; findElem)&#123;        return binarySearch(arr,findElem,low,mid-1);    &#125;    &#x2F;&#x2F;这里建议写else!否则产生错误，就是递归结束向上返回的过程中又一次进入到这里来导致错误的结果    else&#123;        return binarySearch(arr,findElem,mid+1 ,high);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        这就是二分法的递归写法！</p><p>​        总而言之，这就是递归带给我们程序的小小自信！</p>]]></content>
      
      
      
        <tags>
            
            <tag> C DataStruct Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Opencv in Visual Studio C++</title>
      <link href="/2023/03/05/Opencv-in-Visual-Studio-C/"/>
      <url>/2023/03/05/Opencv-in-Visual-Studio-C/</url>
      
        <content type="html"><![CDATA[<h1 id="Opencv-with-Visual-Studio"><a href="#Opencv-with-Visual-Studio" class="headerlink" title="Opencv with Visual Studio"></a>Opencv with Visual Studio</h1><h2 id="C-Version"><a href="#C-Version" class="headerlink" title="C++ Version"></a>C++ Version</h2><h2 id="1-环境配置问题"><a href="#1-环境配置问题" class="headerlink" title="1.环境配置问题"></a>1.环境配置问题</h2><p>​        我们首先下好 Opencv 4.5.1 的包，安装好 Cmake 之后开始使用！</p><p>​        下面为了配置好 Opencv 的开发环境：我们必须书写一个 CmakeLists来链接库：</p><pre class="line-numbers language-Cmake" data-language="Cmake"><code class="language-Cmake">cmake_minimum_required(VERSION 2.8)project(def) # 工程名称 set(SOURCES    default.cpp # 源文件) set(HEADERS    #main.hpp # 头文件) add_executable(Main #产生可执行区域    $&#123;SOURCES&#125;    $&#123;HEADERS&#125;) set(OpenCV_DIR &quot;D:&#x2F;Opencv4.5.1&#x2F;opencv&#x2F;build&#x2F;x64&#x2F;vc15&#x2F;lib&quot;) # 找到二进制的坤文件find_package(OpenCV REQUIRED)if(OpenCV_FOUND)    target_include_directories(Main PUBLIC $&#123;OpenCV_INCLUDE_DIRS&#125;)    target_link_libraries(Main $&#123;OpenCV_LIBS&#125;)    # 上面两行代码把 Opencv 库所需要的文件和程序链接 endif()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        随后，点击Cmake 把工作区和二进制生成文件的地址传进去</p><p><img src="image-20230305134917646.png" alt="image-20230305134917646"></p><p>​        平台选择 64 位，点击 Configure 随后点击 Generate :留意有没有报错！</p><p>​        如果一切没有问题，那么，回到你的工作文件夹，选择BUILD文件夹，打开，随后找到：def.sIn文件，单击启动项目，当然我们需要更改启动项</p><p><img src="image-20230305135524174.png" alt="image-20230305135524174"></p><p>​        选择Main启动项即可！</p><p>​        当然可以使用以下代码测试你的环境！</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;opencv2&#x2F;opencv.hpp&gt;#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;using namespace cv;int main()&#123;string path &#x3D; &quot;C:\\Users\\陈冠豪\\Pictures\\Camera Roll\\2022-06-20_16.14.20.png&quot;;Mat img &#x3D; imread(path);if (img.empty()) &#123;return -1;&#125;imshow(&quot;1&quot;, img);waitKey(0);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="项目入门1："><a href="#项目入门1：" class="headerlink" title="项目入门1："></a>项目入门1：</h2><p>​        我们首先来了解什么是图像：这很简单！我们在计算机中用一个矩阵，向里面填入色块实现图像的显示，我们的图像越高清，就说明我们的矩阵划分的越密集，这样，表现出来的就越是清晰！</p><p>​        在黑白图中，我们使用 8 位图来刻画我们的黑白图！0代表黑色，255 则是白色。</p><p><img src="image-20230305140523343.png" alt="image-20230305140523343"></p><p>​        对于彩色图像，我们使用 BGR 三色图，以不同的比例的亮度来叠加在一起。</p><h3 id="显示一个图像"><a href="#显示一个图像" class="headerlink" title="显示一个图像"></a>显示一个图像</h3><p>​        下面我们来使用一个函数 imread 和 imshow!</p><p>​        先来引入头文件</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;opencv2&#x2F;opencv.hpp&gt;#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;using namespace cv;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​         现在看一下，有没有报错，一般而言成功了的环境是不会报错的！正是如此！</p><p>​        如果你有幸浏览到了 opencv  的文档，你会注意到 imread 表示的是从程序外面读取一个图像，并且将对象返回给一个叫做 Mat 的类型！函数需要一个string，表示的是图像的地址</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++"># 这里找到一个图像的地址：string path &#x3D; &quot;path_DIR&quot;;# 然后传进去：Mat img &#x3D; imread(path);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        这个 Mat 就是一个矩阵，存储着图像的信息。显示图像也是简单的：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">imshow(&quot;NameWindows&quot;,img);waitKey(0);&#x2F;&#x2F; 防止图像一闪而过<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Examples:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;opencv2&#x2F;opencv.hpp&gt;#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;using namespace cv;int main()&#123;string path &#x3D; &quot;C:\\Users\\陈冠豪\\Pictures\\Camera Roll\\2022-06-20_16.14.20.png&quot;;Mat img &#x3D; imread(path);if (img.empty()) &#123;return -1;&#125;imshow(&quot;1&quot;, img);waitKey(0);return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230305141742942.png" alt="image-20230305141742942"></p><p>​        效果如上！</p><h3 id="显示一个视频"><a href="#显示一个视频" class="headerlink" title="显示一个视频"></a>显示一个视频</h3><p>​        视频的本质是一帧一帧图像的播放，基于此，我们可以导入，以及导出一个视频：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">string path &#x3D; &quot;C:\\Users\\陈冠豪\\Videos\\2023-03-05 14-24-15.mp4&quot;;VideoCapture videocap(path);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        我们的 Opencv 里有一个专门搞视频的类型：</p><pre class="line-numbers language-none"><code class="language-none">VideoCapture <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        类型，支持这样的构造：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">VideoCapture videocap(path)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        随后声明一个矩阵，他将会存储我们的视频中一帧的图片：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">Mat img;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        我们视频的读取是这样的：读取每一帧，然后显示，直到视频结束或者我们人为的退出：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">while(1)&#123;videocap.read(img);    imshow(&quot;Video&quot;,img);    waitKey(1); &#x2F;&#x2F; 我们在这里决定了延迟是如何的，这里实现倍速或者是慢速播放&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;opencv2&#x2F;opencv.hpp&gt;#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;using namespace cv;int main()&#123;string path &#x3D; &quot;C:\\Users\\陈冠豪\\Videos\\2023-03-05 14-31-23.mp4&quot;;VideoCapture videocap(path);Mat img;while (1)&#123;videocap.read(img);imshow(&quot;1&quot;, img);waitKey(20);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        你当然可以选择你的摄像头！电脑的默认头是0，这意味着：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;opencv2&#x2F;opencv.hpp&gt;#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;using namespace cv;int main()&#123;VideoCapture videocap(0);Mat img;while (1)&#123;videocap.read(img);imshow(&quot;1&quot;, img);waitKey(20);&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        就可以看到你自己了！</p><p><img src="image-20230305144156399.png" alt="image-20230305144156399"></p><p>​        很好。</p><h2 id="项目入门2：图像处理"><a href="#项目入门2：图像处理" class="headerlink" title="项目入门2：图像处理"></a>项目入门2：图像处理</h2><p>​        下面，我们来一 一介绍函数的图像处理：</p><p>​        1）转化为灰度图：</p><p>来看这个函数：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">cvtColor(imgSrc,imgDst,code);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        这个函数把源图像转化为目标图像，以及转化方式：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;opencv2&#x2F;opencv.hpp&gt;#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;using namespace cv;int main()&#123;Mat imgSrc, imgDst;string path &#x3D; &quot;C:\\Users\\陈冠豪\\Pictures\\Camera Roll\\2022-06-20_16.14.20.png&quot;;imgSrc &#x3D; imread(path);cvtColor(imgSrc, imgDst, COLOR_BGR2GRAY);imshow(&quot;gray&quot;, imgDst);waitKey(0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230305145310719.png" alt="image-20230305145310719"></p><h2 id="图像模糊（高斯模糊）"><a href="#图像模糊（高斯模糊）" class="headerlink" title="图像模糊（高斯模糊）"></a>图像模糊（高斯模糊）</h2><p>​        使用函数 GaussainBlur 来实现！</p><p>​        小技巧，如果你不知道这个函数是干什么的，传什么样的参数：可以Ctrl+单击</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">CV_EXPORTS_W void GaussianBlur( InputArray src, OutputArray dst, Size ksize,                                double sigmaX, double sigmaY &#x3D; 0,                                int borderType &#x3D; BORDER_DEFAULT );&#x2F;** @brief Applies the bilateral filter to an image.The function applies bilateral filtering to the input image, as described inhttp:&#x2F;&#x2F;www.dai.ed.ac.uk&#x2F;CVonline&#x2F;LOCAL_COPIES&#x2F;MANDUCHI1&#x2F;Bilateral_Filtering.htmlbilateralFilter can reduce unwanted noise very well while keeping edges fairly sharp. However, it isvery slow compared to most filters._Sigma values_: For simplicity, you can set the 2 sigma values to be the same. If they are small (\&lt;10), the filter will not have much effect, whereas if they are large (\&gt; 150), they will have a verystrong effect, making the image look &quot;cartoonish&quot;._Filter size_: Large filters (d \&gt; 5) are very slow, so it is recommended to use d&#x3D;5 for real-timeapplications, and perhaps d&#x3D;9 for offline applications that need heavy noise filtering.This filter does not work inplace.@param src Source 8-bit or floating-point, 1-channel or 3-channel image.@param dst Destination image of the same size and type as src .@param d Diameter of each pixel neighborhood that is used during filtering. If it is non-positive,it is computed from sigmaSpace.@param sigmaColor Filter sigma in the color space. A larger value of the parameter means thatfarther colors within the pixel neighborhood (see sigmaSpace) will be mixed together, resultingin larger areas of semi-equal color.@param sigmaSpace Filter sigma in the coordinate space. A larger value of the parameter means thatfarther pixels will influence each other as long as their colors are close enough (see sigmaColor). When d\&gt;0, it specifies the neighborhood size regardless of sigmaSpace. Otherwise, d isproportional to sigmaSpace.@param borderType border mode used to extrapolate pixels outside of the image, see #BorderTypes *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        可以看到，这个函数需要源图像，目标图像和高斯核的大小，以及两个方差（其中有一个是必须的）</p><p><img src="image-20230305150011615.png" alt="image-20230305150011615"></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;opencv2&#x2F;opencv.hpp&gt;#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;using namespace cv;int main()&#123;Mat imgSrc,imgBlur;string path &#x3D; &quot;C:\\Users\\陈冠豪\\Pictures\\Camera Roll\\2022-06-20_16.14.20.png&quot;;imgSrc &#x3D; imread(path);GaussianBlur(imgSrc, imgBlur, Size(7, 7), 5, 0);imshow(&quot;1&quot;, imgBlur);imshow(&quot;org&quot;, imgSrc);waitKey(0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="图像边缘检测"><a href="#图像边缘检测" class="headerlink" title="图像边缘检测"></a>图像边缘检测</h3><p>​        下面我们要使用函数Canny 来给我们的图像进行检测！</p><p>​        <strong>我们在使用 Canny 检测的时候，往往还会在之前使用模糊来更好的检测！！！</strong></p><p>​        通读一下函数需求：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">CV_EXPORTS_W void Canny( InputArray image, OutputArray edges,                         double threshold1, double threshold2,                         int apertureSize &#x3D; 3, bool L2gradient &#x3D; false );&#x2F;** \overloadFinds edges in an image using the Canny algorithm with custom image gradient.@param dx 16-bit x derivative of input image (CV_16SC1 or CV_16SC3).@param dy 16-bit y derivative of input image (same type as dx).@param edges output edge map; single channels 8-bit image, which has the same size as image .@param threshold1 first threshold for the hysteresis procedure.@param threshold2 second threshold for the hysteresis procedure.@param L2gradient a flag, indicating whether a more accurate \f$L_2\f$ norm\f$&#x3D;\sqrt&#123;(dI&#x2F;dx)^2 + (dI&#x2F;dy)^2&#125;\f$ should be used to calculate the image gradient magnitude (L2gradient&#x3D;true ), or whether the default \f$L_1\f$ norm \f$&#x3D;|dI&#x2F;dx|+|dI&#x2F;dy|\f$ is enough (L2gradient&#x3D;false ). *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        可以看到，我们需要源图像，目标图像，两个阈值</p><p><img src="image-20230305150945109.png" alt="image-20230305150945109"></p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;opencv2&#x2F;opencv.hpp&gt;#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;using namespace cv;int main()&#123;Mat imgSrc,imgBlur,imgCanny;string path &#x3D; &quot;C:\\Users\\陈冠豪\\Pictures\\Camera Roll\\2022-06-20_16.14.20.png&quot;;imgSrc &#x3D; imread(path);GaussianBlur(imgSrc, imgBlur, Size(7, 7), 5, 0);Canny(imgBlur,imgCanny,50,150);imshow(&quot;org&quot;, imgSrc);imshow(&quot;canny&quot;, imgCanny);waitKey(0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        我们用这个来检测阈值，当然，阈值越低，对边界越敏感：</p><p><img src="image-20230305151111912.png" alt="image-20230305151111912"></p><p>​        下调阈值为 25,75后的结果！</p><h3 id="图像膨胀"><a href="#图像膨胀" class="headerlink" title="图像膨胀"></a>图像膨胀</h3><p>​        当我们的图像特征不明显的时候，我们可以放大特征来便于我们的检测：</p><p>​        使用的是函数 dilate:</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">CV_EXPORTS_W void dilate( InputArray src,                          OutputArray dst,                          InputArray kernel,                          Point anchor &#x3D; Point(-1,-1),                          int iterations &#x3D; 1,                          int borderType &#x3D; BORDER_CONSTANT,                          const Scalar&amp; borderValue &#x3D; morphologyDefaultBorderValue()                         );&#x2F;** @brief Performs advanced morphological transformations.The function cv::morphologyEx can perform advanced morphological transformations using an erosion and dilation asbasic operations.Any of the operations can be done in-place. In case of multi-channel images, each channel isprocessed independently.@param src Source image. The number of channels can be arbitrary. The depth should be one ofCV_8U, CV_16U, CV_16S, CV_32F or CV_64F.@param dst Destination image of the same size and type as source image.@param op Type of a morphological operation, see #MorphTypes@param kernel Structuring element. It can be created using #getStructuringElement.@param anchor Anchor position with the kernel. Negative values mean that the anchor is at thekernel center.@param iterations Number of times erosion and dilation are applied.@param borderType Pixel extrapolation method, see #BorderTypes. #BORDER_WRAP is not supported.@param borderValue Border value in case of a constant border. The default value has a specialmeaning.@sa  dilate, erode, getStructuringElement@note The number of iterations is the number of times erosion or dilatation operation will be applied.For instance, an opening operation (#MORPH_OPEN) with two iterations is equivalent to applysuccessively: erode -&gt; erode -&gt; dilate -&gt; dilate (and not erode -&gt; dilate -&gt; erode -&gt; dilate). *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        在我们使用完Canny之后：</p><p>​        我们的核怎么来呢？专门使用函数 getStructuringElement来完成我们的工作</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">Mat kernel &#x3D; getStructuringElement(MORPH_RECT,Size(5,5));# 这个核越大膨胀越厉害<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="image-20230305151930037.png" alt="image-20230305151930037"></p><p>​        特征被明显的放大了！</p><h3 id="图像侵蚀"><a href="#图像侵蚀" class="headerlink" title="图像侵蚀"></a>图像侵蚀</h3><p>​        我们使用的函数是 Erode:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">CV_EXPORTS_W void erode( InputArray src, OutputArray dst, InputArray kernel,                         Point anchor &#x3D; Point(-1,-1), int iterations &#x3D; 1,                         int borderType &#x3D; BORDER_CONSTANT,                         const Scalar&amp; borderValue &#x3D; morphologyDefaultBorderValue() );&#x2F;** @example samples&#x2F;cpp&#x2F;tutorial_code&#x2F;ImgProc&#x2F;Morphology_1.cppErosion and Dilation sample code![Sample Screenshot-Erosion](Morphology_1_Tutorial_Erosion_Result.jpg)![Sample Screenshot-Dilation](Morphology_1_Tutorial_Dilation_Result.jpg)Check @ref tutorial_erosion_dilatation &quot;the corresponding tutorial&quot; for more details*&#x2F;&#x2F;** @brief Dilates an image by using a specific structuring element.The function dilates the source image using the specified structuring element that determines theshape of a pixel neighborhood over which the maximum is taken:\f[\texttt&#123;dst&#125; (x,y) &#x3D;  \max _&#123;(x&#39;,y&#39;):  \, \texttt&#123;element&#125; (x&#39;,y&#39;) \ne0 &#125; \texttt&#123;src&#125; (x+x&#39;,y+y&#39;)\f]The function supports the in-place mode. Dilation can be applied several ( iterations ) times. Incase of multi-channel images, each channel is processed independently.@param src input image; the number of channels can be arbitrary, but the depth should be one ofCV_8U, CV_16U, CV_16S, CV_32F or CV_64F.@param dst output image of the same size and type as src.@param kernel structuring element used for dilation; if elemenat&#x3D;Mat(), a 3 x 3 rectangularstructuring element is used. Kernel can be created using #getStructuringElement@param anchor position of the anchor within the element; default value (-1, -1) means that theanchor is at the element center.@param iterations number of times dilation is applied.@param borderType pixel extrapolation method, see #BorderTypes. #BORDER_WRAP is not suported.@param borderValue border value in case of a constant border@sa  erode, morphologyEx, getStructuringElement *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230305152314781.png" alt="image-20230305152314781"></p><p>代码一览：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;opencv2&#x2F;opencv.hpp&gt;#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;using namespace cv;int main()&#123;Mat imgSrc,imgBlur,imgCanny,imgDial,imgErode;string path &#x3D; &quot;C:\\Users\\陈冠豪\\Pictures\\Camera Roll\\2022-06-20_16.14.20.png&quot;;imgSrc &#x3D; imread(path);GaussianBlur(imgSrc, imgBlur, Size(7, 7), 5, 0);Canny(imgBlur,imgCanny,50,150);Mat kernel &#x3D; getStructuringElement(MORPH_RECT, Size(5, 5));dilate(imgCanny, imgDial, kernel);erode(imgDial, imgErode, kernel);imshow(&quot;org&quot;, imgSrc);imshow(&quot;dilate&quot;, imgDial);imshow(&quot;erode&quot;, imgErode);waitKey(0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="图像大小调整与变换"><a href="#图像大小调整与变换" class="headerlink" title="图像大小调整与变换"></a>图像大小调整与变换</h3><p>​        很容易猜到重新设定大小的函数就是Resize:</p><p>​        我们首先学习一下怎样查看图像的大小：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">cout &lt;&lt; img.size()&lt;&lt;endl;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20230305153228802.png" alt="image-20230305153228802"></p><p>​        现在我们可以调整大小了：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">resize(img,imgResize,Size(640,480));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20230305153352540.png" alt="image-20230305153352540"></p><p>​        如果希望是等比例的放缩，可以采用这样的方式：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">resize(img,imgResize,Size(),xRatio,yRatio);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​         我们也可以裁剪图像：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">Rect roi(100,100,200,300); &#x2F;&#x2F; 这里产生一个区域矩形imgCrop &#x3D; img(roi);&#x2F;&#x2F;从图像中生成子图像<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    <img src="image-20230305154148790.png" alt="image-20230305154148790"></p>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS 基于VScode的节点调试</title>
      <link href="/2023/03/04/ROS-%E5%9F%BA%E4%BA%8EVScode%E7%9A%84%E8%8A%82%E7%82%B9%E8%B0%83%E8%AF%95/"/>
      <url>/2023/03/04/ROS-%E5%9F%BA%E4%BA%8EVScode%E7%9A%84%E8%8A%82%E7%82%B9%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="ROS节点：调试（基于VScode）"><a href="#ROS节点：调试（基于VScode）" class="headerlink" title="ROS节点：调试（基于VScode）"></a>ROS节点：调试（基于VScode）</h1><p>​        我们已经学会创建一个简单的 ROS 节点了，但是，我们应当要学会调试，毕竟，我们的代码可不会那么短！出现了问题调试就是必然的！</p><p>​        下面开始介绍基于Vscode的 ROS 的调试办法：</p><h2 id="创建调试用的节点"><a href="#创建调试用的节点" class="headerlink" title="创建调试用的节点"></a>创建调试用的节点</h2><p>​        首先 cd 到工作文件夹，创建他们</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> workTab2/src<span class="token builtin class-name">cd</span> workTab2catkin_make<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        以准备好基本的文件！</p><h2 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h2><p>​        VScode 有两个很是好用的插件！一个是ROS，另一个是 catkin_tools 他们可以让你很好的进行ROS运行和调试（不用再命令框里看了！）。</p><p>​        那么问题来了，在哪里打开VScode 呢？显然不是随便打开，也不是在src文件，而是在工作文件夹 workTab2 下，</p><p><img src="image-20230304211639014.png" alt="image-20230304211639014"></p><p>​        这个地方，准备 ctrl+alt+T打开终端：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">code <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        这是结构！就出来了：</p><p><img src="image-20230304211739953.png" alt="image-20230304211739953"></p><p>​        点击最左侧栏目中的第四个：扩展，安装</p><p><img src="image-20230304211827660.png" alt="image-20230304211827660"></p><p><img src="image-20230304211844585.png" alt="image-20230304211844585"></p><p><img src="image-20230304211905431.png" alt="image-20230304211905431"></p><p><img src="image-20230304211913952.png" alt="image-20230304211913952"></p><p>​        好消息是：一般你已经安上了。</p><p>​        但是这两个：</p><p><img src="image-20230304211953729.png" alt="image-20230304211953729"></p><p><img src="image-20230304212010942.png" alt="image-20230304212010942"></p><p>​        是你大概率没有安装的！安上！</p><p>​        好了！让我们见识一下这玩意好用不好用！</p><p>​        一般的，在官方的命令行创建时如下的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/workTab2/srccatkin_create_pkg talker roscpp rospy std_msgs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        命令行快，但是不够可视化。那我们安装的插件是怎么处理的呢？看到VScode 的文件管理器：右键 src</p><p><img src="image-20230304212352420.png" alt="image-20230304212352420"></p><p>​        怎么着？有一个 Create Catkin Package 了，点击它：</p><p><img src="image-20230304212442723.png" alt="image-20230304212442723"></p><p>​        留意这里！你可以输入你想创建的节点名字！</p><p><img src="image-20230304212525846.png" alt="image-20230304212525846"></p><p>​        你一需要的 dependencies （就是命令行后半部分的内容）</p><p>​        一个回车：包创建结束</p><p><img src="image-20230304212701151.png" alt="image-20230304212701151"></p><h2 id="Coding时间"><a href="#Coding时间" class="headerlink" title="Coding时间"></a>Coding时间</h2><p>​        在我们的 src 文件夹下，右键整一个新文件：写完代码</p><p><img src="image-20230304212841542.png" alt="image-20230304212841542"></p><p>​        现在你无论是调试还是运行都不行！缺少配置文件！这是最最最麻烦的地方！！！</p><h2 id="补全配置文件"><a href="#补全配置文件" class="headerlink" title="补全配置文件"></a>补全配置文件</h2><h3 id="CmakeLists-txt-的内容补全"><a href="#CmakeLists-txt-的内容补全" class="headerlink" title="CmakeLists.txt 的内容补全"></a>CmakeLists.txt 的内容补全</h3><p>​        有点捞，这个还是要我们自己在文件中手动补充！</p><pre class="line-numbers language-Cmake" data-language="Cmake"><code class="language-Cmake">aux_source_directory(.&#x2F;src SRCS)add_executable(talker $&#123;SRCS&#125;)target_link_libraries(talker $&#123;catkin_LIBRARIES&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        有趣的是！这次我们不需要再次改动 Cmake的最低要求版本了！</p><h3 id="查看c-cpp-properties-json"><a href="#查看c-cpp-properties-json" class="headerlink" title="查看c_cpp_properties.json"></a>查看c_cpp_properties.json</h3><p>​        一般我们改动添加：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"compileCommands"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceFolder&#125;/build/compile_commands.json"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        我们后面会知道，这是调用产生的调试文件，等效于在命令行输入了：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">catkin_make <span class="token operator">-</span>DCMAKE_EXPORT_COMPILE_COMMANDS<span class="token operator">=</span> YES<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        后调用它，他在 devel/lib里面！</p><p>​        不同于我参考的，我选择了直接在命令行里直接编译产生二进制文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">catkin_make catkin_make <span class="token parameter variable">-DCMAKE_EXPORT_COMPILE_COMMANDS</span><span class="token operator">=</span> YES<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        省事！</p><h3 id="不用改动settings-json"><a href="#不用改动settings-json" class="headerlink" title="不用改动settings.json"></a>不用改动settings.json</h3><h3 id="手动产生task-json"><a href="#手动产生task-json" class="headerlink" title="手动产生task.json"></a>手动产生task.json</h3><p>​        我说停！不是让你 vim task.json ，而是在Vscode 里摁下 ctrl + shift + P </p><p><img src="image-20230304214318786.png" alt="image-20230304214318786"></p><p>​        输入 tasks: configure task单击一下，注意，会弹出来很多东西！找到：catkin_make: build 点击（其他的我不清楚，萌新QAQ）。</p><p>​        对文件做出如下的修改：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"catkin_make"</span><span class="token punctuation">,</span> <span class="token comment">//代表提示的描述性信息</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>  <span class="token comment">//可以选择shell或者process,如果是shell代码是在shell里面运行一个命令，如果是process代表作为一个进程来运行</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"catkin_make"</span><span class="token punctuation">,</span><span class="token comment">//这个是我们需要运行的命令</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">"-DCMAKE_EXPORT_COMPILE_COMMANDS=ON"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment">//如果需要在命令后面加一些后缀，可以写在这里，比如-DCATKIN_WHITELIST_PACKAGES=“pac1;pac2”</span>            <span class="token property">"group"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token property">"kind"</span><span class="token operator">:</span><span class="token string">"build"</span><span class="token punctuation">,</span><span class="token property">"isDefault"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"presentation"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"reveal"</span><span class="token operator">:</span> <span class="token string">"always"</span><span class="token comment">//可选always或者silence，代表是否输出信息</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"problemMatcher"</span><span class="token operator">:</span> <span class="token string">"$msCompile"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        ！我参考的 CSDN 的作者说他不清楚为什么需要添加</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token string">"-DCMAKE_EXPORT_COMPILE_COMMANDS=ON"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        这是因为我们本质上是链接 ROS 官方的调试文件产生方法，从那里来调试，如果我们不在这里下这个指令，以及不在c_cpp_properties.json 做出那样更改的话：我们无法链接那个文件！</p><h3 id="手动创建-launch-json"><a href="#手动创建-launch-json" class="headerlink" title="手动创建 launch.json"></a>手动创建 launch.json</h3><p>​        别！不用 vim. 最聪明的办法是</p><p><img src="image-20230304215129045.png" alt="image-20230304215129045"></p><p>​        点击它，配置如下内容</p><pre class="line-numbers language-none"><code class="language-none">&#123;    &quot;version&quot;: &quot;0.2.0&quot;,    &quot;configurations&quot;: [        &#123;            &quot;name&quot;: &quot;(gdb) Launch&quot;,            &quot;type&quot;: &quot;cppdbg&quot;,            &quot;request&quot;: &quot;launch&quot;,            # 这里要修改，找到编译生成的二进制可执行文件            # 这里！！！！！！！！！！！！！！！！！！！！！！！！                   &quot;program&quot;: &quot;$&#123;workspaceFolder&#125;&#x2F;build&#x2F;talker&#x2F;talker&quot;,             &quot;args&quot;: [],            &quot;stopAtEntry&quot;: false,            &#x2F;&#x2F;&quot;preLaunchTask&quot;: &quot;build&quot;,            &quot;cwd&quot;: &quot;$&#123;workspaceFolder&#125;&quot;,            &quot;environment&quot;: [],            &quot;externalConsole&quot;: false,            &quot;MIMode&quot;: &quot;gdb&quot;,            &quot;targetArchitecture&quot;: &quot;x64&quot;,            &quot;avoidWindowsConsoleRedirection&quot;: true,            &quot;setupCommands&quot;: [                &#123;                    &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,                    &quot;ignoreFailures&quot;: true                &#125;            ]        &#125;    ]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        好的，如果你执行过：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">catkin_make <span class="token parameter variable">-DCMAKE_EXPORT_COMPILE_COMMANDS</span><span class="token operator">=</span> YES<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        那你就去 build下面找！</p><p>​        我的是：</p><pre class="line-numbers language-none"><code class="language-none">~&#x2F;workTab2&#x2F;build&#x2F;talker&#x2F;talker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        而如果你是采用 Ctrl + shift+ B VScode 的 task.json 来帮你编译的：就去devel/lib下找！</p><pre class="line-numbers language-none"><code class="language-none">~&#x2F;workTab2&#x2F;devel&#x2F;lib&#x2F;talker&#x2F;talker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        总而言之，找到你的二进制文件在哪里！！！</p><p>​        现在的现在，再次编译一次！！！Ctrl+shift+B!!!</p><p>​        如果出现了编译成功（粉色的蓝色的绿色的都有，但是红色的就是寄！这个时候会给你报一些警告和错误！可以留意）</p><p>​        随后，尝试调试：</p><p><img src="image-20230304230646212.png" alt="image-20230304230646212"></p><p>​        出现这个，恭喜你！调试成功！可以打断点了！</p><p><img src="image-20230304232246697.png" alt="image-20230304232246697"></p><p>​        OK！下班！！！</p><p>​        如果对文件有所更改，请注意，你需要重新编译：Ctrl + Shift + B，随后再次调试！</p><p>​        如果断点失效，博主这里没有什么更好的办法（整了几个小时也没拿出可行的方案（彩笔落泪）），那只好试试重新生成文件看看！</p>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS 节点的创建，编程，编译与运行</title>
      <link href="/2023/03/02/ROS-%E8%8A%82%E7%82%B9%E7%9A%84%E5%88%9B%E5%BB%BA%EF%BC%8C%E7%BC%96%E7%A8%8B%EF%BC%8C%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/"/>
      <url>/2023/03/02/ROS-%E8%8A%82%E7%82%B9%E7%9A%84%E5%88%9B%E5%BB%BA%EF%BC%8C%E7%BC%96%E7%A8%8B%EF%BC%8C%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="ROS节点-范例"><a href="#ROS节点-范例" class="headerlink" title="ROS节点 范例"></a>ROS节点 范例</h1><h2 id="1-创建一个节点"><a href="#1-创建一个节点" class="headerlink" title="1.创建一个节点"></a>1.创建一个节点</h2><p>​        当我们下好了 ROS 之后，可以尝试创建自己的一个节点了！但是正如同工作要有工作桌，我们创立一个工作区才能干活，于是，我们先 mkdir 一个文件夹！</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> ~/RosWork<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        以及建立一个子文件夹 src ，他就是来存我们源代码的地方</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/RosWork/<span class="token function">mkdir</span> src <span class="token builtin class-name">cd</span> ./src<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        <strong>不要换 src 名字！！！</strong></p><p>​        下面向电脑宣称这地方归 ROS 管：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">catkin_init_workspace<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        先返回上一级文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        先编译一次环境：</p><pre class="line-numbers language-none"><code class="language-none">catkin_make<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        从而产生工作文件！我们多了很多文件夹：</p><p><img src="image-20230302231715222.png" alt="image-20230302231715222"></p><p>​        下一步，就是设置一下环境变量，让电脑和ROS知道你的办公桌子在哪里：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> devel/setup.bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        不放心？想看看地方对没对？用这个指令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable">$ROS_PACKAGE_PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20230302232048106.png" alt="image-20230302232048106"></p><p>​        这下工作桌修好了！</p><h2 id="开始向里面塞东西"><a href="#开始向里面塞东西" class="headerlink" title="开始向里面塞东西"></a>开始向里面塞东西</h2><p>​        下面向节点里面塞东西：</p><p>​        下面创建一个 package 包（节点下属的一个功能包）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ./srccatkin_create_pkg talkerAndListener std_msgs rospy roscpp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        后边包含了在编译时需要依赖的其他功能包：ROS 的标准消息结构（int、bool 等）以及 C++ 和 Python 的接口。</p><p>​        进去 src 文件看看</p><p>​        <img src="image-20230302232535223.png" alt="image-20230302232535223"></p><p>​        我们可以开始写文件了：</p><p>​        为了测试，我们选用最经典的 订阅 与 接受 来尝试我们的第一次节点编写：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/你的工作区文件夹/src/talker_and__listener/src<span class="token function">vim</span> listener.cpp <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        偷懒了，用 vim 直接编辑！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; 塞这些东西进去&#x2F;&#x2F; 原博客：https:&#x2F;&#x2F;blog.csdn.net&#x2F;weixin_44420419&#x2F;article&#x2F;details&#x2F;111355655#include &quot;ros&#x2F;ros.h&quot;#include &quot;std_msgs&#x2F;String.h&quot; &#x2F;&#x2F;所要订阅的消息类型，此处是std)msgs包下的String。msg&#x2F;&#x2F;回调函数部分void chatterCallback(const std_msgs::String::ConstPtr&amp; msg)&#123;    ROS_INFO(&quot;I heard: [%s]&quot;, msg-&gt;data.c_str()); &#x2F;&#x2F;将接收到的消息打印出来&#125;&#x2F;*subscriber的回调函数，当接收到 chatter 话题的时候就会被调用。参数是所接收的消息的常数指标（const pkg_name::msg_name::ConstPtr&amp; msg）.消息是以 boost shared_ptr 指针的形式传输，这就意味着你可以存储它而又不需要复制数据。之后使用msg-&gt;field_name即可存取message的资料*&#x2F;int main(int argc, char **argv)&#123;    ros::init(argc, argv, &quot;listener&quot;); &#x2F;&#x2F;初始化ROS节点    ros::NodeHandle n; &#x2F;&#x2F;创建句柄节点    ros::Subscriber sub &#x3D; n.subscribe(&quot;chatter&quot;, 1000, chatterCallback);&#x2F;*告诉 master 要订阅 chatter 话题（第一个参数）上的消息。当有消息发布到这个话题时，ROS 就会调用 chatterCallback() 函数（第三个参数）。第二个参数是队列大小，当缓存达到 1000 条消息后，自动舍弃时间戳最早的消息。NodeHandle::subscribe() 返回 ros::Subscriber 对象,此处为sub。当这个对象销毁时，它将自动退订 chatter 话题的消息。有各种不同的 NodeHandle::subscribe() 函数，可以指定类的成员函数，甚至是 Boost.Function 对象可以调用的任何数据类型。*&#x2F;    ros::spin();&#x2F;*ros::spin() 进入自循环，可以尽可能快的调用消息回调函数，会调用主程序中所有回调函数，此处只有chatterCallback()一旦 ros::ok() 返回 false，ros::spin() 就会立刻跳出自循环。这有可能是 ros::shutdown() 被调用，或者是用户按下了 Ctrl-C，使得 master 告诉节点要终止运行。*&#x2F;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        现在：摁 esc 输入 :wq 退出编辑和 vim ，随后再整一个 talker.cpp</p><pre class="line-numbers language-none"><code class="language-none">vim talker.cpp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;头文件部分#include &lt;sstream&gt; #include &quot;ros&#x2F;ros.h&quot; &#x2F;*&quot;ros&#x2F;ros.h 是一个实用的头文件，它引用了 ROS 系统中大部分常用的头文件。&quot;地址在 &#x2F;opt&#x2F;ros&#x2F;noetic&#x2F;include&#x2F;ros&#x2F;&quot; *&#x2F;#include &quot;std_msgs&#x2F;String.h&quot; &#x2F;* &quot;std_msgs&quot;是一个消息类型依赖包，此处要传输string类型数据，需要包含该数据类型的头文件String.h，就在这个依赖包里 *&#x2F;&#x2F;&#x2F;初始化部分int main(int argc, char **argv)&#123;    ros::init(argc, argv, &quot;talker&quot;);    &#x2F;* ROS节点初始化。初始化的init函数包含三个参数，    前两个参数是命令行或launch文件输入的参数，可以用来命名重映射等功能；    第三个参数定义了Publisher节点的名称“talker”，不允许重复，是一个base name。 *&#x2F;        ros::NodeHandle n;    &#x2F;* 为这个进程的节点创建一个句柄。    第一个创建的 NodeHandle 会为节点进行初始化，    最后一个销毁的 NodeHandle 则会释放该节点所占用的所有资源。 *&#x2F;        ros::Publisher chatter_pub &#x3D; n.advertise&lt;std_msgs::String&gt;(&quot;chatter&quot;, 1000);    &#x2F;* 告诉 master 将要在 chatter（话题名）上发布 std_msgs&#x2F;String 消息类型的消息。    这样 master 就会告诉所有订阅了 chatter 话题的节点，将要有数据发布。    NodeHandle::advertise() 会建立一个topic。在ROS Master端注册一个Publisher，    返回一个 ros::Publisher 对象,此处为chatter_pub，,它有两个作用：     1) 它有一个 publish()函数可以在topic上发布(pubish)消息；     2) &lt;std_msgs::String&gt;指定后面要发布的消息类型是std_msgs包中的string类型，如果消息类型不对,它会拒绝发布。         (&quot;chatter&quot;, 1000)中两个参数，第一个参数指定以&quot;chatter&quot;为话题发布消息    第二个参数是发布序列的大小。如果发布的消息的频率太高，缓冲区中的消息在大于 1000 个的时候就会开始丢弃先前发布的消息。*&#x2F;        ros::Rate loop_rate(10);    &#x2F;* ros::Rate 对象可以允许你指定自循环的频率。它会追踪记录自上一次调用 Rate::sleep() 后时间的流逝，并休眠直到一个频率周期的时间。在这个例子中，让它以 10Hz 的频率运行，即节点休眠时间为100ms。 *&#x2F;       &#x2F;&#x2F;循环部分    int count &#x3D; 0;    while (ros::ok())    &#123;    &#x2F;*进入节点的主循环，如果下列条件之一发生，ros::ok() 返回false，跳出循环：·SIGINT 被触发 (Ctrl+C)：roscpp 会默认生成一个 SIGINT 句柄，它负责·处理 Ctrl+C 键盘操作使ros::ok() 返回 false·被另一同名节点踢出 ROS 网络·关闭函数ros::shutdown() 被程序的另一部分调用·节点中的所有 ros::NodeHandles 都已经被销毁一旦 ros::ok() 返回 false, 所有的 ROS 调用都会失效。    *&#x2F;            std_msgs::String msg;&#x2F;&#x2F;建立暂存区，先将消息放入，在进行publish        std::stringstream ss;        ss &lt;&lt; &quot;hello world &quot; &lt;&lt; count;        msg.data &#x3D; ss.str();&#x2F;&#x2F;将要输出的字符串消息存储到string消息类型中唯一成员data中        ROS_INFO(&quot;%s&quot;, msg.data.c_str()); &#x2F;&#x2F;类似C&#x2F;C++的 printf&#x2F;cout 等函数，打印日志信息。        chatter_pub.publish(msg);&#x2F;&#x2F;发布封装完毕的消息msg。Master会查找订阅该话题的节点，并完成两个节点的连接，传输消息                ros::spinOnce();&#x2F;&#x2F;处理订阅话题的所有回调函数callback()，        loop_rate.sleep(); &#x2F;&#x2F;休眠，休眠时间由loop_rate()设定        ++count;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>     打开你的 CMakeLists.txt ，随后找到（这里推介使用VScode 的搜索，嘎嘎快）</code></pre><p>​        留意到这里：</p><pre class="line-numbers language-none"><code class="language-none">add_executable()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        这是用于设置需要编译的代码和生成的可执行文件。第一个参数为期望生成的可执行文件的名称，后边的参数为参与编译的源码文件（cpp），如果需要多个代码文件，则可<br>在后面依次列出，中间用空格进行分隔。</p><p>​        和：</p><pre class="line-numbers language-none"><code class="language-none">target_link_libraries<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        用于设置链接库。很多功能需要使用系统或者第三方的库函数，通过该选项可以配置<br>执行文件链接的库文件，第一个参数是可执行文件的名称，后面依次列出需要链接的<br>库。此处编译没有使用其他库，添加默认链接库${catkin_LIBRARIES}即可。</p><p>​        以及</p><pre class="line-numbers language-none"><code class="language-none">add_dependencies<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        用于设置依赖。在很多应用中，我们需要定义语言无关的消息类型，消息类型会在编<br>译过程中产生相应语言的代码，如果编译的可执行文件依赖这些动态生成的代码，则<br>需要使用add_dependencies添加${PROJECT_NAME}_generate_messages_cpp<br>配置，即该功能包动态产生的消息代码。该编译规则也可以添加其他需要依赖的功能包。</p><p>​        下面我们设置一下：</p><pre class="line-numbers language-Cmake" data-language="Cmake"><code class="language-Cmake">include_directories(include $&#123;catkin_INCLUDE_DIRS&#125;)add_executable(talker src&#x2F;talker.cpp)target_link_libraries(talker $&#123;catkin_LIBRARIES&#125;)add_dependencies(talker $&#123;PROJECT_NAME&#125;_generate_messages_cpp)add_executable(listener src&#x2F;listener.cpp)target_link_libraries(listener $&#123;catkin_LIBRARIES&#125;)add_dependencies(listener $&#123;PROJECT_NAME&#125;_generate_messages_cpp)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230302234440520.png" alt="image-20230302234440520"></p><p>​        现在注意，现在注意！我们的Cmake 的版本要求的是过高的，需要调整最低版本，否则在之后的文件编译中是会爆出找不到文件的迷惑错误！看到文件的第一行</p><pre class="line-numbers language-Cmake" data-language="Cmake"><code class="language-Cmake">cmake_minimum_required(VERSION 3.0.2)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        改成：</p><pre class="line-numbers language-Cmake" data-language="Cmake"><code class="language-Cmake">cmake_minimum_required(VERSION 2.8.3)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        编译一下</p><p><img src="image-20230302234954815.png" alt="image-20230302234954815"></p><p>​        成功了。</p><p>​        为了运行，还是要设置环境变量：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/<span class="token operator">&lt;</span>workspace name<span class="token operator">></span><span class="token builtin class-name">source</span> ./devel/setup.bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​            想偷懒的话</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token builtin class-name">echo</span> <span class="token string">"source ~/ros/tr3_6/devel/setup.bash"</span> <span class="token operator">>></span> ~/.bashrc$ <span class="token builtin class-name">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        启动 ROS:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">roscore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        开一个新终端：运行我们的包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rosrun talkerAndlistener talker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        再来一个：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rosrun talkerAndlistener listener<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20230303002333631.png" alt="image-20230303002333631"></p><p>​        下班！</p>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51单片机入门 1</title>
      <link href="/2023/03/01/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%85%A5%E9%97%A8-1/"/>
      <url>/2023/03/01/51%E5%8D%95%E7%89%87%E6%9C%BA%E5%85%A5%E9%97%A8-1/</url>
      
        <content type="html"><![CDATA[<h1 id="51单片机入门"><a href="#51单片机入门" class="headerlink" title="51单片机入门"></a>51单片机入门</h1><h2 id="什么是单片机"><a href="#什么是单片机" class="headerlink" title="什么是单片机"></a>什么是单片机</h2><p>​        单片机（Single-Chip Microcomputer）是一种<strong>集成电路芯片</strong>，是采用超大规模集成电路技术把具有数据处理能力的<strong>中央处理器CPU、随机存储器RAM、只读存储器ROM、多种I/O口和中断系统、定时器/计数器</strong>等功能（可能还包括显示驱动电路、脉宽调制电路、模拟多路转换器、A/D转换器等电路）集成到一块硅片上构成的一个小而完善的微型计算机系统，在工业控制领域广泛应用。从上世纪80年代，由当时的4位、8位单片机，发展到现在的300M的高速单片机。</p><p>​        单片机又称单片微控制器，它不是完成某一个逻辑功能的芯片，而是把一个计算机系统集成到一个芯片上。相当于一个微型的计算机，和计算机相比，单片机只缺少了I/O设备。概括的讲：一块芯片就成了一台计算机。它的体积小、质量轻、价格便宜、为学习、应用和开发提供了便利条件。<strong>同时，学习使用单片机是了解计算机原理与结构的最佳选择。</strong></p><h2 id="为什么叫51单片机"><a href="#为什么叫51单片机" class="headerlink" title="为什么叫51单片机"></a>为什么叫51单片机</h2><p>​        51单片机是对兼容英特尔8051指令系统的单片机的统称。51单片机广泛应用于家用电器、汽车、工业测控、通信设备中。因为51单片机的指令系统、内部结构相对简单，所以国内许多高校用其进行单片机入门教学。</p><p><img src="image-20230301184900323.png" alt="image-20230301184900323"></p><p>​        </p><p>​        上图是单片机的一种经典结构，现在可以忽略不看</p><p>​        这是接口</p><p><img src="image-20230301185013274.png" alt="image-20230301185013274"></p><p>​        上图里，VCC表示电源的正极，GND是负极。而XTAL1，和XTAL2的两个接口则是表示单片机的时钟接口</p><p><img src="image-20230301185911921.png" alt="image-20230301185911921"></p><p>​        单片机也是机，要供电吃饭。系统电源给单片机供电，其电容是为了稳定的单片机供电（蓄水池）。</p><p>​        而右下角是晶振电路，是为了使单片机程序一步一步运行（固定发出信号）。</p><p>​        在实际上安装单片机的时候，一定要注意正负极！！！看清楚有凹槽的一段右侧是VCC接口，对面左下的是GND接口！</p><p><img src="image-20230301190636190.png" alt="image-20230301190636190"></p><h2 id="Light-UP-OUR-FIRST-LED"><a href="#Light-UP-OUR-FIRST-LED" class="headerlink" title="Light UP OUR FIRST LED"></a>Light UP OUR FIRST LED</h2><p>​        我们兴建一个工程，选择好文件夹并完成对工程文件夹的命名之后，选择器件，可以看到一个选择器件的对话框，选择AT89C52即可，随后在Target1 -&gt; Source Group里开始编写程序。</p><p>​        我们添加好C文件</p><p><img src="image-20230301193657680.png" alt="image-20230301193657680"></p><h3 id="扩展：电阻表示"><a href="#扩展：电阻表示" class="headerlink" title="扩展：电阻表示"></a>扩展：电阻表示</h3><p><img src="image-20230301194206533.png" alt="image-20230301194206533"></p><p>看到这个102了嘛？这表示的是 1 0 后面跟上两个0 就是 1K的电阻。再比如 473 就是47000 欧姆电阻。</p><h3 id="单片机怎么控制原件的？"><a href="#单片机怎么控制原件的？" class="headerlink" title="单片机怎么控制原件的？"></a>单片机怎么控制原件的？</h3><p>​        单片机是集成 CPU 的，外部的引脚同寄存器，通过驱动器（来增大驱动能力）来相连接，这样我们就可以直接向寄存器里写值！</p><p><img src="image-20230301194710160.png" alt="image-20230301194710160"></p><p>​        这样，我们就理解为什么是8 个口了（8位操作系统）</p><p><img src="image-20230301194824050.png" alt="image-20230301194824050"></p><p>​        回到 LED 电路里，为了使第一个灯亮起来，我们就对D1口（P20）处写入0，余下写1（这样其他电平一致，没有电流通过，反之另一个有），这样只有D1会亮！小端法就是1111 1110，十六进制就是 0xFE</p><p><img src="image-20230301195916687.png" alt="image-20230301195916687"></p><p>​        然后，选择：</p><p><img src="image-20230301195936801.png" alt="image-20230301195936801"></p><p>​        选择output 生成 hex 文件 随后再次编译即可.</p><p>​        当然可以循环闪！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;REGX52.H&gt;unsigned int arr[8] &#x3D; &#123;0xFE,0xFD,0xFB,0xF7,0xEF,0xDF,0xBF,0x7F&#125;;void main()&#123;unsigned int i &#x3D; 0;unsigned int j &#x3D; 0;for(j&#x3D;0;j&lt;8;j++)&#123;  P2 &#x3D; arr[j];for(i &#x3D; 0; i&lt;30000;i++) ;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数基本教程（3）</title>
      <link href="/2023/02/28/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%9F%BA%E6%9C%AC%E6%95%99%E7%A8%8B%EF%BC%883%EF%BC%89/"/>
      <url>/2023/02/28/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%9F%BA%E6%9C%AC%E6%95%99%E7%A8%8B%EF%BC%883%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="矩阵的概念"><a href="#矩阵的概念" class="headerlink" title="矩阵的概念"></a>矩阵的概念</h1><p>​        本质上是一个数表，一个矩阵可以表达为：$m\times n$矩阵，元素可以使用$a_{ij}$</p><script type="math/tex; mode=display">\left [\begin{matrix}1&2&3 \\1&1&1\end{matrix}\right ]</script><p>​        这是一个$2\times 3$矩阵，记作$A_{2\times 3}$</p><h2 id="负矩阵"><a href="#负矩阵" class="headerlink" title="负矩阵"></a>负矩阵</h2><script type="math/tex; mode=display">B =-A</script><h2 id="N-阶矩阵"><a href="#N-阶矩阵" class="headerlink" title="N 阶矩阵"></a>N 阶矩阵</h2><p>​        定义<strong>行数等于列数的矩阵</strong>是<strong>一个方阵</strong></p><script type="math/tex; mode=display">\left [\begin{matrix}1&2 \\1&1\end{matrix}\right ]</script><h2 id="单位阵"><a href="#单位阵" class="headerlink" title="单位阵"></a>单位阵</h2><p>​        基于 N 阶方阵，如果只有主对角线元素不为0的方阵是单位阵</p><script type="math/tex; mode=display">\left [\begin{matrix}1&0 \\0&1\end{matrix}\right ]</script><h2 id="矩阵相等的前提是同型矩阵"><a href="#矩阵相等的前提是同型矩阵" class="headerlink" title="矩阵相等的前提是同型矩阵"></a>矩阵相等的前提是同型矩阵</h2><p>​        矩阵相等的前提是同型矩阵，接下来才会一 一对比元素！所以两个 0 矩阵不一定相等！</p><h2 id="运算律"><a href="#运算律" class="headerlink" title="运算律"></a>运算律</h2><h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><p>​        首先矩阵的加法只能发生在同型矩阵之中：加法是对应元素相加：</p><p>EG:</p><script type="math/tex; mode=display">\left [\begin{matrix}1&2&3 \\1&1&1\end{matrix}\right ]+\left [\begin{matrix}1&2&3 \\1&1&1\end{matrix}\right ]=\left [\begin{matrix}2&4&6 \\2&2&2\end{matrix}\right ]</script><h3 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h3><p>​        一致的：</p><script type="math/tex; mode=display">\left [\begin{matrix}1&2&3 \\1&1&1\end{matrix}\right ]-\left [\begin{matrix}1&2&3 \\1&1&1\end{matrix}\right ]=\left [\begin{matrix}0&0&0\\0&0&0\end{matrix}\right ]</script><h3 id="基本的运算律"><a href="#基本的运算律" class="headerlink" title="基本的运算律"></a>基本的运算律</h3><p>1）$A+B = B+A$</p><p>2)$(A+B)+C=A+(B+C)$</p><h3 id="数乘"><a href="#数乘" class="headerlink" title="数乘"></a>数乘</h3><p>​        定义：数子相乘把每个元素乘以数</p><script type="math/tex; mode=display">k\left [\begin{matrix}1&2&3 \\1&1&1\end{matrix}\right ]+=\left [\begin{matrix}k&2k&3k \\k&k&k\end{matrix}\right ]</script><p>​        这个操作可以反过来：叫提公因子：要求<strong>矩阵所有元素都有公因子，才会往外提一次</strong></p><p>对比的：<strong>一行（列）有公因子就提一次</strong></p><p>1）$k(A+B)=kA+kB$</p><p>2）$(k+l)A=kA+lA$</p><p>3)$k(lA)=(kl)A$</p><h3 id="矩阵的乘法"><a href="#矩阵的乘法" class="headerlink" title="矩阵的乘法"></a>矩阵的乘法</h3><p>​        注意矩阵的乘法要注意的：一个矩阵的行数要等于另一个矩阵的列数！</p><script type="math/tex; mode=display">C(i,j)=A(i,1)×B(1,j)+A(i,2)×B(2,j)+...A(r,1)×B(r,j)</script><p>​        结果就是：</p><p>​        <strong>中间相等，取两边，形状就是A的行B的列的矩阵</strong></p><p>​        注意：</p><p>1）$AB\neq BA$,况且AB有意义，BA不一定有意义！</p><p>2）AB = 0 <strong>无法推理出</strong>：$A = 0$或者$B=0$</p><p>3)$AB=AC,A\neq 0$<strong>推理不出</strong>：$B=C$!</p><p>与单位矩阵相乘等于其本身！</p><p>1）$(AB)C=A(BC)$</p><p>2）$(A+B)C=AC+BC$</p><p>3）$C(A+B)=CA+CB$</p><p>4）$k(AB)=(kA)B=A(kB)$</p><h3 id="矩阵的幂"><a href="#矩阵的幂" class="headerlink" title="矩阵的幂"></a>矩阵的幂</h3><p>​        定义幂的计算是如下的：</p><script type="math/tex; mode=display">A^k = AAA...A</script><p>1)$A^{k_1}A^{k_2}=A^{k_1+k_2}$</p><p>2)$(A^{k_1})^{k_2}=A^{k_1 k_2}$</p><h2 id="特殊矩阵"><a href="#特殊矩阵" class="headerlink" title="特殊矩阵"></a>特殊矩阵</h2><h3 id="数量矩阵"><a href="#数量矩阵" class="headerlink" title="数量矩阵"></a>数量矩阵</h3><script type="math/tex; mode=display">\left\{\begin{matrix}a&0&0&0&0&0\\0&a&0&0&0&0\\0&0&a&0&0&0\\.&.&.&.&.&.\\0&0&0&0&0&a\end{matrix}\right \}=a\left\{\begin{matrix}1&0&0&0&0&0\\0&1&0&0&0&0\\0&0&1&0&0&0\\.&.&.&.&.&.\\0&0&0&0&0&1\end{matrix}\right \}</script><h3 id="对角型矩阵"><a href="#对角型矩阵" class="headerlink" title="对角型矩阵"></a>对角型矩阵</h3><p>​        如果一个矩阵只有对角线的元素非零，那我们简单的写作</p><script type="math/tex; mode=display">diag(a_1,a_2,a_3,...,a_n)</script><h3 id="对称矩阵"><a href="#对称矩阵" class="headerlink" title="对称矩阵"></a>对称矩阵</h3><p>定义满足$a_{ij}=a_{ji}$的矩阵是对称矩阵，其性质是：$A^T=A$</p><p>1)$(A+B)^T=A^T+B^T$</p><p>2)$(kA)^T=kA^T$</p><p>3)$(AB)^T=B^TA^T=BA$</p><h3 id="反对称矩阵"><a href="#反对称矩阵" class="headerlink" title="反对称矩阵"></a>反对称矩阵</h3><p>满足：$a_{ij}=-a_{ji}$且，$a_{ii}=0$的矩阵</p>]]></content>
      
      
      
        <tags>
            
            <tag> Math Works </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT 1</title>
      <link href="/2023/02/28/QT-1/"/>
      <url>/2023/02/28/QT-1/</url>
      
        <content type="html"><![CDATA[<h1 id="QT开发-NEW1"><a href="#QT开发-NEW1" class="headerlink" title="QT开发_NEW1"></a>QT开发_NEW1</h1><p>​        注意创建工程路径的时候不要不要不要整到含有中文的路径！</p><p>​        我们下载了 QT 之后，创建信息之后，会发现有三个类：</p><p>1）QWeidge 作为父类</p><p>2）QMainWindows子类</p><p>3）QDialog子类</p><p>2，3是1的子类</p><p><img src="image-20230228192413374.png" alt="image-20230228192413374"></p><p>​        可以看到，有一个.pro文件，跟VS文件是一样的，他是一个工程文件！</p><p><img src="image-20230228192501749.png" alt="image-20230228192501749"></p><p>​        这是一个工程的目录</p><p>​        先看主要的显示文件：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &quot;widget.h&quot;#include &lt;QApplication&gt; &#x2F;&#x2F; 包含一个应用程序类的文件&#x2F;&#x2F;argc 命令行变量的数量， *argv[] 是命令行变量的数组int main(int argc, char *argv[])&#123;    &#x2F;&#x2F;应用程序对象，再QT中方，应用程序对像只有一个    QApplication a(argc, argv);        &#x2F;&#x2F;窗口对象， widget- 父类 -&gt; QWedget    Widget w;    &#x2F;&#x2F; 显示窗口    w.show();    &#x2F;&#x2F; 让应用程序对象进入消息循环    return a.exec();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        这个循环可以被类比成如下的C程序：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;conio.h&gt;int main()&#123;while(_get() &#x3D;&#x3D; &#39; &#39;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        这里，是点击窗口’ X ‘来关闭！</p><h2 id="看看工程文件"><a href="#看看工程文件" class="headerlink" title="看看工程文件"></a>看看工程文件</h2><p>​        工程文件自身可以在QT里打开：</p><p><img src="image-20230228193538543.png" alt="image-20230228193538543"></p><p>​        点击 1.pro 文件，可以看到如下的内容</p><p><img src="image-20230228193615493.png" alt="image-20230228193615493"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">#<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span># <span class="token comment">//工程创建时间</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">Project created by QtCreator <span class="token number">2023</span><span class="token operator">-</span><span class="token number">02</span><span class="token operator">-</span><span class="token number">28</span>T19<span class="token operator">:</span><span class="token number">15</span><span class="token operator">:</span><span class="token number">11</span></span></span>##<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>QT       <span class="token operator">+=</span> core gui <span class="token comment">// 包含的模块（1）</span><span class="token function">greaterThan</span><span class="token punctuation">(</span>QT_MAJOR_VERSION<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">:</span> QT <span class="token operator">+=</span> widgets <span class="token comment">// 大于这个版本才添加模块</span>TARGET <span class="token operator">=</span> <span class="token number">1</span> <span class="token comment">// 目标 生成的.exe文件的名字（2）不满意名字可以自行更换</span>TEMPLATE <span class="token operator">=</span> app <span class="token comment">//模板</span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">The following define makes your compiler emit warnings <span class="token keyword">if</span> you use</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">any</span> <span class="token expression">feature of Qt which as been marked as <span class="token function">deprecated</span> <span class="token punctuation">(</span>the exact warnings</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">depend</span> <span class="token expression">on your compiler<span class="token punctuation">)</span><span class="token punctuation">.</span> Please consult the documentation of the</span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">deprecated</span> <span class="token expression">API in order to know how to port your code away from it<span class="token punctuation">.</span></span></span>DEFINES <span class="token operator">+=</span> QT_DEPRECATED_WARNINGS<span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">You can also make your code fail to compile <span class="token keyword">if</span> you use deprecated APIs<span class="token punctuation">.</span></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">In order to <span class="token keyword">do</span> so<span class="token punctuation">,</span> uncomment the following line<span class="token punctuation">.</span></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token expression">You can also select to disable deprecated APIs only up to a certain version of Qt<span class="token punctuation">.</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token expression">DEFINES <span class="token operator">+=</span> QT_DISABLE_DEPRECATED_BEFORE<span class="token operator">=</span><span class="token number">0x060000</span>    # disables all the APIs deprecated before Qt <span class="token number">6.0</span><span class="token number">.0</span></span></span>SOURCES <span class="token operator">+=</span> \        main<span class="token punctuation">.</span>cpp \ <span class="token comment">//源文件</span>        widget<span class="token punctuation">.</span>cppHEADERS <span class="token operator">+=</span> \        widget<span class="token punctuation">.</span>h <span class="token comment">// 头文件</span>FORMS <span class="token operator">+=</span> \        widget<span class="token punctuation">.</span>ui<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（1）：</p><p><img src="image-20230228193822499.png" alt="image-20230228193822499"></p><p>（2）那个exe文件在这里：打开你的工程目录，返回上级会发现：</p><p><img src="image-20230228194240791.png" alt="image-20230228194240791"></p><p>点击下面的文件夹</p><p><img src="image-20230228194256086.png" alt="image-20230228194256086"></p><p>点击 debug</p><p><img src="image-20230228194315627.png" alt="image-20230228194315627"></p><p>就在这里的 1.exe</p><h2 id="看看头文件和widget-cpp"><a href="#看看头文件和widget-cpp" class="headerlink" title="看看头文件和widget.cpp"></a>看看头文件和widget.cpp</h2><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#ifndef WIDGET_H#define WIDGET_H#include &lt;QWidget&gt;namespace Ui &#123;class Widget;&#125;class Widget : public QWidget&#123;    Q_OBJECT &#x2F;&#x2F; 允许类中使用信号和槽的宏，不要轻易改动public:    explicit Widget(QWidget *parent &#x3D; 0);&#x2F;&#x2F; 默认构造函数    ~Widget();private:    Ui::Widget *ui;&#125;;#endif &#x2F;&#x2F; WIDGET_H<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &quot;widget.h&quot;#include &quot;ui_widget.h&quot;Widget::Widget(QWidget *parent) :    QWidget(parent),    ui(new Ui::Widget)&#123;    ui-&gt;setupUi(this);&#125;Widget::~Widget()&#123;    delete ui;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p>​        类名：首字母大写，单词与单词之间首字母大写</p><p>​        函数名，变量名称：首字母小写，但单词与单词之间首字母大写</p><p>​        快捷键一览：</p><p>​        注释：ctrl + /</p><p>​        运行：ctrl + r</p><p>​        编译：ctrl + b</p><p>​        查找：ctrl + f</p><p>​        整行移动：ctrl + shift + ↑ 或者 ↓</p><p>​        自动对齐：ctrl + i</p><p>​        同名的.cpp 和 .h: F4</p>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C 工程项目（2）：模拟String</title>
      <link href="/2023/02/26/C-%E5%B7%A5%E7%A8%8B%E9%A1%B9%E7%9B%AE%EF%BC%882%EF%BC%89%EF%BC%9A%E6%A8%A1%E6%8B%9FString/"/>
      <url>/2023/02/26/C-%E5%B7%A5%E7%A8%8B%E9%A1%B9%E7%9B%AE%EF%BC%882%EF%BC%89%EF%BC%9A%E6%A8%A1%E6%8B%9FString/</url>
      
        <content type="html"><![CDATA[<h1 id="MyCString"><a href="#MyCString" class="headerlink" title="MyCString"></a>MyCString</h1><h2 id="课堂摸鱼制作（"><a href="#课堂摸鱼制作（" class="headerlink" title="课堂摸鱼制作（"></a>课堂摸鱼制作（</h2><p>​        这次的小工程是为了还原一些常见的C 字符串功能，以及这是为了可以模拟 C++ string 左准备！</p><h2 id="MyCString-1"><a href="#MyCString-1" class="headerlink" title="MyCString"></a>MyCString</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">once</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token comment">//General Version</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token comment">//Error Defined here</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SHOW_NULL_INPUT_WARNING</span> <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"this string seems to be NULL."</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SHOW_ERROR_MALLOCING_SPACE</span> <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"can not find a space to store the data"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SHOW_INVALID_INPUT</span> <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"cannot accept an invalid input!"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token comment">//Quick set Str's char number</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Mystrlen</span><span class="token expression"><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span></span></span><span class="token comment">//Print in a line by using this abstractions</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SLASHN</span> <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\n"</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token comment">//ErrorCode_String</span><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">_MyStringErrorCode_</span> <span class="token punctuation">&#123;</span>MyString_NULL_INPUT <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>MyString_ERROR_IN_MALLOCING_SPACE <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>MyString_INVALID_INPUT <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>MySting_NORMAL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">&#125;</span>MyStringErrorCode<span class="token punctuation">;</span><span class="token comment">// Main Body and basic structure in str</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">MyString</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span><span class="token operator">*</span> charBuffer<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> current_size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>MyString<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_ComparatorResult_</span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span><span class="token operator">*</span> equal<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> bigger<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> smaller<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ComparatorResult<span class="token punctuation">;</span><span class="token comment">//----------------------------------------------- init a comparator ----------------</span>ComparatorResult<span class="token operator">*</span> <span class="token function">initComparator</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> equal<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> bigger<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> smaller<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//----------------------------------------My_String------------------------------------</span><span class="token comment">// ---------------------------- Init A string -----------------------------------------</span><span class="token comment">// 1. initAString</span><span class="token comment">// by using this, you can init a string by input a ordinary char array</span><span class="token comment">// </span><span class="token comment">// input: char array</span><span class="token comment">// output: MyString* (a pointer to the myString)</span><span class="token comment">// ------------------------------------------------------------------------------------</span><span class="token comment">// 2.copyAString</span><span class="token comment">// by using this , you can copy a MyString as C++ copy init methods!</span><span class="token comment">// </span><span class="token comment">// input: A pointer to MyString</span><span class="token comment">// output: A pointer to MyString</span><span class="token comment">// ------------------------------------------------------------------------------------</span><span class="token comment">// </span>MyString<span class="token operator">*</span> <span class="token function">initAString</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>MyString<span class="token operator">*</span> <span class="token function">copyAString</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyString<span class="token operator">*</span> pCopy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">printString</span><span class="token punctuation">(</span>MyString<span class="token operator">*</span> mine<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">setElemString</span><span class="token punctuation">(</span>MyString<span class="token operator">*</span> be_set_String<span class="token punctuation">,</span> <span class="token keyword">char</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span> place<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">MyStrrev</span><span class="token punctuation">(</span>MyString<span class="token operator">*</span> reverse<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ----------------- Append and Copy -----------------------------</span><span class="token comment">// 1. MyStrCat</span><span class="token comment">// by using this , you can append a str at the end of a string</span><span class="token comment">// </span><span class="token comment">// input : two strings :str1 (as be apeended) &amp;&amp; appenderStr</span><span class="token comment">// output: a str that finishing his work</span><span class="token comment">// </span><span class="token comment">// ---------------------------------------------------------------</span><span class="token comment">// 2. MyStrCpy</span><span class="token comment">// by using this , you can get a copyed one and it will erase the data of the container</span><span class="token comment">// </span><span class="token comment">// input :two strings :str1 (as be apeended) &amp;&amp; copierStr</span><span class="token comment">// output:a str that finishing his work</span><span class="token comment">// </span><span class="token comment">// ----------------------------------------------------------------</span>MyString<span class="token operator">*</span> <span class="token function">MyStrCat</span><span class="token punctuation">(</span>MyString<span class="token operator">*</span> str1<span class="token punctuation">,</span> MyString<span class="token operator">*</span> appenderStr<span class="token punctuation">)</span><span class="token punctuation">;</span>MyString<span class="token operator">*</span> <span class="token function">MyStrCpy</span><span class="token punctuation">(</span>MyString<span class="token operator">*</span> container<span class="token punctuation">,</span> MyString<span class="token operator">*</span> beCopied<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ----------------------------------Compare-----------------------------------</span><span class="token comment">// 1. MyStrCmp</span><span class="token comment">// by using this , you can compare string as strcmp does</span><span class="token comment">// </span><span class="token comment">// input : two strings taht you want to compare</span><span class="token comment">// output: get result</span><span class="token comment">// if str1's ASCII &lt; str2's ASCII then returns 1;</span><span class="token comment">// else if str1's ASCII > str2's ASCII then returns -1;</span><span class="token comment">// else return 0 as equal</span><span class="token comment">// ----------------------------------------------------------------------------</span><span class="token comment">// MyStr_Self_Def_Cmp</span><span class="token comment">// by using this,you can compare string as strcmp does,and return the value you want to return</span><span class="token comment">// </span><span class="token comment">// input : two strings taht you want to compare , as well as the comparator</span><span class="token comment">// output: the things that fits the situation you wants to return</span><span class="token comment">// ----------------------------------------------------------------------------</span><span class="token keyword">int</span> <span class="token function">MyStrCmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyString<span class="token operator">*</span> str1<span class="token punctuation">,</span> <span class="token keyword">const</span> MyString<span class="token operator">*</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">MyStr_Self_Def_Cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyString<span class="token operator">*</span> str1<span class="token punctuation">,</span> <span class="token keyword">const</span> MyString<span class="token operator">*</span> str2<span class="token punctuation">,</span> ComparatorResult<span class="token operator">*</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MyCstring-cpp"><a href="#MyCstring-cpp" class="headerlink" title="MyCstring.cpp"></a>MyCstring.cpp</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token comment">//General Version</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token comment">//Error Defined here</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SHOW_NULL_INPUT_WARNING</span> <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"this string seems to be NULL."</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SHOW_ERROR_MALLOCING_SPACE</span> <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"can not find a space to store the data"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SHOW_INVALID_INPUT</span> <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"cannot accept an invalid input!"</span><span class="token expression"><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token comment">//Quick set Str's char number</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Mystrlen</span><span class="token expression"><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span></span></span><span class="token comment">//Print in a line by using this abstractions</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SLASHN</span> <span class="token expression"><span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"\n"</span><span class="token expression"><span class="token punctuation">)</span></span></span><span class="token comment">//ErrorCode_String</span><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token class-name">_MyStringErrorCode_</span> <span class="token punctuation">&#123;</span>MyString_NULL_INPUT <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>MyString_ERROR_IN_MALLOCING_SPACE <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>MyString_INVALID_INPUT <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>MySting_NORMAL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">&#125;</span>MyStringErrorCode<span class="token punctuation">;</span><span class="token comment">// Main Body and basic structure in str</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">MyString</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span><span class="token operator">*</span> charBuffer<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> current_size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>MyString<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_ComparatorResult_</span> <span class="token punctuation">&#123;</span><span class="token keyword">void</span><span class="token operator">*</span> equal<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> bigger<span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> smaller<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ComparatorResult<span class="token punctuation">;</span><span class="token comment">//----------------------------------------------- init a comparator ----------------</span>ComparatorResult<span class="token operator">*</span> <span class="token function">initComparator</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> equal<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> bigger<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> smaller<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>ComparatorResult<span class="token operator">*</span> proUsableSpace <span class="token operator">=</span> <span class="token punctuation">(</span>ComparatorResult<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ComparatorResult<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>proUsableSpace <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>SHOW_ERROR_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>MyString_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>proUsableSpace<span class="token operator">-></span>bigger <span class="token operator">=</span> bigger<span class="token punctuation">;</span>proUsableSpace<span class="token operator">-></span>smaller <span class="token operator">=</span> smaller<span class="token punctuation">;</span>proUsableSpace<span class="token operator">-></span>equal <span class="token operator">=</span> equal<span class="token punctuation">;</span><span class="token keyword">return</span> proUsableSpace<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//----------------------------------------My_String------------------------------------</span><span class="token comment">// ---------------------------- Init A string -----------------------------------------</span><span class="token comment">// 1. initAString</span><span class="token comment">// by using this, you can init a string by input a ordinary char array</span><span class="token comment">// </span><span class="token comment">// input: char array</span><span class="token comment">// output: MyString* (a pointer to the myString)</span><span class="token comment">// ------------------------------------------------------------------------------------</span><span class="token comment">// 2.copyAString</span><span class="token comment">// by using this , you can copy a MyString as C++ copy init methods!</span><span class="token comment">// </span><span class="token comment">// input: A pointer to MyString</span><span class="token comment">// output: A pointer to MyString</span><span class="token comment">// ------------------------------------------------------------------------------------</span><span class="token comment">// </span>MyString<span class="token operator">*</span> <span class="token function">initAString</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> buffer<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>MyString<span class="token operator">*</span> pstring <span class="token operator">=</span> <span class="token punctuation">(</span>MyString<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MyString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>buffer <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>SHOW_NULL_INPUT_WARNING<span class="token punctuation">;</span>pstring<span class="token operator">-></span>charBuffer <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>pstring<span class="token operator">-></span>current_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">return</span> pstring<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span><span class="token operator">*</span> usableSpace <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>usableSpace <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>SHOW_ERROR_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>MyString_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>usableSpace<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pstring<span class="token operator">-></span>charBuffer <span class="token operator">=</span> usableSpace<span class="token punctuation">;</span>pstring<span class="token operator">-></span>current_size <span class="token operator">=</span> <span class="token function">Mystrlen</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span><span class="token keyword">return</span> pstring<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>MyString<span class="token operator">*</span> <span class="token function">copyAString</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyString<span class="token operator">*</span> pCopy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pCopy <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>SHOW_NULL_INPUT_WARNING<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>MyString_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>MyString<span class="token operator">*</span> pstring <span class="token operator">=</span> <span class="token punctuation">(</span>MyString<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MyString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pCopy<span class="token operator">-></span>charBuffer <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>SHOW_NULL_INPUT_WARNING<span class="token punctuation">;</span>pstring<span class="token operator">-></span>charBuffer <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>pstring<span class="token operator">-></span>current_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">return</span> pstring<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span><span class="token operator">*</span> proUsableSpace <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>pCopy<span class="token operator">-></span>charBuffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>proUsableSpace <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>SHOW_ERROR_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>MyString_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>proUsableSpace<span class="token punctuation">,</span> pCopy<span class="token operator">-></span>charBuffer<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>pCopy<span class="token operator">-></span>charBuffer<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pstring<span class="token operator">-></span>charBuffer <span class="token operator">=</span> proUsableSpace<span class="token punctuation">;</span>pstring<span class="token operator">-></span>current_size <span class="token operator">=</span> pCopy<span class="token operator">-></span>current_size<span class="token punctuation">;</span><span class="token keyword">return</span> pstring<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ---------------------------- Do something -----------------------------------------</span><span class="token comment">// 1. printString</span><span class="token comment">// by using this, you can print a string</span><span class="token comment">// </span><span class="token comment">// input: MyString* that aims to be printed in the control tab</span><span class="token comment">// output: normal statues</span><span class="token comment">// ------------------------------------------------------------------------------------</span><span class="token comment">// 2.setElemString</span><span class="token comment">// by using this , you can set a char into a targeted place</span><span class="token comment">// </span><span class="token comment">// input: A pointer to MyString, your val that want to be inputed, and the place you specify</span><span class="token comment">// output: normal statues</span><span class="token comment">// ------------------------------------------------------------------------------------</span><span class="token comment">// 3. MyStrrev</span><span class="token comment">// by using this, it will help reverse a char array</span><span class="token comment">// </span><span class="token comment">// input :A pointer to MyString</span><span class="token comment">// output: normal statues</span><span class="token comment">// ------------------------------------------------------------------------------------</span><span class="token keyword">void</span> <span class="token function">printString</span><span class="token punctuation">(</span>MyString<span class="token operator">*</span> mine<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mine <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>SHOW_NULL_INPUT_WARNING<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>MyString_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mine<span class="token operator">-></span>current_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> mine<span class="token operator">-></span>charBuffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> MySting_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">setElemString</span><span class="token punctuation">(</span>MyString<span class="token operator">*</span> be_set_String<span class="token punctuation">,</span> <span class="token keyword">char</span> val<span class="token punctuation">,</span><span class="token keyword">int</span> place<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>be_set_String <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>SHOW_NULL_INPUT_WARNING<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>MyString_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>place <span class="token operator">>=</span> be_set_String<span class="token operator">-></span>current_size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>SHOW_INVALID_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>MyString_INVALID_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>be_set_String<span class="token operator">-></span>charBuffer<span class="token punctuation">[</span>place<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span><span class="token keyword">return</span> MySting_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">MyStrrev</span><span class="token punctuation">(</span>MyString<span class="token operator">*</span> reverse<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>reverse <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>SHOW_NULL_INPUT_WARNING<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>MyString_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> reverse<span class="token operator">-></span>current_size <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>temp <span class="token operator">=</span> reverse<span class="token operator">-></span>charBuffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>reverse<span class="token operator">-></span>charBuffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> reverse<span class="token operator">-></span>charBuffer<span class="token punctuation">[</span>reverse<span class="token operator">-></span>current_size <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>reverse<span class="token operator">-></span>charBuffer<span class="token punctuation">[</span>reverse<span class="token operator">-></span>current_size <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// ----------------- Append and Copy -----------------------------</span><span class="token comment">// 1. MyStrCat</span><span class="token comment">// by using this , you can append a str at the end of a string</span><span class="token comment">// </span><span class="token comment">// input : two strings :str1 (as be apeended) &amp;&amp; appenderStr</span><span class="token comment">// output: a str that finishing his work</span><span class="token comment">// </span><span class="token comment">// ---------------------------------------------------------------</span><span class="token comment">// 2. MyStrCpy</span><span class="token comment">// by using this , you can get a copyed one and it will erase the data of the container</span><span class="token comment">// </span><span class="token comment">// input :two strings :str1 (as be apeended) &amp;&amp; copierStr</span><span class="token comment">// output:a str that finishing his work</span><span class="token comment">// </span><span class="token comment">// ----------------------------------------------------------------</span>MyString<span class="token operator">*</span> <span class="token function">MyStrCat</span><span class="token punctuation">(</span>MyString<span class="token operator">*</span> str1<span class="token punctuation">,</span> MyString<span class="token operator">*</span> appenderStr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>appenderStr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>SHOW_NULL_INPUT_WARNING<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No need to append str!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>str1 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span> appenderStr<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>appenderStr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>str1<span class="token operator">-></span>current_size <span class="token operator">=</span> appenderStr<span class="token operator">-></span>current_size<span class="token punctuation">;</span><span class="token keyword">return</span> str1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>str1 <span class="token operator">==</span> appenderStr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">char</span><span class="token operator">*</span> forCopy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str1<span class="token operator">-></span>charBuffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>forCopy <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>SHOW_ERROR_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>MyString_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>forCopy<span class="token punctuation">,</span> str1<span class="token operator">-></span>charBuffer<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str1<span class="token operator">-></span>charBuffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> appenderStr<span class="token operator">-></span>current_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>str1<span class="token operator">-></span>charBuffer<span class="token punctuation">[</span>i <span class="token operator">+</span> str1<span class="token operator">-></span>current_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> appenderStr<span class="token operator">-></span>charBuffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>str1<span class="token operator">-></span>current_size <span class="token operator">=</span> str1<span class="token operator">-></span>current_size <span class="token operator">+</span> appenderStr<span class="token operator">-></span>current_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> str1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span><span class="token operator">*</span> proUsableSpace <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>str1<span class="token operator">-></span>charBuffer<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>str1<span class="token operator">-></span>charBuffer<span class="token punctuation">)</span><span class="token operator">+</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>appenderStr<span class="token operator">-></span>charBuffer<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> appenderStr<span class="token operator">-></span>current_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>str1<span class="token operator">-></span>charBuffer<span class="token punctuation">[</span>i <span class="token operator">+</span> str1<span class="token operator">-></span>current_size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> appenderStr<span class="token operator">-></span>charBuffer<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>str1<span class="token operator">-></span>current_size <span class="token operator">=</span> str1<span class="token operator">-></span>current_size <span class="token operator">+</span> appenderStr<span class="token operator">-></span>current_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">return</span> str1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>MyString<span class="token operator">*</span> <span class="token function">MyStrCpy</span><span class="token punctuation">(</span>MyString<span class="token operator">*</span> container<span class="token punctuation">,</span> MyString<span class="token operator">*</span> beCopied<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>beCopied <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>SHOW_NULL_INPUT_WARNING<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No need to append"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> container<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>container <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>SHOW_NULL_INPUT_WARNING<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Cannot input data into a NULL space"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> container<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span><span class="token operator">*</span> proUsableSpace <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>container<span class="token operator">-></span>charBuffer<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>beCopied<span class="token operator">-></span>charBuffer<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>proUsableSpace <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>SHOW_ERROR_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>MyString_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>container<span class="token operator">-></span>charBuffer<span class="token punctuation">,</span> beCopied<span class="token operator">-></span>charBuffer<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>beCopied<span class="token operator">-></span>charBuffer<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>container<span class="token operator">-></span>current_size <span class="token operator">=</span> beCopied<span class="token operator">-></span>current_size<span class="token punctuation">;</span><span class="token keyword">return</span> container<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// ----------------------------------Compare-----------------------------------</span><span class="token comment">// 1. MyStrCmp</span><span class="token comment">// by using this , you can compare string as strcmp does</span><span class="token comment">// </span><span class="token comment">// input : two strings taht you want to compare</span><span class="token comment">// output: get result</span><span class="token comment">// if str1's ASCII &lt; str2's ASCII then returns 1;</span><span class="token comment">// else if str1's ASCII > str2's ASCII then returns -1;</span><span class="token comment">// else return 0 as equal</span><span class="token comment">// ----------------------------------------------------------------------------</span><span class="token comment">// MyStr_Self_Def_Cmp</span><span class="token comment">// by using this,you can compare string as strcmp does,and return the value you want to return</span><span class="token comment">// </span><span class="token comment">// input : two strings taht you want to compare , as well as the comparator</span><span class="token comment">// output: the things that fits the situation you wants to return</span><span class="token comment">// ----------------------------------------------------------------------------</span><span class="token keyword">int</span> <span class="token function">MyStrCmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyString<span class="token operator">*</span> str1<span class="token punctuation">,</span><span class="token keyword">const</span> MyString<span class="token operator">*</span> str2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>str1 <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> str2 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>SHOW_NULL_INPUT_WARNING<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span><span class="token operator">*</span> CmpStr1 <span class="token operator">=</span> str1<span class="token operator">-></span>charBuffer<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> CmpStr2 <span class="token operator">=</span> str2<span class="token operator">-></span>charBuffer<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>CmpStr1 <span class="token operator">!=</span> <span class="token char">'\0'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>CmpStr2 <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>CmpStr1 <span class="token operator">!=</span> <span class="token operator">*</span>CmpStr2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>CmpStr1 <span class="token operator">-</span> <span class="token operator">*</span>CmpStr2<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>CmpStr2 <span class="token operator">-</span> <span class="token operator">*</span>CmpStr1<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>CmpStr1<span class="token operator">++</span><span class="token punctuation">;</span>CmpStr2<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">MyStr_Self_Def_Cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> MyString<span class="token operator">*</span> str1<span class="token punctuation">,</span> <span class="token keyword">const</span> MyString<span class="token operator">*</span> str2<span class="token punctuation">,</span> ComparatorResult<span class="token operator">*</span> res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>str1 <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> str2 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>SHOW_NULL_INPUT_WARNING<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span><span class="token operator">*</span> CmpStr1 <span class="token operator">=</span> str1<span class="token operator">-></span>charBuffer<span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span> CmpStr2 <span class="token operator">=</span> str2<span class="token operator">-></span>charBuffer<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">*</span>CmpStr1 <span class="token operator">!=</span> <span class="token char">'\0'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>CmpStr2 <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>CmpStr1 <span class="token operator">>=</span> <span class="token operator">*</span>CmpStr2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> res<span class="token operator">-></span>bigger<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>CmpStr1 <span class="token operator">==</span> <span class="token operator">*</span>CmpStr2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> res<span class="token operator">-></span>equal<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> res<span class="token operator">-></span>smaller<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>CmpStr1<span class="token operator">++</span><span class="token punctuation">;</span>CmpStr2<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MyTest-c"><a href="#MyTest-c" class="headerlink" title="MyTest.c"></a>MyTest.c</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"MyString.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// to init a String</span>MyString<span class="token operator">*</span> pInit <span class="token operator">=</span> <span class="token function">initAString</span><span class="token punctuation">(</span><span class="token string">"this is a string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printString</span><span class="token punctuation">(</span>pInit<span class="token punctuation">)</span><span class="token punctuation">;</span>SLASHN<span class="token punctuation">;</span><span class="token comment">// to Copy a String</span>MyString<span class="token operator">*</span> pCopy <span class="token operator">=</span> <span class="token function">copyAString</span><span class="token punctuation">(</span>pInit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printString</span><span class="token punctuation">(</span>pInit<span class="token punctuation">)</span><span class="token punctuation">;</span>SLASHN<span class="token punctuation">;</span><span class="token comment">// to append a str</span>MyString<span class="token operator">*</span> pCat <span class="token operator">=</span> <span class="token function">MyStrCat</span><span class="token punctuation">(</span>pCopy<span class="token punctuation">,</span> pInit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printString</span><span class="token punctuation">(</span>pCat<span class="token punctuation">)</span><span class="token punctuation">;</span>SLASHN<span class="token punctuation">;</span><span class="token comment">//to copy a str just by charbuffer</span>MyString<span class="token operator">*</span> pC2 <span class="token operator">=</span> <span class="token function">initAString</span><span class="token punctuation">(</span><span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printString</span><span class="token punctuation">(</span>pC2<span class="token punctuation">)</span><span class="token punctuation">;</span>SLASHN<span class="token punctuation">;</span><span class="token function">MyStrCpy</span><span class="token punctuation">(</span>pC2<span class="token punctuation">,</span> pInit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printString</span><span class="token punctuation">(</span>pC2<span class="token punctuation">)</span><span class="token punctuation">;</span>SLASHN<span class="token punctuation">;</span><span class="token comment">// to reverse a string</span>MyString<span class="token operator">*</span> prev <span class="token operator">=</span> <span class="token function">initAString</span><span class="token punctuation">(</span><span class="token string">"hello,world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printString</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">MyStrrev</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printString</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// to compare</span>MyString<span class="token operator">*</span> pI <span class="token operator">=</span> <span class="token function">initAString</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MyString<span class="token operator">*</span> pII <span class="token operator">=</span> <span class="token function">initAString</span><span class="token punctuation">(</span><span class="token string">"AB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MyString<span class="token operator">*</span> pIII <span class="token operator">=</span> <span class="token function">initAString</span><span class="token punctuation">(</span><span class="token string">"AC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> t1 <span class="token operator">=</span> <span class="token function">MyStrCmp</span><span class="token punctuation">(</span>pI<span class="token punctuation">,</span> pII<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> t2 <span class="token operator">=</span> <span class="token function">MyStrCmp</span><span class="token punctuation">(</span>pIII<span class="token punctuation">,</span> pII<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> t3 <span class="token operator">=</span> <span class="token function">MyStrCmp</span><span class="token punctuation">(</span>pI<span class="token punctuation">,</span> pI<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C工程项目1： 贪吃蛇项目 v0_0_1</title>
      <link href="/2023/02/21/C%E5%B7%A5%E7%A8%8B%E9%A1%B9%E7%9B%AE1%EF%BC%9A-%E8%B4%AA%E5%90%83%E8%9B%87%E9%A1%B9%E7%9B%AE-v0-0-1/"/>
      <url>/2023/02/21/C%E5%B7%A5%E7%A8%8B%E9%A1%B9%E7%9B%AE1%EF%BC%9A-%E8%B4%AA%E5%90%83%E8%9B%87%E9%A1%B9%E7%9B%AE-v0-0-1/</url>
      
        <content type="html"><![CDATA[<h1 id="贪吃蛇制作详解1"><a href="#贪吃蛇制作详解1" class="headerlink" title="贪吃蛇制作详解1"></a>贪吃蛇制作详解1</h1><h2 id="文档v0-0-1"><a href="#文档v0-0-1" class="headerlink" title="文档v0.0.1"></a>文档v0.0.1</h2><p>​        很有趣的是，这是我制作的第一个 C 语言的小项目，我清楚的记得这是我在逸夫楼第三阶梯花费了3个小时的时间构思+ coding 的，作为一个入门编程的萌新而言，这有点许些不容易，不管怎么说，我还是完成了它！</p><h2 id="基础结构"><a href="#基础结构" class="headerlink" title="基础结构"></a>基础结构</h2><p>​        我们将会使用 EasyX 这个入门的图形库。</p><p>​        描述贪吃蛇这个游戏，那很显然，要有蛇，要有食物，也要有减肥餐（认真）。但是，我们要在一个二维的平面刻画他们的关系，那我们就需要一个二维的平面来刻画这样的关系：</p><p>​        我们当然可以类似 Opencv 里的 Point 类来高仿一个轮子,来刻画一个平面，不如说是一个二维点</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct _PointPlat_&#123;int x;    int y; &#125;PointPlat;&#x2F;&#x2F;允许我使用int而不是double,我们只是用它来给我们的对象刻画位置的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        那么下面，就是刻画工程的主角：蛇了：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct _Snake_&#123;    size_t segmentSize;&#x2F;&#x2F; 蛇的节数    char directions;&#x2F;&#x2F; 蛇的方向    PointPlat segPlace[MAX_SEGMENT];  &#x2F;&#x2F; 蛇的节段坐标数组（懒得动态）&#125;Snake；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        我想这样蛇就OK了</p><p>​        以及我们的两类食物：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct _Food_&#123;    PointPlat foodXY;&#x2F;&#x2F; 食物在哪里    int score;&#x2F;&#x2F; 吃了多少分    bool whetherFoodExist; &#x2F;&#x2F;它现在在吗？我们有必要在下一次循环中来生成一个食物&#125;Food;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        还有一个：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_LoseWeightFood_</span><span class="token punctuation">&#123;</span>    PointPlat loseWeightFoodXY<span class="token punctuation">;</span><span class="token comment">// 食物在哪里</span><span class="token keyword">int</span> score<span class="token punctuation">;</span><span class="token comment">// 吃了多少分</span>bool whetherLWF_Exist<span class="token punctuation">;</span><span class="token comment">//它现在在吗？我们有必要在下一次循环中来生成一个食物</span><span class="token punctuation">&#125;</span>LoseWeightFood<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="开始设计菜单"><a href="#开始设计菜单" class="headerlink" title="开始设计菜单"></a>开始设计菜单</h2><p>​        我们先不搞花里胡哨的，先使用 initgraph 函数（In EaxyX）来生成一个窗口：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">initgraph</span><span class="token punctuation">(</span><span class="token keyword">int</span> Length<span class="token punctuation">,</span> <span class="token keyword">int</span> Height<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        当然，太难看了</p><pre class="line-numbers language-none"><code class="language-none">setbkcolor(RGB(0,0,255));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        生成一个纯蓝背景（先别急，俺也知道不好看哈哈哈）好吧，我们写一个插入图片的版本，</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">IMAGE pic<span class="token punctuation">;</span><span class="token function">loadimage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pic<span class="token punctuation">,</span><span class="token function">_T</span><span class="token punctuation">(</span><span class="token string">"PATH"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">int</span> height<span class="token punctuation">,</span><span class="token keyword">int</span> width<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        设计一个菜单,显然他是一个既不需要输入也不需要输出的函数！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void menu();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        不过，似乎现在没什么需要显示的必要，先空在这里！</p><h2 id="开始放点东西！"><a href="#开始放点东西！" class="headerlink" title="开始放点东西！"></a>开始放点东西！</h2><p>​        我们要开始给我们的窗体布置东西了！我们首先先试着放东西：    </p><h3 id="蛇"><a href="#蛇" class="headerlink" title="蛇"></a>蛇</h3><p>​        我们开始给我们的蛇做一点初始化：</p><p>​        我们的蛇最好是有三个字节：那就是说首先我们的结构体成员变量：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">psnake -&gt; segmentSize &#x3D; 3;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        其次，也有准备初始化相关的坐标：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">psnake-&gt;segPlace[2].x &#x3D; 20;psnake-&gt;segPlace[2].y &#x3D; 0;psnake-&gt;segPlace[1].x &#x3D; 30;psnake-&gt;segPlace[1].y &#x3D; 0;psnake-&gt;segPlace[0].x &#x3D; 40;psnake-&gt;segPlace[0].y &#x3D; 0;&#x2F;&#x2F;他们都是右上角的点的坐标，后面的绘图问题我们将单独引入一个 EaxyX库来绘图<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        最后，蛇当前的方向应该要被制定：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">psnake-&gt;directions &#x3D; Right;&#x2F;&#x2F; temperately this. we will define them later<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        这样我们的初始化就完成了：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void initSnack(Snake* psnake)&#123;psnake-&gt;segPlace[2].x &#x3D; 20;psnake-&gt;segPlace[2].y &#x3D; 0;psnake-&gt;segPlace[1].x &#x3D; 30;psnake-&gt;segPlace[1].y &#x3D; 0;psnake-&gt;segPlace[0].x &#x3D; 40;psnake-&gt;segPlace[0].y &#x3D; 0;psnake -&gt; segmentSize &#x3D; 3;psnake-&gt;directions &#x3D; Right;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="食物与减肥餐"><a href="#食物与减肥餐" class="headerlink" title="食物与减肥餐"></a>食物与减肥餐</h3><p>​        我们还是注意到食物应当是任意出现的，这就涉及到随机库的使用，在C语言中，我们需要手动制定一个随机工厂函数：</p><p>​        以随机返回一个 int 类型的作为一个例子</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">getRandNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> minRange<span class="token punctuation">,</span> <span class="token keyword">int</span> maxRange<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> maxRange <span class="token operator">+</span> minRange<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        扩展以下，如果希望快速产生不一样的随机数，请使用这个模板，因为前者以秒作为刷新单位，后者则是以CPU时间作为基准计算</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">getQuickContiniousRandNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> minRange<span class="token punctuation">,</span> <span class="token keyword">int</span> maxRange<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> maxRange <span class="token operator">+</span> minRange<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        这样，我们就拿到了随机数，可以确定我们生成食物的位置了！</p><p>​        注意到：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">randInitFoodPos</span><span class="token punctuation">(</span>Food<span class="token operator">*</span> pfood<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pfood<span class="token operator">-></span>foodXY<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">650</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">30</span><span class="token punctuation">;</span>pfood<span class="token operator">-></span>foodXY<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">480</span><span class="token punctuation">;</span>pfood<span class="token operator">-></span>whetherFoodExist <span class="token operator">=</span> TRUE<span class="token punctuation">;</span> <span class="token comment">// this row</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">randInitLWFoodPos</span><span class="token punctuation">(</span>LoseWeightFood<span class="token operator">*</span> pLWFood<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pLWFood<span class="token operator">-></span>loseWeightFoodXY<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">650</span><span class="token punctuation">;</span>pLWFood<span class="token operator">-></span>loseWeightFoodXY<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">480</span><span class="token punctuation">;</span>pLWFood<span class="token operator">-></span>whetherLWF_Exist <span class="token operator">=</span> TRUE<span class="token punctuation">;</span> <span class="token comment">// this row</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        我们将在后面阐述为什么设置这个状态栏（剧透：确定是否需要刷新食物）</p><h3 id="绘制"><a href="#绘制" class="headerlink" title="绘制"></a>绘制</h3><p>​        我们的绘制是采用 EasyX 库来完成的！</p><p>​        首先介绍以下窗口幕布：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">initgraph</span><span class="token punctuation">(</span><span class="token keyword">int</span> height<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        这个函数向我们的屏幕投影一个 height 高 weight 宽的一个窗口，显然，是黑色的</p><p><img src="image-20230221111851289.png" alt="image-20230221111851289"></p><p>​        好像不大好看，但是正如前面所讲，我们可以插入一个图片来解决这个问题：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define PATH &quot;&#x2F;*你的图片地址*&#x2F;&quot;loadimage(&amp;pic,_T(PATH),int picHeight,int picWidth);putimage(0, 0, &amp;pic);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        这样就好了！</p><p><img src="image-20230221113213376.png" alt="image-20230221113213376"></p><p>​        随后，让我们来看看画一下蛇和食物！</p><p>​        针对一个一个节段，我们设置，随后使用一个for循环来完成我们的工作就OK了</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">drawSnake</span><span class="token punctuation">(</span>Snake<span class="token operator">*</span> psnake<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> psnake<span class="token operator">-></span>segmentSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">setlinecolor</span><span class="token punctuation">(</span>YELLOW<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//边框色</span><span class="token function">setfillcolor</span><span class="token punctuation">(</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fillrectangle</span><span class="token punctuation">(</span>psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> psnake  <span class="token operator">-></span>segPlace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">drawFood</span><span class="token punctuation">(</span>Food<span class="token operator">*</span> pfood<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">setlinecolor</span><span class="token punctuation">(</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//边框色</span><span class="token function">setfillcolor</span><span class="token punctuation">(</span>YELLOW<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">solidcircle</span><span class="token punctuation">(</span>pfood<span class="token operator">-></span>foodXY<span class="token punctuation">.</span>x<span class="token punctuation">,</span> pfood<span class="token operator">-></span>foodXY<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">drawLWFood</span><span class="token punctuation">(</span>LoseWeightFood<span class="token operator">*</span> LWFood<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">setlinecolor</span><span class="token punctuation">(</span>GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//边框色</span><span class="token function">setfillcolor</span><span class="token punctuation">(</span>GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">solidcircle</span><span class="token punctuation">(</span>LWFood<span class="token operator">-></span>loseWeightFoodXY<span class="token punctuation">.</span>x<span class="token punctuation">,</span> LWFood<span class="token operator">-></span>loseWeightFoodXY<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230221113411612.png" alt="image-20230221113411612"></p><p>​        上图就是把程序放在一起编译运行产生的结果！</p><h2 id="动起来"><a href="#动起来" class="headerlink" title="动起来"></a>动起来</h2><p>​        下面，我们准备开始写游戏的逻辑了</p><h3 id="1-让蛇动起来先"><a href="#1-让蛇动起来先" class="headerlink" title="1.让蛇动起来先"></a>1.让蛇动起来先</h3><p>​        让蛇动起来，这是个难题，因为蛇的运动是要有方向的！我们先不考虑我们如何操纵蛇的移动，因为那需要与键盘直接交互（注意到 scanf 是肯定不可以的！那样的话游戏操作性太差了）</p><p>​        我们使用 For 程式的递归，让一条蛇退化成一节蛇！这样我们就可以把目光放在第一节来处理了！</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pSnake<span class="token operator">-></span>segmentSize <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    pSnake <span class="token operator">-></span> segPlace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> pSnake <span class="token operator">-></span> segPlace<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span>    pSnake <span class="token operator">-></span> segPlace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> pSnake <span class="token operator">-></span> segPlace<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        目光放在第一节来处理了！注意到，如果我们的方向是向右，那么：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (derections &#x3D;&#x3D; RIGHT)&#123;pSnake -&gt; segPlace[0].x +&#x3D; 10;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        我们的蛇的头就向右走，同样的，我们这里是有四个方向的。于是这里使用 switch-case语句比较好</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">switch</span><span class="token punctuation">(</span>pSnake <span class="token operator">-></span> directions<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> RIGHT<span class="token operator">:</span>psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> LEFT<span class="token operator">:</span>psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">-=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> UP<span class="token operator">:</span>psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> DOWN<span class="token operator">:</span>psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">-=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        对于边界的处理，有人判定是到边界直接寄，但是我们这里是直接从另一边出来比较好：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">></span> <span class="token number">640</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">640</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">></span> <span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">480</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="键盘交互"><a href="#键盘交互" class="headerlink" title="键盘交互"></a>键盘交互</h3><p>​        我们的蛇一旦程序跑起来，你会发现他只能一直往一个方向跑路，没办法掉头，这是件不好的事情！那么我们就：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;conio,h></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        来引入我们键盘对控制台的直接交互.使用这个函数:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> getter <span class="token operator">=</span> <span class="token function">_getch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        这样我们就可以直接向程序中输入东西了！了解到我们的蛇不可以掉头，那。。。加个if直接处理掉就好了！ </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">keyReact</span><span class="token punctuation">(</span>Snake<span class="token operator">*</span> psnake<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> key <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>key <span class="token operator">=</span> <span class="token function">_getch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> right<span class="token operator">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>psnake<span class="token operator">-></span>direction <span class="token operator">!=</span> left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>psnake<span class="token operator">-></span>direction <span class="token operator">=</span> right<span class="token punctuation">;</span><span class="token comment">//禁止掉头</span><span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> left<span class="token operator">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>psnake<span class="token operator">-></span>direction <span class="token operator">!=</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>psnake<span class="token operator">-></span>direction <span class="token operator">=</span> left<span class="token punctuation">;</span><span class="token comment">//禁止掉头</span><span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> up<span class="token operator">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>psnake<span class="token operator">-></span>direction <span class="token operator">!=</span> down<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>psnake<span class="token operator">-></span>direction <span class="token operator">=</span> up<span class="token punctuation">;</span><span class="token comment">//禁止掉头</span><span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> down<span class="token operator">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>psnake<span class="token operator">-></span>direction <span class="token operator">!=</span> up<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>psnake<span class="token operator">-></span>direction <span class="token operator">=</span> down<span class="token punctuation">;</span><span class="token comment">//禁止掉头</span><span class="token punctuation">&#125;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        当然，我们查一下键盘上：↑↓←→的ACSII值：在枚举以下就好了：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">enum</span> <span class="token class-name">Directions</span> <span class="token punctuation">&#123;</span>RIGHT <span class="token operator">=</span> <span class="token number">77</span><span class="token punctuation">,</span>LEFT <span class="token operator">=</span> <span class="token number">75</span><span class="token punctuation">,</span>DOWN <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">,</span>UP <span class="token operator">=</span> <span class="token number">72</span><span class="token punctuation">,</span><span class="token comment">//对应keypress</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="恰饭处理"><a href="#恰饭处理" class="headerlink" title="恰饭处理"></a>恰饭处理</h3><p>​        恰饭了！这怎么处理呢？</p><p>​        首先，那必然是蛇的节数要++了：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">psnake<span class="token operator">-></span>segmentSize<span class="token operator">++</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        食物的状态要准备更新了：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">pfood<span class="token operator">-></span>whetherFoodExist <span class="token operator">=</span> false<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        判定的条件是几乎重合：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>   psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">-</span> pfood<span class="token operator">-></span>foodXY<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">-</span> pfood<span class="token operator">-></span>foodXY<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">-</span> pfood<span class="token operator">-></span>foodXY<span class="token punctuation">.</span>x <span class="token operator">></span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">&amp;&amp;</span> psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">-</span> pfood<span class="token operator">-></span>foodXY<span class="token punctuation">.</span>y <span class="token operator">></span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>psnake<span class="token operator">-></span>segmentSize<span class="token operator">++</span><span class="token punctuation">;</span>pfood<span class="token operator">-></span>whetherFoodExist <span class="token operator">=</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        当然想加分的话那就：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>   psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">-</span> pfood<span class="token operator">-></span>foodXY<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">-</span> pfood<span class="token operator">-></span>foodXY<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> <span class="token number">10</span>    <span class="token operator">&amp;&amp;</span> psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">-</span> pfood<span class="token operator">-></span>foodXY<span class="token punctuation">.</span>x <span class="token operator">></span> <span class="token operator">-</span><span class="token number">10</span>     <span class="token operator">&amp;&amp;</span> psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">-</span> pfood<span class="token operator">-></span>foodXY<span class="token punctuation">.</span>y <span class="token operator">></span> <span class="token operator">-</span><span class="token number">10</span>    <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>psnake<span class="token operator">-></span>segmentSize<span class="token operator">++</span><span class="token punctuation">;</span>pfood<span class="token operator">-></span>score <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>pfood<span class="token operator">-></span>whetherFoodExist <span class="token operator">=</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        对于减肥餐那也是一样的：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">eatLWFood</span><span class="token punctuation">(</span>Snake<span class="token operator">*</span> psnake<span class="token punctuation">,</span> LoseWeightFood<span class="token operator">*</span> plossfood<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">-</span> plossfood<span class="token operator">-></span>loseWeightFoodXY<span class="token punctuation">.</span>x<span class="token operator">&lt;</span><span class="token number">10</span> <span class="token operator">&amp;&amp;</span> psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">-</span> plossfood<span class="token operator">-></span>loseWeightFoodXY<span class="token punctuation">.</span>y<span class="token operator">&lt;</span><span class="token number">10</span> <span class="token operator">&amp;&amp;</span> psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">-</span> plossfood<span class="token operator">-></span>loseWeightFoodXY<span class="token punctuation">.</span>x <span class="token operator">></span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">&amp;&amp;</span> psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">-</span> plossfood<span class="token operator">-></span>loseWeightFoodXY<span class="token punctuation">.</span>y <span class="token operator">></span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>psnake<span class="token operator">-></span>segmentSize<span class="token operator">--</span><span class="token punctuation">;</span>plossfood<span class="token operator">-></span>score <span class="token operator">+=</span> <span class="token number">100</span><span class="token punctuation">;</span>plossfood<span class="token operator">-></span>whetherLWF_Exist <span class="token operator">=</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="嗝屁判断"><a href="#嗝屁判断" class="headerlink" title="嗝屁判断"></a>嗝屁判断</h3><p>​        注意，我们的目光滞留在第一个节段，如果第一个节段同其他位置重复了，那就是嗝屁了！</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">deathJudge</span><span class="token punctuation">(</span>Snake<span class="token operator">*</span> psnake<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> psnake<span class="token operator">-></span>segmentSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">==</span> psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">==</span> psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token punctuation">)</span><span class="token comment">//</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> QUIT<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> MOVE_ON<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="主程序架构"><a href="#主程序架构" class="headerlink" title="主程序架构"></a>主程序架构</h2><p>​        积木打好了，准备并结成主程序了！</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"Structure.h"</span></span><span class="token keyword">int</span> judge <span class="token operator">=</span> MOVE_ON<span class="token punctuation">;</span><span class="token keyword">int</span> total_score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//我们的分数</span><span class="token keyword">int</span> input_game_start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//定义速度</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//这里下面说</span>Snake snake1<span class="token punctuation">;</span>Food food1<span class="token punctuation">;</span>LoseWeightFood lossfood1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        我们可以构建起选择蛇速度的程序，因为我们的程序本质上使用while循环来执行，使用Windows库里的Sleep函数可以让程序空余若干秒</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">Sleep(int milisecondTime)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"请输入你想要的速度：>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>input_game_start<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> input <span class="token operator">=</span> <span class="token function">chooseSpeed</span><span class="token punctuation">(</span>input_game_start<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// to prevent the slash n get into the scanner!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        准备对象</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Snake snake1<span class="token punctuation">;</span>Food food1<span class="token punctuation">;</span>LoseWeightFood lossfood1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        为主屏幕的东西设置与初始化</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">randInitFoodPos</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>food1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">randInitLWFoodPos</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lossfood1<span class="token punctuation">)</span><span class="token punctuation">;</span>food1<span class="token punctuation">.</span>whetherFoodExist <span class="token operator">=</span> true<span class="token punctuation">;</span>lossfood1<span class="token punctuation">.</span>whetherLWF_Exist <span class="token operator">=</span> false<span class="token punctuation">;</span><span class="token function">initBackGround</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">cleardevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">initSnake</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>snake1<span class="token punctuation">)</span><span class="token punctuation">;</span>IMAGE pic<span class="token punctuation">;</span><span class="token function">loadimage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pic<span class="token punctuation">,</span> <span class="token function">_T</span><span class="token punctuation">(</span>PATH<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>judge <span class="token operator">==</span> MOVE_ON<span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>          <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        先刷新屏幕，去除上次的东西：</p><p>​        准备放上图片，判断食物有没有，没有就放上！</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">cleardevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putimage</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>food1<span class="token punctuation">.</span>whetherFoodExist<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">randInitFoodPos</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>food1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">drawFood</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>food1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> count <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lossfood1<span class="token punctuation">.</span>whetherLWF_Exist<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">randInitLWFoodPos</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lossfood1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>lossfood1<span class="token punctuation">.</span>whetherLWF_Exist<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">drawLWFood</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lossfood1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        这个count 就是用来描述我们什么时候生成lossFood的！</p><p>​        判断有没有吃到，有没有跟键盘交互：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">eatLWFood</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>snake1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>lossfood1<span class="token punctuation">)</span><span class="token punctuation">;</span>count <span class="token operator">=</span> <span class="token function">eatFood</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>snake1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>food1<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">drawSnake</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>snake1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">_kbhit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">keyReact</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>snake1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        挪动蛇屁股：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">moveSnake</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>snake1<span class="token punctuation">)</span><span class="token punctuation">;</span>judge <span class="token operator">=</span> <span class="token function">deathJudge</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>snake1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Sleep</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>total_score <span class="token operator">=</span> food1<span class="token punctuation">.</span>score <span class="token operator">+</span> lossfood1<span class="token punctuation">.</span>score<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        后续处理：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">closegraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你得到了分数！：%d\n"</span><span class="token punctuation">,</span> food1<span class="token punctuation">.</span>score <span class="token operator">+</span> lossfood1<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"敲击q退出游戏！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> quit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>quit <span class="token operator">!=</span> <span class="token char">'q'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="源文件一览："><a href="#源文件一览：" class="headerlink" title="源文件一览："></a>源文件一览：</h1><h2 id="主程序："><a href="#主程序：" class="headerlink" title="主程序："></a>主程序：</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"Structure.h"</span></span><span class="token keyword">int</span> judge <span class="token operator">=</span> MOVE_ON<span class="token punctuation">;</span><span class="token keyword">int</span> total_score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> input_game_start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>Snake snake1<span class="token punctuation">;</span>Food food1<span class="token punctuation">;</span>LoseWeightFood lossfood1<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"请输入你想要的速度：>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>input_game_start<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> input <span class="token operator">=</span> <span class="token function">chooseSpeed</span><span class="token punctuation">(</span>input_game_start<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">randInitFoodPos</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>food1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">randInitLWFoodPos</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lossfood1<span class="token punctuation">)</span><span class="token punctuation">;</span>food1<span class="token punctuation">.</span>whetherFoodExist <span class="token operator">=</span> true<span class="token punctuation">;</span>lossfood1<span class="token punctuation">.</span>whetherLWF_Exist <span class="token operator">=</span> false<span class="token punctuation">;</span><span class="token function">initBackGround</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">cleardevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">initSnake</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>snake1<span class="token punctuation">)</span><span class="token punctuation">;</span>IMAGE pic<span class="token punctuation">;</span><span class="token function">loadimage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pic<span class="token punctuation">,</span> <span class="token function">_T</span><span class="token punctuation">(</span>PATH<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>judge <span class="token operator">==</span> MOVE_ON<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">cleardevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putimage</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>food1<span class="token punctuation">.</span>whetherFoodExist<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">randInitFoodPos</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>food1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">drawFood</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>food1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> count <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>lossfood1<span class="token punctuation">.</span>whetherLWF_Exist<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">randInitLWFoodPos</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lossfood1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>lossfood1<span class="token punctuation">.</span>whetherLWF_Exist<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">drawLWFood</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lossfood1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">eatLWFood</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>snake1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>lossfood1<span class="token punctuation">)</span><span class="token punctuation">;</span>count <span class="token operator">=</span> <span class="token function">eatFood</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>snake1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>food1<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">drawSnake</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>snake1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">_kbhit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">keyReact</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>snake1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">moveSnake</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>snake1<span class="token punctuation">)</span><span class="token punctuation">;</span>judge <span class="token operator">=</span> <span class="token function">deathJudge</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>snake1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Sleep</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>total_score <span class="token operator">=</span> food1<span class="token punctuation">.</span>score <span class="token operator">+</span> lossfood1<span class="token punctuation">.</span>score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">closegraph</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"你得到了分数！：%d\n"</span><span class="token punctuation">,</span> food1<span class="token punctuation">.</span>score <span class="token operator">+</span> lossfood1<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"敲击q退出游戏！\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> quit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>quit <span class="token operator">!=</span> <span class="token char">'q'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="objbehavior-cpp"><a href="#objbehavior-cpp" class="headerlink" title="objbehavior.cpp"></a>objbehavior.cpp</h2><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define _CRT_SECURE_NO_WARNINGS 1#include&quot;Structure.h&quot;void moveSnake(Snake* psnake)&#123;&#x2F;&#x2F;分批次处理：&#x2F;&#x2F;使用For递归处理2~N节数 的蛇for (int i &#x3D; psnake-&gt;segmentSize - 1; i &gt; 0; i--)&#123;psnake-&gt;segPlace[i].x &#x3D; psnake-&gt;segPlace[i - 1].x;psnake-&gt;segPlace[i].y &#x3D; psnake-&gt;segPlace[i - 1].y;&#125;switch (psnake-&gt;direction)&#123;&#x2F;&#x2F;72上 80下 75左 77右case 77:psnake-&gt;segPlace[0].x +&#x3D; 10; break;case 75:psnake-&gt;segPlace[0].x -&#x3D; 10; break;case 80:psnake-&gt;segPlace[0].y +&#x3D; 10; break;case 72:psnake-&gt;segPlace[0].y -&#x3D; 10; break;default:break;&#125;if (psnake-&gt;segPlace[0].x &gt; 640)&#123;psnake-&gt;segPlace[0].x &#x3D; 0;&#125;if (psnake-&gt;segPlace[0].x &lt; 0)&#123;psnake-&gt;segPlace[0].x &#x3D; 640;&#125;if (psnake-&gt;segPlace[0].y &gt; 480)&#123;psnake-&gt;segPlace[0].y &#x3D; 0;&#125;if (psnake-&gt;segPlace[0].y &lt; 0)&#123;psnake-&gt;segPlace[0].y &#x3D; 480;&#125;&#125;void eatLWFood(Snake* psnake, LoseWeightFood* plossfood)&#123;if (psnake-&gt;segPlace[0].x - plossfood-&gt;loseWeightFoodXY.x&lt;10 &amp;&amp; psnake-&gt;segPlace[0].y - plossfood-&gt;loseWeightFoodXY.y&lt;10 &amp;&amp; psnake-&gt;segPlace[0].x - plossfood-&gt;loseWeightFoodXY.x &gt; -10 &amp;&amp; psnake-&gt;segPlace[0].y - plossfood-&gt;loseWeightFoodXY.y &gt;-10)&#123;psnake-&gt;segmentSize--;plossfood-&gt;score +&#x3D; 100;plossfood-&gt;whetherLWF_Exist &#x3D; false;&#125;&#125;int eatFood(Snake* psnake, Food* pfood, int count)&#123;srand((unsigned)time(NULL));if (psnake-&gt;segPlace[0].x - pfood-&gt;foodXY.x&lt;10 &amp;&amp; psnake-&gt;segPlace[0].y - pfood-&gt;foodXY.y&lt;10 &amp;&amp; psnake-&gt;segPlace[0].x - pfood-&gt;foodXY.x &gt; -10 &amp;&amp; psnake-&gt;segPlace[0].y - pfood-&gt;foodXY.y &gt;-10)&#123;psnake-&gt;segmentSize++;pfood-&gt;score +&#x3D; 10;pfood-&gt;whetherFoodExist &#x3D; false;return count + 1;&#125;&#125;void keyReact(Snake* psnake)&#123;char key &#x3D; 0;key &#x3D; _getch();switch (key)&#123;case RIGHT:if (psnake-&gt;direction !&#x3D; LEFT)&#123;psnake-&gt;direction &#x3D; RIGHT;&#x2F;&#x2F;禁止掉头&#125;break;case LEFT:if (psnake-&gt;direction !&#x3D; RIGHT)&#123;psnake-&gt;direction &#x3D; LEFT;&#x2F;&#x2F;禁止掉头&#125;break;case UP:if (psnake-&gt;direction !&#x3D; DOWN)&#123;psnake-&gt;direction &#x3D; UP;&#x2F;&#x2F;禁止掉头&#125;break;case DOWN:if (psnake-&gt;direction !&#x3D; UP)&#123;psnake-&gt;direction &#x3D; DOWN;&#x2F;&#x2F;禁止掉头&#125;break;default: break;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MENUfunc-cpp"><a href="#MENUfunc-cpp" class="headerlink" title="MENUfunc.cpp"></a>MENUfunc.cpp</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"Structure.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT</span> <span class="token expression"><span class="token number">100</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SLOW</span> <span class="token expression"><span class="token number">50</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FAST</span> <span class="token expression"><span class="token number">20</span>   </span></span><span class="token comment">//MenuFunctions</span><span class="token keyword">void</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"请选择你想要的难度！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"0:正常 1.放慢 2.加速 3.自定义"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"----------------------------------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">chooseSpeed</span><span class="token punctuation">(</span><span class="token keyword">int</span> input<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">return</span> DEFAULT<span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token keyword">return</span> SLOW<span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token keyword">return</span> FAST<span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">return</span> input<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="initgameFunc-cpp"><a href="#initgameFunc-cpp" class="headerlink" title="initgameFunc.cpp"></a>initgameFunc.cpp</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"Structure.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">initBackGround</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>IMAGE pic<span class="token punctuation">;</span><span class="token function">initgraph</span><span class="token punctuation">(</span><span class="token number">640</span><span class="token punctuation">,</span> <span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">loadimage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pic<span class="token punctuation">,</span> <span class="token function">_T</span><span class="token punctuation">(</span><span class="token string">"D:/Clion/default.png"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">640</span><span class="token punctuation">,</span><span class="token number">480</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">putimage</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">initSnake</span><span class="token punctuation">(</span>Snake<span class="token operator">*</span> psnake<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>psnake<span class="token operator">-></span>segmentSize <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>psnake<span class="token operator">-></span>direction <span class="token operator">=</span> RIGHT<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="InitFoodFunc-cpp"><a href="#InitFoodFunc-cpp" class="headerlink" title="InitFoodFunc.cpp"></a>InitFoodFunc.cpp</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"Structure.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">randInitFoodPos</span><span class="token punctuation">(</span>Food<span class="token operator">*</span> pfood<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pfood<span class="token operator">-></span>foodXY<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">650</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">30</span><span class="token punctuation">;</span>pfood<span class="token operator">-></span>foodXY<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">480</span><span class="token punctuation">;</span>pfood<span class="token operator">-></span>whetherFoodExist <span class="token operator">=</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">randInitLWFoodPos</span><span class="token punctuation">(</span>LoseWeightFood<span class="token operator">*</span> pLWFood<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pLWFood<span class="token operator">-></span>loseWeightFoodXY<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">650</span><span class="token punctuation">;</span>pLWFood<span class="token operator">-></span>loseWeightFoodXY<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">480</span><span class="token punctuation">;</span>pLWFood<span class="token operator">-></span>whetherLWF_Exist <span class="token operator">=</span> TRUE<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="draw-cpp"><a href="#draw-cpp" class="headerlink" title="draw.cpp"></a>draw.cpp</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"Structure.h"</span></span><span class="token keyword">void</span> <span class="token function">drawSnake</span><span class="token punctuation">(</span>Snake<span class="token operator">*</span> psnake<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> psnake<span class="token operator">-></span>segmentSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">setlinecolor</span><span class="token punctuation">(</span>YELLOW<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//边框色</span><span class="token function">setfillcolor</span><span class="token punctuation">(</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fillrectangle</span><span class="token punctuation">(</span>psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">,</span> psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">drawFood</span><span class="token punctuation">(</span>Food<span class="token operator">*</span> pfood<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">setlinecolor</span><span class="token punctuation">(</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//边框色</span><span class="token function">setfillcolor</span><span class="token punctuation">(</span>YELLOW<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">solidcircle</span><span class="token punctuation">(</span>pfood<span class="token operator">-></span>foodXY<span class="token punctuation">.</span>x<span class="token punctuation">,</span> pfood<span class="token operator">-></span>foodXY<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">drawLWFood</span><span class="token punctuation">(</span>LoseWeightFood<span class="token operator">*</span> LWFood<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">setlinecolor</span><span class="token punctuation">(</span>GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//边框色</span><span class="token function">setfillcolor</span><span class="token punctuation">(</span>GREEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">solidcircle</span><span class="token punctuation">(</span>LWFood<span class="token operator">-></span>loseWeightFoodXY<span class="token punctuation">.</span>x<span class="token punctuation">,</span> LWFood<span class="token operator">-></span>loseWeightFoodXY<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="deathJugde-cpp"><a href="#deathJugde-cpp" class="headerlink" title="deathJugde.cpp"></a>deathJugde.cpp</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"Structure.h"</span></span><span class="token keyword">int</span> <span class="token function">deathJudge</span><span class="token punctuation">(</span>Snake<span class="token operator">*</span> psnake<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> psnake<span class="token operator">-></span>segmentSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">==</span> psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">==</span> psnake<span class="token operator">-></span>segPlace<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token punctuation">)</span><span class="token comment">//</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> QUIT<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> MOVE_ON<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Structure-h"><a href="#Structure-h" class="headerlink" title="Structure.h"></a>Structure.h</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_SEGMENT</span> <span class="token expression"><span class="token number">256</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;graphics.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;conio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;time.h></span></span><span class="token comment">//config</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">QUIT</span> <span class="token expression"><span class="token number">2</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MOVE_ON</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PATH</span> <span class="token string">"D:/Clion/default.png"</span></span><span class="token comment">//定义二维平面</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_PointPlat_</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>PointPlat<span class="token punctuation">;</span><span class="token comment">//定义蛇这个对象</span><span class="token comment">//</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_Snake_</span> <span class="token punctuation">&#123;</span><span class="token class-name">size_t</span> segmentSize<span class="token punctuation">;</span><span class="token comment">// 定义蛇的节数</span><span class="token keyword">char</span> direction<span class="token punctuation">;</span><span class="token comment">// 定义当前蛇的前进方向</span>PointPlat segPlace<span class="token punctuation">[</span>MAX_SEGMENT<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 定义蛇的段坐标</span><span class="token punctuation">&#125;</span>Snake<span class="token punctuation">;</span><span class="token comment">//食物</span><span class="token comment">//</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_Food_</span> <span class="token punctuation">&#123;</span>PointPlat foodXY<span class="token punctuation">;</span><span class="token keyword">int</span> score<span class="token punctuation">;</span>bool whetherFoodExist<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Food<span class="token punctuation">;</span><span class="token comment">//来点减肥餐</span><span class="token comment">//</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_LoseWeightFood_</span> <span class="token punctuation">&#123;</span>PointPlat loseWeightFoodXY<span class="token punctuation">;</span><span class="token keyword">int</span> score<span class="token punctuation">;</span>bool whetherLWF_Exist<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>LoseWeightFood<span class="token punctuation">;</span><span class="token comment">//定义一下方向</span><span class="token comment">//</span><span class="token keyword">enum</span> <span class="token class-name">Directions</span> <span class="token punctuation">&#123;</span>RIGHT <span class="token operator">=</span> <span class="token number">77</span><span class="token punctuation">,</span>LEFT <span class="token operator">=</span> <span class="token number">75</span><span class="token punctuation">,</span>DOWN <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">,</span>UP <span class="token operator">=</span> <span class="token number">72</span><span class="token punctuation">,</span><span class="token comment">//对应keypress</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//Menu函数</span><span class="token keyword">void</span> <span class="token function">menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">chooseSpeed</span><span class="token punctuation">(</span><span class="token keyword">int</span> input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成食物函数</span><span class="token keyword">void</span> <span class="token function">randInitFoodPos</span><span class="token punctuation">(</span>Food<span class="token operator">*</span> pfood<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">randInitLWFoodPos</span><span class="token punctuation">(</span>LoseWeightFood<span class="token operator">*</span> pLWFood<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成地图函数</span><span class="token keyword">void</span> <span class="token function">initBackGround</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">initSnake</span><span class="token punctuation">(</span>Snake<span class="token operator">*</span> psnake<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//基于EasyX的绘画函数</span><span class="token keyword">void</span> <span class="token function">drawSnake</span><span class="token punctuation">(</span>Snake<span class="token operator">*</span> psnake<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">drawFood</span><span class="token punctuation">(</span>Food<span class="token operator">*</span> pfood<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">drawLWFood</span><span class="token punctuation">(</span>LoseWeightFood<span class="token operator">*</span> LWFood<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对象行为</span><span class="token keyword">void</span> <span class="token function">moveSnake</span><span class="token punctuation">(</span>Snake<span class="token operator">*</span> psnake<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">eatFood</span><span class="token punctuation">(</span>Snake<span class="token operator">*</span> psnake<span class="token punctuation">,</span> Food<span class="token operator">*</span> pfood<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">eatLWFood</span><span class="token punctuation">(</span>Snake<span class="token operator">*</span> psnake<span class="token punctuation">,</span> LoseWeightFood<span class="token operator">*</span> plossfood<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">keyReact</span><span class="token punctuation">(</span>Snake<span class="token operator">*</span> psnake<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//游戏判定</span><span class="token keyword">int</span> <span class="token function">deathJudge</span><span class="token punctuation">(</span>Snake<span class="token operator">*</span> psnake<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Note : 线性代数 （Day 1）</title>
      <link href="/2023/02/20/Note-%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-%EF%BC%88Day-1%EF%BC%89/"/>
      <url>/2023/02/20/Note-%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-%EF%BC%88Day-1%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="线性代数教程II-Day-1"><a href="#线性代数教程II-Day-1" class="headerlink" title="线性代数教程II(Day 1)"></a>线性代数教程II(Day 1)</h1><h2 id="矩阵的概念"><a href="#矩阵的概念" class="headerlink" title="矩阵的概念"></a>矩阵的概念</h2><p>​        1. 我们的矩阵是从线性方程组这里开始考虑的：</p><script type="math/tex; mode=display">\left\{\begin{equation}\begin{aligned}x_1-x_2+2x_3 = 1\\2x_1+3x_2+x_3=2\\x_1-2x_2-3x_3=4\end{aligned}\end{equation}\right.</script><p>​        可以料想到：如果我们去除了方程组的未知变量，仍可以表达出这个方程组：</p><script type="math/tex; mode=display">\left(\begin{matrix}1&-1&2&1\\2&3&1&2\\1&-2&-3&4\end{matrix}\right)</script><p>​        显然，横排为行，竖排为列，这样的一个数表我们起一个另外的名字：矩阵</p><p>​        一个矩阵显然有$m$行$n$列的说法，于是我们称作：这是一个$m\times n$的矩阵</p><script type="math/tex; mode=display">A=(a_{ij}) _{m\times n}</script><p>​        其中$a_{ij}$表达的是元素里第$i$行，第$j$列的元素。如果我们的元素里面全部是实数的话，则称之为实矩阵，否则是复矩阵！</p><p>​        2.<strong>同样的，定义形状一致的矩阵为同型矩阵！</strong></p><p>​        3.矩阵相等的条件是：</p><p>1）矩阵同型</p><p>2）对应元素相等</p><p>​        4.特别的定义到，当矩阵元素全为 0 时是零矩阵，简称 $O$。当 $m = 1$下是行矩阵，当 $n = 1$下是列矩阵！$m = n$ 下是N阶方阵。在N阶方阵中，定义$\{a_{ii}|\{i \in N\}\}$为对角线，而$\{a_{(n-i)i}|\{i \in N\}\}$是副对角线！</p><h2 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h2><p>​        定义 N 行 1 列的向量是列向量，1行 N 列的向量是行向量！。</p><p>​        特别的：对于$0\leq i \leq n$下，若第i个分量是1，其余全为 0 的列向量为<strong>N维基本单位向量</strong></p><script type="math/tex; mode=display">\left(\begin{matrix}1\\0\\0\end{matrix}\right)...etc</script><p>​        他们可以并在一起：构成 N 阶单位矩阵</p><script type="math/tex; mode=display">E=\left(\begin{matrix}1&0&0\\0&1&0\\0&0&1\end{matrix}\right)</script><h2 id="矩阵的运算"><a href="#矩阵的运算" class="headerlink" title="矩阵的运算"></a>矩阵的运算</h2><h3 id="1-定义矩阵的加法是这样的："><a href="#1-定义矩阵的加法是这样的：" class="headerlink" title="1.定义矩阵的加法是这样的："></a>1.定义矩阵的加法是这样的：</h3><p>​        定义两个同型矩阵$(a_{ij})$与$(b_{ij})$        </p><script type="math/tex; mode=display">A+B=(a_{ij}+b_{ij})</script><p>​        这样：</p><script type="math/tex; mode=display">i)A+B=B+A</script><script type="math/tex; mode=display">ii)(A+B)+C=A+(B+C)</script><script type="math/tex; mode=display">iii)A+O=A</script><p>同时负矩阵也可以定义了：</p><script type="math/tex; mode=display">A+(-A)=O</script><h3 id="数乘运算"><a href="#数乘运算" class="headerlink" title="数乘运算"></a>数乘运算</h3><p>​        如果一个属乘上了一个矩阵：</p><script type="math/tex; mode=display">\lambda A = A\lambda=(\lambda a_{ij})</script><p>​        这样，我们就有以下这些规律值得我们的注意了：</p><script type="math/tex; mode=display">1) \lambda(\mu A)=(\lambda\mu)A</script><script type="math/tex; mode=display">2)\lambda (AB) = (\lambda A)B =A (\lambda B)</script><h3 id="矩阵的乘法"><a href="#矩阵的乘法" class="headerlink" title="矩阵的乘法"></a>矩阵的乘法</h3><p>​        下面定义一下矩阵的乘法，注意到，它不是总是成立的：</p><pre class="line-numbers language-none"><code class="language-none">定义A是一个 m 行 n 列的矩阵，而B是一个 n 行 p 列的矩阵，产生的矩阵就是C:yige m 行 p 列的矩阵，并且呢：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script type="math/tex; mode=display">c(ij) = \sum_{k=1}^na_{ik}b_{kj}</script><p>​        显然，这一约束使得我们的乘法交换律不一定成立，换而言之：</p><script type="math/tex; mode=display">AB \neq BA (不一定成立)</script><p>​        但是这些依旧成立，假使他们都有意义的话：</p><script type="math/tex; mode=display">A(BC)=(AB)C</script><h2 id="矩阵的转置"><a href="#矩阵的转置" class="headerlink" title="矩阵的转置"></a>矩阵的转置</h2><p>​        很有趣，我们把矩阵的行元素放到列上，列放到行上，就产生了一个 n $\times$ m 的矩阵</p><script type="math/tex; mode=display">\left(\begin{matrix}1&2&1\\-1&3&-2\\2&1&3\\1&2&4\end{matrix}\right)</script><p>​        就有了如下的性质：</p><script type="math/tex; mode=display">(AB)^T = B^TA^T</script><script type="math/tex; mode=display">(A+B)^T=A^T+B^T\\</script><script type="math/tex; mode=display">(A^T)^T=A</script><h2 id="矩阵的初等变换"><a href="#矩阵的初等变换" class="headerlink" title="矩阵的初等变换"></a>矩阵的初等变换</h2><p>​        矩阵可以进行初等变换，而且有三种合法的方法：</p><pre class="line-numbers language-none"><code class="language-none">1) 用一个非零的数乘以矩阵的某一行（列）2) 矩阵的某一行乘上一个系数加到另一行上去3) 交换矩阵的两行或者是两列<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="初等矩阵"><a href="#初等矩阵" class="headerlink" title="初等矩阵"></a>初等矩阵</h2><p>​        我们的矩阵有时候可以使用一系列初等变换矩阵来表达我们对矩阵的操作，比如说：</p><pre class="line-numbers language-none"><code class="language-none">1) 初等倍法矩阵: P(i[k])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">2) 初等消去矩阵：P(i,j[k])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">3) 初等换法矩阵：P(i,j)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        我们容易验证以下的性质：左乘对矩阵行变换，右乘列变换！</p><p>​        但是注意$P(i,j[k])$中行表达为将 第 j 行的 k 倍加到第 i 行上去，列变换却是：第 i 行的 k 倍加到第 j 行上去。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Math Works </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cmake 简单笔记 （1）</title>
      <link href="/2023/02/16/Cmake-%E7%AE%80%E5%8D%95%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/"/>
      <url>/2023/02/16/Cmake-%E7%AE%80%E5%8D%95%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="简单CMake教程"><a href="#简单CMake教程" class="headerlink" title="简单CMake教程"></a>简单CMake教程</h1><p>​        下面请在 Linux 系统下操作，建议虚拟机！</p><h2 id="干嘛的这个"><a href="#干嘛的这个" class="headerlink" title="干嘛的这个"></a>干嘛的这个</h2><p>​        我们构建程序非常需要这个玩意！使用它来构建比如说VS下的项目！</p><h2 id="怎么下载？"><a href="#怎么下载？" class="headerlink" title="怎么下载？"></a>怎么下载？</h2><p>​        先尝试一个指令：</p><pre class="line-numbers language-none"><code class="language-none">cmake<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        如果出现了这个，那就说明你的Cmake已经装好了！</p><p><img src="image-20230216193703982.png" alt="image-20230216193703982"></p><p>​        如果不是，仔细阅读提示，大概是自己没有安装这个东西：</p><pre class="line-numbers language-none"><code class="language-none">sudo install cmake<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        等一会儿就好了！</p><p>​        为了测试，也自行安装一下 g++ 编译器！</p><pre class="line-numbers language-none"><code class="language-none">sudo install g++<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        方便我们后续的编译。</p><p>​        以及为了方便我们的书写，自然推介 vim 编辑器来干活：</p><pre class="line-numbers language-none"><code class="language-none">sudo install vim&#x2F;&#x2F; 先别急，一般你的linux已经安装好了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="先熟悉一下！"><a href="#先熟悉一下！" class="headerlink" title="先熟悉一下！"></a>先熟悉一下！</h2><p>​        先 cd 到一个工作文件夹吧！</p><p>​        先创建一个文件夹</p><pre class="line-numbers language-none"><code class="language-none">mkdir work<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        进入：</p><pre class="line-numbers language-none"><code class="language-none">cd work<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        直接整一个 main.cpp</p><pre class="line-numbers language-none"><code class="language-none">vim main.cpp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        按 i 来进入编辑模式, copy，请</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;stdio.h&gt;int main()&#123;std::cout&lt;&lt;&quot;Hello Cpp&quot;&lt;&lt;std::endl&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        然后摁 esc 键，输入:wq退出</p><p>​        然后开始入门！</p><pre class="line-numbers language-none"><code class="language-none">vim CMakeLists.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        严格区分大小写！！！！</p><p>​        然后还是 copy ! 先不论这些都是什么东西</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token function">PROJECT</span><span class="token punctuation">(</span>HELLO<span class="token punctuation">)</span><span class="token function">SET</span><span class="token punctuation">(</span>SRC_LIST main.cpp<span class="token punctuation">)</span><span class="token function">MESSAGE</span><span class="token punctuation">(</span>STATUS <span class="token string">"this is binary dir"</span> <span class="token punctuation">$&#123;</span><span class="token variable">HELLO_BINARY_DIR</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">MESSAGE</span><span class="token punctuation">(</span>STATUS <span class="token string">"this is SOURCE dir"</span> <span class="token punctuation">$&#123;</span><span class="token variable">HELLO_SOURCE_DIR</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">ADD_EXECUTABLE</span><span class="token punctuation">(</span>hello <span class="token punctuation">$&#123;</span>SRC_LIST<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        保存一下，还是一样的 esc :wq</p><p>​        然后编译一下，.的意思是在当前目录找CMakeList，在哪个目录下cmake产生的文件就在哪个目录下</p><pre class="line-numbers language-none"><code class="language-none">cmake .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        然后可以运行了：</p><pre class="line-numbers language-none"><code class="language-none">.&#x2F;hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="PROJECT关键字"><a href="#PROJECT关键字" class="headerlink" title="PROJECT关键字"></a>PROJECT关键字</h2><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token function">PROJECT</span> <span class="token punctuation">(</span>HELLO<span class="token punctuation">)</span>   <span class="token comment"># 指定了工程的名字，并且支持所有语言—建议</span><span class="token function">PROJECT</span> <span class="token punctuation">(</span>HELLO CXX<span class="token punctuation">)</span>      <span class="token comment"># 指定了工程的名字，并且支持语言是C++</span><span class="token function">PROJECT</span> <span class="token punctuation">(</span>HELLO C CXX<span class="token punctuation">)</span>    <span class="token comment"># 指定了工程的名字，并且支持语言是C和C++</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        该指定隐式定义了两个CMAKE的变量</p><pre class="line-numbers language-none"><code class="language-none">&lt;projectname&gt;_BINARY_DIR，本例中是 HELLO_BINARY_DIR&lt;projectname&gt;_SOURCE_DIR，本例中是 HELLO_SOURCE_DIR<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        MESSAGE关键字就可以直接使用者两个变量，当前都指向当前的工作目录。</p><p>​        问题：如果改了工程名，这两个变量名也会改变</p><p>​        解决：又定义两个预定义变量：PROJECT_BINARY_DIR和PROJECT_SOURCE_DIR，这两个变量和HELLO_BINARY_DIR，HELLO_SOURCE_DIR是一致的。所以改了工程名也没有关系</p><h2 id="SET关键字"><a href="#SET关键字" class="headerlink" title="SET关键字"></a>SET关键字</h2><p>​        用来显示的指定变量的</p><p>​        SET(SRC_LIST main.cpp)    SRC_LIST变量就包含了main.cpp</p><p>​        也可以 SET(SRC_LIST main.cpp t1.cpp t2.cpp)</p><h2 id="MESSAGE关键字"><a href="#MESSAGE关键字" class="headerlink" title="MESSAGE关键字"></a>MESSAGE关键字</h2><p>​        向终端输出用户自定义的信息</p><p>​        主要包含三种信息：    </p><ul><li>SEND_ERROR，产生错误，生成过程被跳过。</li><li>SATUS，输出前缀为—的信息。</li><li>FATAL_ERROR，立即终止所有 cmake 过程.</li></ul><h2 id="ADD-EXECUTABLE关键字"><a href="#ADD-EXECUTABLE关键字" class="headerlink" title="ADD_EXECUTABLE关键字"></a>ADD_EXECUTABLE关键字</h2><p>​        生成可执行文件</p><p>​        ADD_EXECUTABLE(hello ${SRC_LIST})     生成的可执行文件名是hello，源文件读取变量SRC_LIST中的内容</p><p>​        也可以直接写 ADD_EXECUTABLE(hello main.cpp)</p><p>​        上述例子可以简化的写成</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token function">PROJECT</span><span class="token punctuation">(</span>HELLO<span class="token punctuation">)</span><span class="token function">ADD_EXECUTABLE</span><span class="token punctuation">(</span>hello main.cpp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        注意：工程名的 HELLO 和生成的可执行文件 hello 是没有任何关系的</p><h2 id="语法的基本原则"><a href="#语法的基本原则" class="headerlink" title="语法的基本原则"></a>语法的基本原则</h2><p>​        1. 变量使用 ${} 方式取值，但是在 IF 控制语句中是直接使用变量名</p><p>​        2.</p><ul><li>指令(参数 1 参数 2…) 参数使用括弧括起，参数之间使用空格或分号分开。 以上面的 ADD_EXECUTABLE 指令为例，</li><li>如果存在另外一个 func.cpp 源文件，就要写成：</li><li><code>ADD_EXECUTABLE(hello main.cpp func.cpp)</code>或者<code>ADD_EXECUTABLE(hello main.cpp;func.cpp)</code></li><li>指令是大小写无关的，参数和变量是大小写相关的。但，推荐你全部使用大写指令</li><li>指令是大小写无关的，参数和变量是大小写相关的。</li></ul><h2 id="语法注意事项"><a href="#语法注意事项" class="headerlink" title="语法注意事项"></a>语法注意事项</h2><ul><li>SET(SRC_LIST main.cpp) 可以写成 SET(SRC_LIST “main.cpp”)，如果源文件名中含有空格，就必须要加双引号</li><li>ADD_EXECUTABLE(hello main) 后缀可以不行，他会自动去找.c和.cpp，最好不要这样写，可能会有这两个文件main.cpp和main</li></ul><h2 id="内部构建和外部构建"><a href="#内部构建和外部构建" class="headerlink" title="内部构建和外部构建"></a>内部构建和外部构建</h2><ul><li><p>我们刚刚讲的例子就是内部构建，他生产的临时文件特别多，不方便清理</p><p><img src="image-20230216202047986.png" alt="image-20230216202047986"></p><p>​        一大堆文件混在一起</p></li><li><p>外部构建，就会把生成的临时文件放在build目录下，不会对源文件有任何影响强烈使用外部构建方式</p></li></ul><p>​        首先</p><pre class="line-numbers language-none"><code class="language-none">mkdir buildcd build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        然后</p><pre class="line-numbers language-none"><code class="language-none">cmake .. # 在上两级编译<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        现在干净了：（查看时cd ..）</p><p><img src="image-20230216202644656.png" alt="image-20230216202644656"></p><p>​        (记得再cd回去)</p><pre class="line-numbers language-none"><code class="language-none">make.&#x2F;hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        总结一下：</p><p>1、建立一个build目录，可以在任何地方，建议在当前目录下</p><p>2、进入build，运行cmake ..    当然..表示上一级目录，你可以写CMakeLists.txt所在的绝对路径，生产的文件都在build目录下了</p><p>3、在build目录下，运行make来构建工程</p><p>​        注意外部构建的两个变量</p><p>1、HELLO_SOURCE_DIR  还是工程路径</p><p>2、HELLO_BINARY_DIR   编译路径 也就是 /root/cmake/bulid</p><h2 id="让Hello-World看起来更像一个工程"><a href="#让Hello-World看起来更像一个工程" class="headerlink" title="让Hello World看起来更像一个工程"></a>让Hello World看起来更像一个工程</h2><ul><li>为工程添加一个子目录 src，用来放置工程源代码</li><li>添加一个子目录 doc，用来放置这个工程的文档 hello.txt</li><li>在工程目录添加文本文件 COPYRIGHT, README</li><li>在工程目录添加一个 <a href="http://runhello.sh/">runhello.sh</a> 脚本，用来调用 hello 二进制</li><li>将构建后的目标文件放入构建目录的 bin 子目录</li><li>将 doc 目录 的内容以及 COPYRIGHT/README 安装到/usr/share/doc/cmake/</li></ul><p>每个目录下都要有一个CMakeLists.txt说明</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span>root@localhost cmake<span class="token punctuation">]</span># tree<span class="token punctuation">.</span>├── build├── CMakeLists<span class="token punctuation">.</span>txt└── src    ├── CMakeLists<span class="token punctuation">.</span>txt    └── main<span class="token punctuation">.</span>cpp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>外层CMakeLists.txt</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">PROJECT</span><span class="token punctuation">(</span>HELLO<span class="token punctuation">)</span><span class="token function">ADD_SUBDIRECTORY</span><span class="token punctuation">(</span>src bin<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>src下的CMakeLists.txt</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">ADD_EXECUTABLE</span><span class="token punctuation">(</span>hello main<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        可执行文件在 bin 下面</p><h2 id="ADD-SUBDIRECTORY-指令"><a href="#ADD-SUBDIRECTORY-指令" class="headerlink" title="ADD_SUBDIRECTORY 指令"></a>ADD_SUBDIRECTORY 指令</h2><p>ADD_SUBDIRECTORY(source_dir [binary_dir] [EXCLUDE_FROM_ALL])</p><ul><li><p>这个指令用于向当前工程添加存放源文件的子目录，并可以指定中间二进制和目标二进制存放的位置</p></li><li><p>EXCLUDE_FROM_ALL函数是将写的目录从编译中排除，如程序中的example</p></li><li><p>ADD_SUBDIRECTORY(src bin)</p><p>将 src 子目录加入工程并指定编译输出(包含编译中间结果)路径为bin 目录</p><p>如果不进行 bin 目录的指定，那么编译结果(包括中间结果)都将存放在build/src 目录</p></li></ul><h2 id="更改二进制的保存路径"><a href="#更改二进制的保存路径" class="headerlink" title="更改二进制的保存路径"></a>更改二进制的保存路径</h2><p>SET 指令重新定义 EXECUTABLE_OUTPUT_PATH 和 LIBRARY_OUTPUT_PATH 变量 来指定最终的目标二进制的位置</p><p>SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)<br>SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)</p><p>哪里要改变目标存放路径，就在哪里加入上述的定义，所以应该在src下的CMakeLists.txt下写</p><h2 id="如何安装HelloWord"><a href="#如何安装HelloWord" class="headerlink" title="如何安装HelloWord"></a>如何安装HelloWord</h2><p>​        使用CMAKE一个新的指令：INSTALL</p><p>​        INSTALL的安装可以包括：二进制、动态库、静态库以及文件、目录、脚本等</p><p>​        使用CMAKE一个新的变量：CMAKE_INSTALL_PREFIX</p><h2 id="安装文件COPYRIGHT和README"><a href="#安装文件COPYRIGHT和README" class="headerlink" title="安装文件COPYRIGHT和README"></a>安装文件COPYRIGHT和README</h2><p>INSTALL(FILES COPYRIGHT README DESTINATION share/doc/cmake/)</p><p>FILES：文件</p><p>DESTINATION：</p><p>1、写绝对路径</p><p>2、可以写相对路径，相对路径实际路径是：${CMAKE_INSTALL_PREFIX}/<DESTINATION 定义的路径></p><p>CMAKE_INSTALL_PREFIX  默认是在 /usr/local/</p><p>cmake -DCMAKE_INSTALL_PREFIX=/usr    在cmake的时候指定CMAKE_INSTALL_PREFIX变量的路径</p><h2 id="安装脚本runhello-sh"><a href="#安装脚本runhello-sh" class="headerlink" title="安装脚本runhello.sh"></a>安装脚本runhello.sh</h2><p>PROGRAMS：非目标文件的可执行程序安装(比如脚本之类)</p><p>INSTALL(PROGRAMS runhello.sh DESTINATION bin)</p><p>说明：实际安装到的是 /usr/bin</p><p>使用: make install 安装东西</p><pre class="line-numbers language-none"><code class="language-none">sudo make install<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装-doc-中的-hello-txt"><a href="#安装-doc-中的-hello-txt" class="headerlink" title="安装 doc 中的 hello.txt"></a>安装 doc 中的 hello.txt</h2><ul><li><p>一、是通过在 doc 目录建立CMakeLists.txt ，通过install下的file</p></li><li><p>二、是直接在工程目录通过</p><p>INSTALL(DIRECTORY doc/ DESTINATION share/doc/cmake)</p></li></ul><p>DIRECTORY 后面连接的是所在 Source 目录的相对路径</p><p>注意：abc 和 abc/有很大的区别</p><p>目录名不以/结尾：这个目录将被安装为目标路径下的</p><p>目录名以/结尾：将这个目录中的内容安装到目标路径</p><h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><p>cmake ..</p><p>make</p><p>make install</p><h2 id="静态库和动态库的构建"><a href="#静态库和动态库的构建" class="headerlink" title="静态库和动态库的构建"></a>静态库和动态库的构建</h2><p>静态库和动态库的区别</p><ul><li><p>静态库的扩展名一般为“.a”或“.lib”；动态库的扩展名一般为“.so”或“.dll”。</p></li><li><p>静态库在编译时会直接整合到目标程序中，编译成功的可执行文件可独立运行</p></li><li><p>动态库在编译时不会放到连接的目标程序中，即可执行文件无法单独运行。</p><h2 id="构建实例"><a href="#构建实例" class="headerlink" title="构建实例"></a>构建实例</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span>root@localhost cmake2<span class="token punctuation">]</span># tree<span class="token punctuation">.</span>├── build├── CMakeLists<span class="token punctuation">.</span>txt└── lib    ├── CMakeLists<span class="token punctuation">.</span>txt    ├── hello<span class="token punctuation">.</span>cpp    └── hello<span class="token punctuation">.</span>h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>hello.h中的内容</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">HELLO_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Hello_H</span></span><span class="token keyword">void</span> <span class="token function">HelloFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>hello.cpp中的内容</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"hello.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">void</span> <span class="token function">HelloFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello World"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>项目中的cmake内容</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">PROJECT</span><span class="token punctuation">(</span>HELLO<span class="token punctuation">)</span><span class="token function">ADD_SUBDIRECTORY</span><span class="token punctuation">(</span>lib bin<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>lib中CMakeLists.txt中的内容</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">SET</span><span class="token punctuation">(</span>LIBHELLO_SRC hello<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span><span class="token function">ADD_LIBRARY</span><span class="token punctuation">(</span>hello SHARED $<span class="token punctuation">&#123;</span>LIBHELLO_SRC<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="ADD-LIBRARY"><a href="#ADD-LIBRARY" class="headerlink" title="ADD_LIBRARY"></a>ADD_LIBRARY</h3><p>ADD_LIBRARY(hello SHARED ${LIBHELLO_SRC})</p><ul><li>hello：就是正常的库名，生成的名字前面会加上lib，最终产生的文件是libhello.so</li><li>SHARED，动态库    STATIC，静态库</li><li>${LIBHELLO_SRC} ：源文件</li></ul><h3 id="同时构建静态和动态库"><a href="#同时构建静态和动态库" class="headerlink" title="同时构建静态和动态库"></a>同时构建静态和动态库</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 如果用这种方式，只会构建一个动态库，不会构建出静态库，虽然静态库的后缀是.a</span><span class="token function">ADD_LIBRARY</span><span class="token punctuation">(</span>hello SHARED $<span class="token punctuation">&#123;</span>LIBHELLO_SRC<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">ADD_LIBRARY</span><span class="token punctuation">(</span>hello STATIC $<span class="token punctuation">&#123;</span>LIBHELLO_SRC<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 修改静态库的名字，这样是可以的，但是我们往往希望他们的名字是相同的，只是后缀不同而已</span><span class="token function">ADD_LIBRARY</span><span class="token punctuation">(</span>hello SHARED $<span class="token punctuation">&#123;</span>LIBHELLO_SRC<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">ADD_LIBRARY</span><span class="token punctuation">(</span>hello_static STATIC $<span class="token punctuation">&#123;</span>LIBHELLO_SRC<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="SET-TARGET-PROPERTIES"><a href="#SET-TARGET-PROPERTIES" class="headerlink" title="SET_TARGET_PROPERTIES"></a>SET_TARGET_PROPERTIES</h3><p>这条指令可以用来设置输出的名称，对于动态库，还可以用来指定动态库版本和 API 版本</p><p>同时构建静态和动态库</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">SET</span><span class="token punctuation">(</span>LIBHELLO_SRC hello<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span><span class="token function">ADD_LIBRARY</span><span class="token punctuation">(</span>hello_static STATIC $<span class="token punctuation">&#123;</span>LIBHELLO_SRC<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">//对hello_static的重名为hello</span><span class="token function">SET_TARGET_PROPERTIES</span><span class="token punctuation">(</span>hello_static PROPERTIES  OUTPUT_NAME <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token comment">//cmake 在构建一个新的target 时，会尝试清理掉其他使用这个名字的库，因为，在构建 libhello.so 时， 就会清理掉 libhello.a</span><span class="token function">SET_TARGET_PROPERTIES</span><span class="token punctuation">(</span>hello_static PROPERTIES CLEAN_DIRECT_OUTPUT <span class="token number">1</span><span class="token punctuation">)</span><span class="token function">ADD_LIBRARY</span><span class="token punctuation">(</span>hello SHARED $<span class="token punctuation">&#123;</span>LIBHELLO_SRC<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">SET_TARGET_PROPERTIES</span><span class="token punctuation">(</span>hello PROPERTIES  OUTPUT_NAME <span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token function">SET_TARGET_PROPERTIES</span><span class="token punctuation">(</span>hello PROPERTIES CLEAN_DIRECT_OUTPUT <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="动态库的版本号"><a href="#动态库的版本号" class="headerlink" title="动态库的版本号"></a>动态库的版本号</h2><p>一般动态库都有一个版本号的关联</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">libhello<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">1.2</span>libhello<span class="token punctuation">.</span>so <span class="token operator">-></span>libhello<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">1</span>libhello<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">-></span>libhello<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">1.2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>CMakeLists.txt 插入如下</p><p><code>SET_TARGET_PROPERTIES(hello PROPERTIES VERSION 1.2 SOVERSION 1)</code></p><p>VERSION 指代动态库版本，SOVERSION 指代 API 版本。</p><h2 id="安装共享库和头文件"><a href="#安装共享库和头文件" class="headerlink" title="安装共享库和头文件"></a>安装共享库和头文件</h2><p>我们将 hello 的共享库安装到<prefix>/lib目录，</p><p>将 hello.h 安装到<prefix>/include/hello 目录</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//文件放到该目录下</span><span class="token function">INSTALL</span><span class="token punctuation">(</span>FILES hello<span class="token punctuation">.</span>h DESTINATION include<span class="token operator">/</span>hello<span class="token punctuation">)</span><span class="token comment">//二进制，静态库，动态库安装都用TARGETS</span><span class="token comment">//ARCHIVE 特指静态库，LIBRARY 特指动态库，RUNTIME 特指可执行目标二进制。</span><span class="token function">INSTALL</span><span class="token punctuation">(</span>TARGETS hello hello_static LIBRARY DESTINATION lib ARCHIVE DESTINATION lib<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><p>安装的时候，指定一下路径，放到系统下</p><p><code>cmake -DCMAKE_INSTALL_PREFIX=/usr ..</code></p><h2 id="使用外部共享库和头文件"><a href="#使用外部共享库和头文件" class="headerlink" title="使用外部共享库和头文件"></a>使用外部共享库和头文件</h2><p>准备工作，新建一个目录来使用外部共享库和头文件</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span>root@MiWiFi<span class="token operator">-</span>R4CM<span class="token operator">-</span>srv cmake3<span class="token punctuation">]</span># tree<span class="token punctuation">.</span>├── build├── CMakeLists<span class="token punctuation">.</span>txt└── src    ├── CMakeLists<span class="token punctuation">.</span>txt    └── main<span class="token punctuation">.</span>cpp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.cpp</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;hello.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">HelloFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解决：make后头文件找不到的问题"><a href="#解决：make后头文件找不到的问题" class="headerlink" title="解决：make后头文件找不到的问题"></a>解决：make后头文件找不到的问题</h2><p>PS：include <hello/hello.h>  这样include是可以，这么做的话，就没啥好讲的了</p><p>关键字：INCLUDE_DIRECTORIES    这条指令可以用来向工程添加多个特定的头文件搜索路径，路径之间用空格分割</p><p>在CMakeLists.txt中加入头文件搜索路径</p><p>INCLUDE_DIRECTORIES(/usr/include/hello)</p><h2 id="解决：找到引用的函数问题"><a href="#解决：找到引用的函数问题" class="headerlink" title="解决：找到引用的函数问题"></a>解决：找到引用的函数问题</h2><p>报错信息：undefined reference to `HelloFunc()’</p><p>关键字：LINK_DIRECTORIES     添加非标准的共享库搜索路径</p><p>指定第三方库所在路径，LINK_DIRECTORIES(/home/myproject/libs)</p><p>关键字：TARGET_LINK_LIBRARIES    添加需要链接的共享库</p><p>TARGET_LINK_LIBRARIES的时候，只需要给出动态链接库的名字就行了。</p><p>在CMakeLists.txt中插入链接共享库，主要要插在executable的后面</p><p>查看main的链接情况</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span>root@MiWiFi<span class="token operator">-</span>R4CM<span class="token operator">-</span>srv bin<span class="token punctuation">]</span># ldd main linux<span class="token operator">-</span>vdso<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">1</span> <span class="token operator">=</span><span class="token operator">></span>  <span class="token punctuation">(</span><span class="token number">0x00007ffedfda4000</span><span class="token punctuation">)</span>libhello<span class="token punctuation">.</span>so <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">/</span>lib64<span class="token operator">/</span>libhello<span class="token punctuation">.</span><span class="token function">so</span> <span class="token punctuation">(</span><span class="token number">0x00007f41c0d8f000</span><span class="token punctuation">)</span>libstdc<span class="token operator">++</span><span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">6</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">/</span>lib64<span class="token operator">/</span>libstdc<span class="token operator">++</span><span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">6</span> <span class="token punctuation">(</span><span class="token number">0x00007f41c0874000</span><span class="token punctuation">)</span>libm<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">6</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">/</span>lib64<span class="token operator">/</span>libm<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">6</span> <span class="token punctuation">(</span><span class="token number">0x00007f41c0572000</span><span class="token punctuation">)</span>libgcc_s<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">1</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">/</span>lib64<span class="token operator">/</span>libgcc_s<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">1</span> <span class="token punctuation">(</span><span class="token number">0x00007f41c035c000</span><span class="token punctuation">)</span>libc<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">6</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">/</span>lib64<span class="token operator">/</span>libc<span class="token punctuation">.</span>so<span class="token punctuation">.</span><span class="token number">6</span> <span class="token punctuation">(</span><span class="token number">0x00007f41bff8e000</span><span class="token punctuation">)</span><span class="token operator">/</span>lib64<span class="token operator">/</span>ld<span class="token operator">-</span>linux<span class="token operator">-</span>x86<span class="token operator">-</span><span class="token number">64.</span>so<span class="token punctuation">.</span><span class="token number">2</span> <span class="token punctuation">(</span><span class="token number">0x00007f41c0b7c000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>链接静态库</p><p><code>TARGET_LINK_LIBRARIES(main libhello.a)</code></p><h2 id="特殊的环境变量-CMAKE-INCLUDE-PATH-和-CMAKE-LIBRARY-PATH"><a href="#特殊的环境变量-CMAKE-INCLUDE-PATH-和-CMAKE-LIBRARY-PATH" class="headerlink" title="特殊的环境变量 CMAKE_INCLUDE_PATH 和 CMAKE_LIBRARY_PATH"></a>特殊的环境变量 CMAKE_INCLUDE_PATH 和 CMAKE_LIBRARY_PATH</h2><p>注意：这两个是环境变量而不是 cmake 变量，可以在linux的bash中进行设置</p><p>我们上面例子中使用了绝对路径INCLUDE_DIRECTORIES(/usr/include/hello)来指明include路径的位置</p><p>我们还可以使用另外一种方式，使用环境变量export CMAKE_INCLUDE_PATH=/usr/include/hello</p><p>补充：生产debug版本的方法：<br>cmake .. -DCMAKE_BUILD_TYPE=debug</p><h2 id="For-Lessons"><a href="#For-Lessons" class="headerlink" title="For Lessons:"></a>For Lessons:</h2><p><a href="https://www.bilibili.com/video/BV1vR4y1u77h?p=4&amp;vd_source=7756b1d353ef340c2ab91e80642a8922">从零开始详细介绍CMake</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Cmake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言数据结构 （2） 单链表API详解</title>
      <link href="/2023/02/15/C%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A8%A1%E6%8B%9F%EF%BC%882%EF%BC%89%E5%8D%95%E9%93%BE%E8%A1%A8API%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/02/15/C%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A8%A1%E6%8B%9F%EF%BC%882%EF%BC%89%E5%8D%95%E9%93%BE%E8%A1%A8API%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言经典单链表API详解"><a href="#C语言经典单链表API详解" class="headerlink" title="C语言经典单链表API详解"></a>C语言经典单链表API详解</h1><h2 id="数据结构一览"><a href="#数据结构一览" class="headerlink" title="数据结构一览"></a>数据结构一览</h2><p>​        具体的源码位置在这里！：<a href="https://github.com/Charliechen114514/Tiny-C-C-standard-Library/tree/C/classicLinkList">click here</a></p><p>​        这一次，我们开发的是链表这个数据结构，基础的链表分为单链表，双链表和循环链表。作为链表，他不同之处在于，我们的数据存储是离散的！就是说，我们的一串数据不一定是在内存上连续，我们的逻辑结构依靠指针来维护：</p><p><img src="image-20230215132846697.png" alt="image-20230215132846697"></p><p>​        可以看到，我们使用指针来访问数据！为了方便我们的维护，那当然是一个抽象成一个链子串起了若干的节点，这就在直观上需要两个数据结构：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct _DataNode_&#123;    void* data;&#x2F;&#x2F; 数据域    struct _DataNode_* pNext;&#x2F;&#x2F; 指针域&#125;DataNode;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        而在一般的教程中是如下定义的：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct _DataNode_&#123;    void* data;&#x2F;&#x2F; 数据域    struct _DataNode_* pNext;&#x2F;&#x2F; 指针域&#125;DataNode,*Datalist;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        这里我并不这样做，这是为了可读性与方便维护的优点。为了增添属性，我们以加入该链表存在的元素个数作为附属属性：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct _DataList_&#123;DataNode* head;    size_t current_num;&#125;DataList;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        于是，现在我们开始维护与开发相关的操作函数！</p><h2 id="链表权威导论"><a href="#链表权威导论" class="headerlink" title="链表权威导论"></a>链表权威导论</h2><p>​        链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。<strong>每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。</strong> 相比于线性表顺序结构，操作复杂。<strong>由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而线性表和顺序表相应的时间复杂度分别是O(logn)和O(1)。</strong></p><p>​        使用链表结构可以克服数组链表需要预先知道数据大小的缺点，<strong>链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。链表最明显的好处就是，常规数组排列关联项目的方式可能不同于这些数据项目在记忆体或磁盘上顺序，数据的存取往往要在不同的排列顺序中转换。链表允许插入和移除表上任意位置上的节点，但是不允许随机存取。</strong></p><h2 id="基本导入"><a href="#基本导入" class="headerlink" title="基本导入"></a>基本导入</h2><h3 id="1）预先功能启用与宏定义"><a href="#1）预先功能启用与宏定义" class="headerlink" title="1）预先功能启用与宏定义"></a>1）预先功能启用与宏定义</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define _CRT_SECURE_NO_WARNINGS 1 &#x2F;&#x2F; 取消非安全警报#defineOPENUPPOSARR 1&#x2F;&#x2F; 启用动态位置查询存储数组#define OPENUPDEFAULTSIZE 1 &#x2F;&#x2F; 启用默认快捷大小宏#define OPENQUICKMALLOC 1 &#x2F;&#x2F; 启用快捷开辟堆内存宏<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2）头文件使用"><a href="#2）头文件使用" class="headerlink" title="2）头文件使用"></a>2）头文件使用</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;string.h&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3）错误码一览"><a href="#3）错误码一览" class="headerlink" title="3）错误码一览"></a>3）错误码一览</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;Error Code Meaning&#x2F;&#x2F;Program Normally run till the end return NORMAL as 0&#x2F;&#x2F;When Error in mallocing Space the program return 1&#x2F;&#x2F;when inputing a NULL we returns -1&#x2F;&#x2F;when inputing a invalid input we returns -2&#x2F;&#x2F;Locations UnFind we returns -3 typedef enum _ClassicLinkListFunctionStatues_ &#123;ClassicLinkList_NORMAL&#x3D;0,ClassicLinkList_ERROR_IN_MALLOCING_SPACE &#x3D; 1,ClassicLinkList_NULL_INPUT &#x3D; -1,ClassicLinkList_Invalid_Input&#x3D;-2,ClassicLinkList_UnFind&#x3D;-3,ClassicLinkList_Invalid_Free&#x3D;-4,&#125;ClassicLinkListFunctionStatues;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4）自定义我们的布尔类型"><a href="#4）自定义我们的布尔类型" class="headerlink" title="4）自定义我们的布尔类型"></a>4）自定义我们的布尔类型</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;MyBool Defined here!&#x2F;&#x2F;typedef enum _bool_ &#123;True &#x3D; 1,False &#x3D; 0&#125;Bool;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5）报错机制与参数调整宏"><a href="#5）报错机制与参数调整宏" class="headerlink" title="5）报错机制与参数调整宏"></a>5）报错机制与参数调整宏</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;This is some abstractions using in reminding you some basic informations and errors!&#x2F;&#x2F;#define SHOW_ERROR_ClassicLinkList_NULL_INPUT printf(&quot;\nSorry! Your input NULL!\n&quot;)#define SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE printf(&quot;\nSorry!Failed to malloc space for your data\n&quot;)#define SHOW_ERROR_ClassicLinkList_Invalid_Input printf(&quot;\nYour input invalid, reject to run functions\n&quot;)#define SHOW_ERROR_ClassicLinkList_UnFind printf(&quot;\nPositions unfind!\n&quot;)#define SHOW_ERROR_ClassicLinkList_Invalid_Free printf(&quot;\nFree the invalid space,reject to run the functions\n&quot;)#define SHOW_WARNING_ClassicLinkList_SWAPPED_POS printf(&quot;Warning! the front_pos is bigger then the final pos\n Do you agreed swap them?&quot;)#define SHOW_WARNING_ClassicLinkList_OVERLAP_POS printf(&quot;Considered as your insertion_input is overlapped!\n set pos as the cur_size?&quot;)&#x2F;&#x2F;this abstractions is used to define the aquisition of whether the program&#39;s decison is acceptable,&#x2F;&#x2F;X is the message string!&#x2F;&#x2F;#define SHOW_WHETHER_ACCCEPTED(X) printf(X)&#x2F;&#x2F;If wanted flashed a newline you can use it! &#x2F;&#x2F;#define SLASHN printf(&quot;\n&quot;)&#x2F;&#x2F;used in MergeclassicLinkList&#x2F;&#x2F;If accepted copy ！ Do write ClassicLinkList_ACCEPTED_COPY#define ClassicLinkList_ACCEPTED_COPY 1#define ClassicLinkList_NO_COPY0#define Unfind_ClassicLinkList -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6）位置查询结果枚举"><a href="#6）位置查询结果枚举" class="headerlink" title="6）位置查询结果枚举"></a>6）位置查询结果枚举</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;Used in whether the targeted elements is found&#x2F;&#x2F;If is considered found, just use Find , otherwise unfind!typedef enum _ClassicLinkList_isFind_ &#123;Find &#x3D; 1,Unfind &#x3D; 0&#125;ClassicLinkList_isFind;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7）更好的打印开启枚举"><a href="#7）更好的打印开启枚举" class="headerlink" title="7）更好的打印开启枚举"></a>7）更好的打印开启枚举</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;Used in whether print data in ClassicLinkList better&#x2F;&#x2F;Use ClassicLinkList_OPEN if you want a better printtypedef enum _BetterPrintSwitch_for_ClassicLinkList_ &#123;ClassicLinkList_OPEN &#x3D; 1,ClassicLinkList_CLOSE &#x3D; 0&#125;BetterPrintSwitch_for_ClassicLinkList;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8）一些类型的重改写"><a href="#8）一些类型的重改写" class="headerlink" title="8）一些类型的重改写"></a>8）一些类型的重改写</h3><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef unsigned int Is_Used_Compared_Int;typedef void(*MyPrint)(void*);typedef void* (*Do_Specific_Change)(void*);typedef Is_Used_Compared_Int(*CompareFunc)(void*, void*);typedef Is_Used_Compared_Int(*LocateFunc)(void*, void*);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9）默认大小宏"><a href="#9）默认大小宏" class="headerlink" title="9）默认大小宏"></a>9）默认大小宏</h3><p>注意，希望关闭默认大小快捷宏请移除宏</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OPENUPDEFAULTSIZE</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Dyarr_SIGINT</span> <span class="token expression"><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Dyarr_SIGCHAR</span> <span class="token expression"><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Dyarr_SIGFLOAT</span> <span class="token expression"><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">Dyarr_SIGDOUBLE</span> <span class="token expression"><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Dyarr_SIG</span><span class="token expression"><span class="token punctuation">(</span>dataType<span class="token punctuation">)</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dataType<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Dyarr_INT_SIZE</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>X</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Dyarr_CHAR_SIZE</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span>X</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Dyarr_FLOAT_SIZE</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token operator">*</span>X</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Dyarr_DOUBLE_SIZE</span><span class="token expression"><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token operator">*</span>X</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">Dyarr_TYPE_SIZE</span><span class="token expression"><span class="token punctuation">(</span>dataType<span class="token punctuation">,</span>X<span class="token punctuation">)</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dataType<span class="token punctuation">)</span><span class="token operator">*</span>X</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10）快速开辟"><a href="#10）快速开辟" class="headerlink" title="10）快速开辟"></a>10）快速开辟</h3><p>注意，希望关闭快速开辟宏请移除宏</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OPENQUICKMALLOC</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MALLOC</span><span class="token expression"><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">(</span>type<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">MALLOCN</span><span class="token expression"><span class="token punctuation">(</span>type<span class="token punctuation">,</span>ElemNum<span class="token punctuation">)</span> <span class="token punctuation">(</span>type<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token operator">*</span>ElemNum<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11）动态存储位置"><a href="#11）动态存储位置" class="headerlink" title="11）动态存储位置"></a>11）动态存储位置</h3><p>更加详细的API请参考“C语言结构：动态数组API详解”这篇文章</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;-----------------------Position_Stored_Dynamic_Array_For_Dyarr---------------------------------&#x2F;&#x2F;About Position_Stored_Dynamic_Array_Func&#x2F;&#x2F;Create A Position_Stored_Dynamic_Array! Can init it in this way:&#x2F;&#x2F;&gt;&gt;Position_Stored_Dynamic_ArrayFordyarr* Name&#x3D;Init_A_Postion_Stored_Dynamic_ArrayFordyarr();&#x2F;&#x2F;Used in returning multitude locations#if OPENUPPOSARR&#x2F;&#x2F;Main data structure!&#x2F;&#x2F;Used in returning multitude locationstypedef struct _Dyarrposarr_ &#123;int* posSpace;size_t pos_size;&#125;Position_Stored_Dynamic_ArrayFordyarr;&#x2F;&#x2F;Want a better Print to beutify your control table? try this onetypedef enum _BetterPrintSwitch_for_pos_dyarr_ &#123;PSDA_dyarr_OPEN &#x3D; 1,PSDA_dyarr_CLOSE &#x3D; 0&#125;BetterPrintSwitch_for_pos_dyarr;&#x2F;&#x2F;can use this type when indicating the typetypedef unsigned int BetterPrintfor_PosDyarr;&#x2F;&#x2F;About Position_Stored_Dynamic_Array_Func&#x2F;&#x2F;Create A Position_Stored_Dynamic_Array! Can init it in this way:&#x2F;&#x2F;&gt;&gt;Position_Stored_Dynamic_ArrayFordyarr* Name&#x3D;Init_A_Postion_Stored_Dynamic_ArrayFordyarr();Position_Stored_Dynamic_ArrayFordyarr* Init_A_Postion_Stored_Dynamic_ArrayFordyarr()&#123;Position_Stored_Dynamic_ArrayFordyarr* pro_usable_space &#x3D; (Position_Stored_Dynamic_ArrayFordyarr*)malloc(sizeof(Position_Stored_Dynamic_ArrayFordyarr));if (!pro_usable_space)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;pro_usable_space-&gt;posSpace &#x3D; NULL;pro_usable_space-&gt;pos_size &#x3D; 0;return pro_usable_space;&#125;&#x2F;&#x2F;About Positions_Stored_Dynamic_Array&#x2F;&#x2F;this function is aimed to output a series of locations that is stored in the pos&#x2F;&#x2F;&#x2F;&#x2F;Use PSDA_dyarr_OPEN to have a better shown ,else use PSDA_dyarr_CLOSEClassicLinkListFunctionStatues Show_All_Locations_In_PSDAfor_dyarr(Position_Stored_Dynamic_ArrayFordyarr*posarr,BetterPrintfor_PosDyarrWhether_Better_Print)&#123;if (!posarr)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;if (Whether_Better_Print &#x3D;&#x3D; PSDA_dyarr_OPEN)printf(&quot;\nPositions are shown! :\n&quot;);for (int i &#x3D; 0; i &lt; posarr-&gt;pos_size; i++)printf(&quot;%u &quot;, posarr-&gt;posSpace[i]);if (Whether_Better_Print &#x3D;&#x3D; PSDA_dyarr_OPEN)printf(&quot;\nFinish Printing!\n&quot;);return ClassicLinkList_NORMAL;&#125;&#x2F;&#x2F;About Positions_Stored_Dynamic_ArrayClassicLinkListFunctionStatues Push_back_a_locations_in_PSDA_dyarr(Position_Stored_Dynamic_ArrayFordyarr*posarr, intpos_acquired)&#123;int* pro_usable_space &#x3D; (int*)realloc(posarr-&gt;posSpace, sizeof(int) * (posarr-&gt;pos_size + 1));if (!pro_usable_space)&#123;SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE;exit(ClassicLinkList_ERROR_IN_MALLOCING_SPACE);&#125;posarr-&gt;posSpace &#x3D; pro_usable_space;posarr-&gt;posSpace[posarr-&gt;pos_size] &#x3D; pos_acquired;posarr-&gt;pos_size++;return ClassicLinkList_NORMAL;&#125;&#x2F;&#x2F;About Positions_Stored_Dynamic_Array&#x2F;&#x2F;this function is aimed to return the number of locations&#x2F;&#x2F;Use PSDA_dyarr_OPEN to have a better shown ,else use PSDA_dyarr_CLOSEsize_t Get_pos_size_From_PSDA_for_dyarr(Position_Stored_Dynamic_ArrayFordyarr*posarr, BetterPrintfor_PosDyarrWhether_Shown_Print)&#123;if (!posarr)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;if (Whether_Shown_Print &#x3D;&#x3D; PSDA_dyarr_OPEN)printf(&quot;\nCurrent targeted data&#39;s total num is:%u!\n&quot;, posarr-&gt;pos_size);return posarr-&gt;pos_size;&#125;&#x2F;&#x2F;About Positions_Stored_Dynamic_Array&#x2F;&#x2F;return a pos that is targeted!&#x2F;&#x2F;void* getPosbyPosinPSDA(Position_Stored_Dynamic_ArrayFordyarr* getter,size_tpos)&#123;if (!getter) &#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;if (pos &gt; getter-&gt;pos_size)&#123;SHOW_ERROR_ClassicLinkList_Invalid_Input;exit(ClassicLinkList_Invalid_Input);&#125;for (int i &#x3D; 0; i &lt; pos; i++)return (char*)getter-&gt;posSpace + i * sizeof(size_t);&#125;&#x2F;&#x2F;About Positions_Stored_Dynamic_ArrayClassicLinkListFunctionStatues DesTroy_A_PSDA_for_dyarr(Position_Stored_Dynamic_ArrayFordyarr*pointer_to_wishedfreeposarr)&#123;if (!pointer_to_wishedfreeposarr)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;free(pointer_to_wishedfreeposarr-&gt;posSpace);free(pointer_to_wishedfreeposarr);pointer_to_wishedfreeposarr &#x3D; NULL;return ClassicLinkList_NORMAL;&#125;#endif &#x2F;&#x2F; OPENUPPOSARR<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="核心API-1：工程函数"><a href="#核心API-1：工程函数" class="headerlink" title="核心API 1：工程函数"></a>核心API 1：工程函数</h2><p>​        我们的工厂函数依旧是老三样：默认，拷贝和升级！</p><p>​        这里是源文件文档内的注释：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;----------------------------Init-functions---------------------------&#x2F;&#x2F; &#x2F;&#x2F; there are three basic type of initialization&#x2F;&#x2F; &#x2F;&#x2F; --------------------------------------------------------------------&#x2F;&#x2F; 1.includeing the default type (init a NULL head and zero cur_size)&#x2F;&#x2F; func1: Classic_DataList* Init_A_ClassicLinkList()&#x2F;&#x2F; &#x2F;&#x2F; No input , or input VOID&#x2F;&#x2F; have output : output a clssicLinklist pointer&#x2F;&#x2F; --------------------------------------------------------------------&#x2F;&#x2F; 2.includeing the copy one (init the same type of the be-copied one)&#x2F;&#x2F; func2: Classic_DataList* Init_A_ClassicLinkList_By_CopyAClassicLinkList&#x2F;&#x2F; &#x2F;&#x2F; input : a required_be_copied list .&#x2F;&#x2F; output: a new list but have is the same as the be_copied list&#x2F;&#x2F; --------------------------------------------------------------------&#x2F;&#x2F; 3.includeing to transform the static array to the linklist one&#x2F;&#x2F; func3: Classic_DataList* UpdateStaticArray2ClassicLinkList&#x2F;&#x2F; &#x2F;&#x2F; input : a waited_transformed static_array , the element size which is in the static array &#x2F;&#x2F; output: a new pointer that points to classicLinkList&#x2F;&#x2F; &#x2F;&#x2F; &#x2F;&#x2F;----------------------------Init-functions---------------------------<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="默认工厂函数"><a href="#默认工厂函数" class="headerlink" title="默认工厂函数"></a>默认工厂函数</h3><p>​        由于我们定义了一个全新的结构：链表！我们就希望，先什么都不放！换而言之：<code>head</code>是空的，而<code>current_size</code>也是0！同时，使用 malloc 构造出来这个结构并且传出一个指针来供外界托管与使用：</p><p>​        原型这样就出来了：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Classic_DataList<span class="token operator">*</span> <span class="token function">Init_A_ClassicLinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        开辟堆空间：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// create empty space</span>Classic_DataList<span class="token operator">*</span> pro_usable_space <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        我们当然最好是检查一下有没有开辟成功</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// Check whether init succeeded</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pro_usable_space<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        开辟成功了那就自然开始默认设置</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// Default set </span>pro_usable_space<span class="token operator">-></span>Head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>pro_usable_space<span class="token operator">-></span>current_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// return out the Structure</span><span class="token keyword">return</span> pro_usable_space<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        连起来就是如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Classic_DataList<span class="token operator">*</span> <span class="token function">Init_A_ClassicLinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// create empty space</span>Classic_DataList<span class="token operator">*</span> pro_usable_space <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Check whether init succeeded</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pro_usable_space<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Default set </span>pro_usable_space<span class="token operator">-></span>Head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>pro_usable_space<span class="token operator">-></span>current_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// return out the Structure</span><span class="token keyword">return</span> pro_usable_space<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="拷贝工厂函数"><a href="#拷贝工厂函数" class="headerlink" title="拷贝工厂函数"></a>拷贝工厂函数</h2><p>​        这个函数顾名思义就可以写出原型：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Classic_DataList<span class="token operator">*</span> <span class="token function">Init_A_ClassicLinkList_By_CopyAClassicLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        这个就有意思了，我们的想法是简答的，我们选择两个指针从链表里走，什么意思呢？</p><p><img src="image-20230215135759176.png" alt="image-20230215135759176"></p><p>​        然后，我们开始拷贝被拷贝链表的结点：</p><p><img src="image-20230215135902169.png" alt="image-20230215135902169"></p><p>​        然后，指针连上：顺便进入新的拷贝节点！周而复始直到被拷贝链表指向 NULL</p><p>​        做一点简单判断：让空的或者是非法的指针先排除</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//check whether the input is legal</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//check whether there is neccessity to copy </span><span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token operator">-></span>current_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No need to copy! it hasn't been initialize yet!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Used to return NULL , but it is dangerous that two pointers points one things </span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        然后，拷贝头节点，做一点简单的初始化（不调用其他工厂函数，尽可能在一个函数完成事情，减少链接丢失带来的失败的风险）！</p><p>​        我们拷贝数据，是要拷贝节点框架+节点数据：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//New a List and new a head and new the data of the head</span><span class="token comment">// 产生一个链表</span>Classic_DataList<span class="token operator">*</span> p_NewList <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 产生一个头节点准备入列</span>Classic_DataNode<span class="token operator">*</span> newHead <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 头节点数据拷贝一份</span><span class="token keyword">void</span><span class="token operator">*</span> newdata <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>list<span class="token operator">-></span>Head<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        数据拷贝检查：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//check whether we init the node successfully</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newdata <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        数据拷贝</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//Do copy the data to the new head and finished initialization</span><span class="token comment">//拷贝节点数据</span><span class="token function">memcpy</span><span class="token punctuation">(</span>newdata<span class="token punctuation">,</span> list<span class="token operator">-></span>Head<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>list<span class="token operator">-></span>Head<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//指针托管</span>newHead<span class="token operator">-></span>data <span class="token operator">=</span> newdata<span class="token punctuation">;</span><span class="token comment">//防止野指针或者多进程解引用带来野指针访问</span>newHead<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>p_NewList<span class="token operator">-></span>Head <span class="token operator">=</span> newHead<span class="token punctuation">;</span>p_NewList<span class="token operator">-></span>current_size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        这样，我们可以开始拷贝其他的节点了，正如上文所说，准备两个节点指针：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//Start copy other nodes</span>Classic_DataNode<span class="token operator">*</span> p_Currency <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> pCurCopy <span class="token operator">=</span> p_NewList<span class="token operator">-></span>Head<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        类似的重复拷贝头节点的工作：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token operator">-></span>current_size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment">//注意是cur - 1 !</span><span class="token punctuation">&#123;</span><span class="token comment">//Copy the I-th node</span>Classic_DataNode<span class="token operator">*</span> newDataNode <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//check if the initialization is illegal</span><span class="token keyword">if</span><span class="token punctuation">(</span>newDataNode<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// prepare to copy data from the current node</span><span class="token keyword">void</span><span class="token operator">*</span> newdata <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>p_Currency<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// check if the initialization is illegal</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newdata <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//copy the detailed node</span><span class="token function">memcpy</span><span class="token punctuation">(</span>newdata<span class="token punctuation">,</span> p_Currency<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p_Currency<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newDataNode<span class="token operator">-></span>data <span class="token operator">=</span> newdata<span class="token punctuation">;</span>newDataNode<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//Moving the pointer and prepared next copy</span>pCurCopy<span class="token operator">-></span>p_next_one <span class="token operator">=</span> newDataNode<span class="token punctuation">;</span>pCurCopy <span class="token operator">=</span> pCurCopy<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>p_Currency <span class="token operator">=</span> p_Currency<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        链表的属性完善以下，返回指针以便托管</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//Data copy finished , init the cur_size</span>p_NewList<span class="token operator">-></span>current_size <span class="token operator">=</span> list<span class="token operator">-></span>current_size<span class="token punctuation">;</span><span class="token keyword">return</span> p_NewList<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        连起来看一下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// About ClassicLinkList</span><span class="token comment">// to copy an already exited linklist</span><span class="token comment">// Classic_DataList* List = Init_A_ClassicLinkList_By_CopyAClassicLinkList(Classic_DataList* list) </span><span class="token comment">//</span>Classic_DataList<span class="token operator">*</span> <span class="token function">Init_A_ClassicLinkList_By_CopyAClassicLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//check whether the input is legal</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//check whether there is neccessity to copy </span><span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token operator">-></span>current_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No need to copy! it hasn't been initialize yet!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Used to return NULL , but it is dangerous that two pointers points one things </span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//New a List and new a head and new the data of the head</span>Classic_DataList<span class="token operator">*</span> p_NewList <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> newHead <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> newdata <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>list<span class="token operator">-></span>Head<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//check whether we init the node successfully</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newdata <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Do copy the data to the new head and finished initialization</span><span class="token function">memcpy</span><span class="token punctuation">(</span>newdata<span class="token punctuation">,</span> list<span class="token operator">-></span>Head<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>list<span class="token operator">-></span>Head<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newHead<span class="token operator">-></span>data <span class="token operator">=</span> newdata<span class="token punctuation">;</span>newHead<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>p_NewList<span class="token operator">-></span>Head <span class="token operator">=</span> newHead<span class="token punctuation">;</span>p_NewList<span class="token operator">-></span>current_size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//Start copy other nodes</span>Classic_DataNode<span class="token operator">*</span> p_Currency <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> pCurCopy <span class="token operator">=</span> p_NewList<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token operator">-></span>current_size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//Copy the I-th node</span>Classic_DataNode<span class="token operator">*</span> newDataNode <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//check if the initialization is illegal</span><span class="token keyword">if</span><span class="token punctuation">(</span>newDataNode<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// prepare to copy data from the current node</span><span class="token keyword">void</span><span class="token operator">*</span> newdata <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>p_Currency<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// check if the initialization is illegal</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newdata <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//copy the detailed node</span><span class="token function">memcpy</span><span class="token punctuation">(</span>newdata<span class="token punctuation">,</span> p_Currency<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p_Currency<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newDataNode<span class="token operator">-></span>data <span class="token operator">=</span> newdata<span class="token punctuation">;</span>newDataNode<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//Moving the pointer and prepared next copy</span>pCurCopy<span class="token operator">-></span>p_next_one <span class="token operator">=</span> newDataNode<span class="token punctuation">;</span>pCurCopy <span class="token operator">=</span> pCurCopy<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>p_Currency <span class="token operator">=</span> p_Currency<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Data copy finished , init the cur_size</span>p_NewList<span class="token operator">-></span>current_size <span class="token operator">=</span> list<span class="token operator">-></span>current_size<span class="token punctuation">;</span><span class="token keyword">return</span> p_NewList<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="升级工厂函数"><a href="#升级工厂函数" class="headerlink" title="升级工厂函数"></a>升级工厂函数</h3><p>​        现在我们把一个数组的元素拆开，存入链表里，那么，每一个元素都作为一个节点穿进绳子里！于是：</p><p>​        函数首先就需要数组的地址，和元素的大小以及元素个数！</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Classic_DataList<span class="token operator">*</span> <span class="token function">UpdateStaticArray2ClassicLinkList</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span>inputArray<span class="token punctuation">,</span> <span class="token class-name">size_t</span>dataSize<span class="token punctuation">,</span> <span class="token class-name">size_t</span>dataNum<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        接下来，判断是不是空指针：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>inputArray <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        初始化头节点：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Classic_DataList<span class="token operator">*</span> pro_usable_space <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> FirstHeaddata <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> datapiece <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pro_usable_space <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>FirstHeaddata <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>datapiece <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>datapiece<span class="token punctuation">,</span> inputArray<span class="token punctuation">,</span> dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span>FirstHeaddata<span class="token operator">-></span>data <span class="token operator">=</span> datapiece<span class="token punctuation">;</span>FirstHeaddata<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>pro_usable_space<span class="token operator">-></span>current_size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>pro_usable_space<span class="token operator">-></span>Head <span class="token operator">=</span> FirstHeaddata<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        相似的，但是拷贝节点是通过访问数组的地址来拷贝的：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dataNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Classic_DataNode<span class="token operator">*</span> p_Currency <span class="token operator">=</span> pro_usable_space<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p_Currency<span class="token operator">-></span>p_next_one<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p_Currency <span class="token operator">=</span> p_Currency<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> datastored <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>datastored<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>datastored<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>inputArray <span class="token operator">+</span> i <span class="token operator">*</span> dataSize<span class="token punctuation">,</span> dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> datanode <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>datanode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>datanode<span class="token operator">-></span>data <span class="token operator">=</span> datastored<span class="token punctuation">;</span>datanode<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>p_Currency<span class="token operator">-></span>p_next_one <span class="token operator">=</span> datanode<span class="token punctuation">;</span>pro_usable_space<span class="token operator">-></span>current_size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> pro_usable_space<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="工厂函数一览"><a href="#工厂函数一览" class="headerlink" title="工厂函数一览"></a>工厂函数一览</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//----------------------------Init-functions--------------------------------------------------------------------</span><span class="token comment">// </span><span class="token comment">// there are three basic type of initialization</span><span class="token comment">// </span><span class="token comment">// ------------------------------------------------------------------------------------------------------------</span><span class="token comment">// 1.includeing the default type (init a NULL head and zero cur_size)</span><span class="token comment">// func1: Classic_DataList* Init_A_ClassicLinkList()</span><span class="token comment">// </span><span class="token comment">// No input , or input VOID</span><span class="token comment">// have output : output a clssicLinklist pointer</span><span class="token comment">// -------------------------------------------------------------------------------------------------------------</span><span class="token comment">// 2.includeing the copy one (init the same type of the be-copied one)</span><span class="token comment">// func2: Classic_DataList* Init_A_ClassicLinkList_By_CopyAClassicLinkList</span><span class="token comment">// </span><span class="token comment">// input : a required_be_copied list .</span><span class="token comment">// output: a new list but have is the same as the be_copied list</span><span class="token comment">// -------------------------------------------------------------------------------------------------------------</span><span class="token comment">// 3.includeing to transform the static array to the linklist one</span><span class="token comment">// func3: Classic_DataList* UpdateStaticArray2ClassicLinkList</span><span class="token comment">// </span><span class="token comment">// input : a waited_transformed static_array , the element size which is in the static array </span><span class="token comment">// output: a new pointer that points to classicLinkList</span><span class="token comment">// </span><span class="token comment">// </span><span class="token comment">//----------------------------Init-functions--------------------------------------------------------------------</span><span class="token comment">// About ClassicLinkList</span><span class="token comment">// This function is used to init a default type of classicLinkList</span><span class="token comment">// that the head of dataPiece is NULL and the cur_size is zero.</span><span class="token comment">// Use push back to init the dataPiece</span><span class="token comment">// use in this Way: </span><span class="token comment">// Classic_DataList* List = Init_A_ClassicLinkList();</span>Classic_DataList<span class="token operator">*</span> <span class="token function">Init_A_ClassicLinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// create empty space</span>Classic_DataList<span class="token operator">*</span> pro_usable_space <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Check whether init succeeded</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pro_usable_space<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Default set </span>pro_usable_space<span class="token operator">-></span>Head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>pro_usable_space<span class="token operator">-></span>current_size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// return out the Structure</span><span class="token keyword">return</span> pro_usable_space<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// About ClassicLinkList</span><span class="token comment">// to copy an already exited linklist</span><span class="token comment">// Classic_DataList* List = Init_A_ClassicLinkList_By_CopyAClassicLinkList(Classic_DataList* list) </span><span class="token comment">//</span>Classic_DataList<span class="token operator">*</span> <span class="token function">Init_A_ClassicLinkList_By_CopyAClassicLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//check whether the input is legal</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//check whether there is neccessity to copy </span><span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token operator">-></span>current_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No need to copy! it hasn't been initialize yet!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Used to return NULL , but it is dangerous that two pointers points one things </span><span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//New a List and new a head and new the data of the head</span>Classic_DataList<span class="token operator">*</span> p_NewList <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> newHead <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> newdata <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>list<span class="token operator">-></span>Head<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//check whether we init the node successfully</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newdata <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Do copy the data to the new head and finished initialization</span><span class="token function">memcpy</span><span class="token punctuation">(</span>newdata<span class="token punctuation">,</span> list<span class="token operator">-></span>Head<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>list<span class="token operator">-></span>Head<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newHead<span class="token operator">-></span>data <span class="token operator">=</span> newdata<span class="token punctuation">;</span>newHead<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>p_NewList<span class="token operator">-></span>Head <span class="token operator">=</span> newHead<span class="token punctuation">;</span>p_NewList<span class="token operator">-></span>current_size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//Start copy other nodes</span>Classic_DataNode<span class="token operator">*</span> p_Currency <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> pCurCopy <span class="token operator">=</span> p_NewList<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token operator">-></span>current_size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//Copy the I-th node</span>Classic_DataNode<span class="token operator">*</span> newDataNode <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//check if the initialization is illegal</span><span class="token keyword">if</span><span class="token punctuation">(</span>newDataNode<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// prepare to copy data from the current node</span><span class="token keyword">void</span><span class="token operator">*</span> newdata <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>p_Currency<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// check if the initialization is illegal</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newdata <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//copy the detailed node</span><span class="token function">memcpy</span><span class="token punctuation">(</span>newdata<span class="token punctuation">,</span> p_Currency<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p_Currency<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newDataNode<span class="token operator">-></span>data <span class="token operator">=</span> newdata<span class="token punctuation">;</span>newDataNode<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//Moving the pointer and prepared next copy</span>pCurCopy<span class="token operator">-></span>p_next_one <span class="token operator">=</span> newDataNode<span class="token punctuation">;</span>pCurCopy <span class="token operator">=</span> pCurCopy<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>p_Currency <span class="token operator">=</span> p_Currency<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Data copy finished , init the cur_size</span>p_NewList<span class="token operator">-></span>current_size <span class="token operator">=</span> list<span class="token operator">-></span>current_size<span class="token punctuation">;</span><span class="token keyword">return</span> p_NewList<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// About ClassicLinkList</span><span class="token comment">// to updata a static array into a ClassicLinkList</span><span class="token comment">// Classic_DataList* List = UpdateStaticArray2ClassicLinkList(</span><span class="token comment">// void* inputArray, </span><span class="token comment">// size_t dataSize, </span><span class="token comment">// size_t dataNum</span><span class="token comment">// )</span><span class="token comment">//</span>Classic_DataList<span class="token operator">*</span> <span class="token function">UpdateStaticArray2ClassicLinkList</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span>inputArray<span class="token punctuation">,</span> <span class="token class-name">size_t</span>dataSize<span class="token punctuation">,</span> <span class="token class-name">size_t</span>dataNum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>inputArray <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataList<span class="token operator">*</span> pro_usable_space <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> FirstHeaddata <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> datapiece <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pro_usable_space <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>FirstHeaddata <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>datapiece <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>datapiece<span class="token punctuation">,</span> inputArray<span class="token punctuation">,</span> dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span>FirstHeaddata<span class="token operator">-></span>data <span class="token operator">=</span> datapiece<span class="token punctuation">;</span>FirstHeaddata<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>pro_usable_space<span class="token operator">-></span>current_size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>pro_usable_space<span class="token operator">-></span>Head <span class="token operator">=</span> FirstHeaddata<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dataNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Classic_DataNode<span class="token operator">*</span> p_Currency <span class="token operator">=</span> pro_usable_space<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p_Currency<span class="token operator">-></span>p_next_one<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p_Currency <span class="token operator">=</span> p_Currency<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> datastored <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>datastored<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>datastored<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>inputArray <span class="token operator">+</span> i <span class="token operator">*</span> dataSize<span class="token punctuation">,</span> dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> datanode <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>datanode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>datanode<span class="token operator">-></span>data <span class="token operator">=</span> datastored<span class="token punctuation">;</span>datanode<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>p_Currency<span class="token operator">-></span>p_next_one <span class="token operator">=</span> datanode<span class="token punctuation">;</span>pro_usable_space<span class="token operator">-></span>current_size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> pro_usable_space<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基本添加函数"><a href="#基本添加函数" class="headerlink" title="基本添加函数"></a>基本添加函数</h2><p>​        现在，我们执行向里面添加数据的方法，说白了，就是创造一个新的节点，或者是若干的节点向里面推送数据：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//----------------------------------------Basic_Add_Functions----------</span><span class="token comment">// there are four basic input functions:</span><span class="token comment">// </span><span class="token comment">// --------------------------------------------------------------------</span><span class="token comment">// 1. push back an element into the classicLinkList</span><span class="token comment">// func1 : ClassicLinkListFunctionStatues Push_Back_Into_A_ClassicLinkList</span><span class="token comment">//</span><span class="token comment">// input : the inserted list ,the data wanted to be inserted and the inserted datasize</span><span class="token comment">// output: the statues of normal ,can be used in check or just ignore!</span><span class="token comment">// </span><span class="token comment">// --------------------------------------------------------------------</span><span class="token comment">// 2. insert back an element into the classicLinkList by offering a valid pos</span><span class="token comment">// func2 : ClassicLinkListFunctionStatues Insert_into_AClassicLinkList</span><span class="token comment">// </span><span class="token comment">// </span><span class="token comment">// input : the inserted list , the data ,the datasize as well as the position you wanted to insert</span><span class="token comment">// output: the statues of normal ,can be used in check or just ignore!</span><span class="token comment">// </span><span class="token comment">// --------------------------------------------------------------------</span><span class="token comment">// </span><span class="token comment">// 3. push back a bunch of data into the classicLinkList like the first function</span><span class="token comment">// func3 :ClassicLinkListFunctionStatues push_Back_BunchDataintoClassicLinkList</span><span class="token comment">// </span><span class="token comment">// input : the inserted list , the data ,the datasize as well as the position you wanted to insert</span><span class="token comment">// output: the statues of normal ,can be used in check or just ignore!</span><span class="token comment">// </span><span class="token comment">// --------------------------------------------------------------------</span><span class="token comment">// 4. insert back a bunch of data into the classicLinkList like the second function</span><span class="token comment">// func4: ClassicLinkListFunctionStatues Insert_A_Bunch_of_data_intoClassicLinkList</span><span class="token comment">//</span><span class="token comment">// input : the inserted list , the static array ,the datasize in the static array as well as the position you wanted to insert</span><span class="token comment">// output: the statues of normal ,can be used in check or just ignore! </span><span class="token comment">// </span><span class="token comment">//-------------------------Basic_Add_Functions-------------------------</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="尾插一个节点"><a href="#尾插一个节点" class="headerlink" title="尾插一个节点"></a>尾插一个节点</h3><p>​        我们首先得拿到一个尾节点，由于是单链表，我们就必须遍历链表到最后面。然后再伸出指针拷贝！函数的原型显而易见，就不再重复了</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">ClassicLinkListFunctionStatues <span class="token function">Push_Back_Into_A_ClassicLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span> list<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span>data<span class="token punctuation">,</span><span class="token class-name">size_t</span>datasize<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是这里注意，我们需要区分一个事情，如果我们是创建了一个空链表，那就我们直接推进头节点就好了，于是：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span><span class="token operator">*</span> datastored <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>datasize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>datastored<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>datastored<span class="token punctuation">,</span> data<span class="token punctuation">,</span> datasize<span class="token punctuation">)</span><span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> datanode <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>datanode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>datanode<span class="token operator">-></span>data <span class="token operator">=</span> datastored<span class="token punctuation">;</span>datanode<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>list<span class="token operator">-></span>Head <span class="token operator">=</span> datanode<span class="token punctuation">;</span>list<span class="token operator">-></span>current_size<span class="token operator">++</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        如果不是，就要一个一个跑路：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//移动指针到尾部</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p_Currency<span class="token operator">-></span>p_next_one<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p_Currency <span class="token operator">=</span> p_Currency<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//准备拷贝</span><span class="token keyword">void</span><span class="token operator">*</span> datastored <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>datasize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>datastored<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>datastored<span class="token punctuation">,</span> data<span class="token punctuation">,</span> datasize<span class="token punctuation">)</span><span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> datanode <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>datanode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>datanode<span class="token operator">-></span>data <span class="token operator">=</span> datastored<span class="token punctuation">;</span>datanode<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>p_Currency<span class="token operator">-></span>p_next_one <span class="token operator">=</span> datanode<span class="token punctuation">;</span>list<span class="token operator">-></span>current_size<span class="token operator">++</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>连起来看看：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// About ClassicLinkList</span><span class="token comment">// push back some data ,like dynamic array , into the final position</span><span class="token comment">//Used like this Push_Back_Into_A_ClassicLinkList(appendedClassicLinkList, data ,sizeof(data))</span><span class="token comment">//</span>ClassicLinkListFunctionStatues <span class="token function">Push_Back_Into_A_ClassicLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span>data<span class="token punctuation">,</span><span class="token class-name">size_t</span>datasize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> p_Currency <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token operator">-></span>Head <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p_Currency<span class="token operator">-></span>p_next_one<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p_Currency <span class="token operator">=</span> p_Currency<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> datastored <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>datasize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>datastored<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>datastored<span class="token punctuation">,</span> data<span class="token punctuation">,</span> datasize<span class="token punctuation">)</span><span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> datanode <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>datanode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>datanode<span class="token operator">-></span>data <span class="token operator">=</span> datastored<span class="token punctuation">;</span>datanode<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>p_Currency<span class="token operator">-></span>p_next_one <span class="token operator">=</span> datanode<span class="token punctuation">;</span>list<span class="token operator">-></span>current_size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">void</span><span class="token operator">*</span> datastored <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>datasize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>datastored<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>datastored<span class="token punctuation">,</span> data<span class="token punctuation">,</span> datasize<span class="token punctuation">)</span><span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> datanode <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>datanode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>datanode<span class="token operator">-></span>data <span class="token operator">=</span> datastored<span class="token punctuation">;</span>datanode<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>list<span class="token operator">-></span>Head <span class="token operator">=</span> datanode<span class="token punctuation">;</span>list<span class="token operator">-></span>current_size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="尾插多个节点"><a href="#尾插多个节点" class="headerlink" title="尾插多个节点"></a>尾插多个节点</h3><p>​        这个很简单，由于是以数组的形式，那我们就仿照升级函数，不过，还是要注意是不是为空链表的问题，总而言之，不细讲，看代码！</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// About ClassicDataList</span><span class="token comment">// push back a bunch data into the datalist</span><span class="token comment">// used like this : push_Back_BunchDataintoClassicLinkList( inserted_list , the static array ,the elementsize ,the element num)</span><span class="token comment">//</span>ClassicLinkListFunctionStatues <span class="token function">push_Back_BunchDataintoClassicLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span>inputArray<span class="token punctuation">,</span> <span class="token class-name">size_t</span>sigElemSize<span class="token punctuation">,</span> <span class="token class-name">size_t</span>arrayNum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//数据检查</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>inputArray<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Equally as to updata a Static Array into a ClassicLinkList</span><span class="token comment">//Once just use  UpdateStaticArray2ClassicLinkList(),but i'm afraid of unable to use this functions</span><span class="token comment">//as it is said: "DO NOT motivate another functions , try to finish all work if neccessary"</span>        <span class="token comment">//这是经典的升级工厂函数</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token operator">-></span>Head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//New a List and new a head and new the data of the head</span>Classic_DataList<span class="token operator">*</span> p_NewList <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> newHead <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> newdata <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>list<span class="token operator">-></span>Head<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//check whether we init the node successfully</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newdata <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Do copy the data to the new head and finished initialization</span><span class="token function">memcpy</span><span class="token punctuation">(</span>newdata<span class="token punctuation">,</span> list<span class="token operator">-></span>Head<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>list<span class="token operator">-></span>Head<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newHead<span class="token operator">-></span>data <span class="token operator">=</span> newdata<span class="token punctuation">;</span>newHead<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>p_NewList<span class="token operator">-></span>Head <span class="token operator">=</span> newHead<span class="token punctuation">;</span>p_NewList<span class="token operator">-></span>current_size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//Start copy other nodes</span>Classic_DataNode<span class="token operator">*</span> p_Currency <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> pCurCopy <span class="token operator">=</span> p_NewList<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token operator">-></span>current_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//Copy the I-th node</span>Classic_DataNode<span class="token operator">*</span> newDataNode <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//check if the initialization is illegal</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newDataNode <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// prepare to copy data from the current node</span><span class="token keyword">void</span><span class="token operator">*</span> newdata <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>p_Currency<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// check if the initialization is illegal</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newdata <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//copy the detailed node</span><span class="token function">memcpy</span><span class="token punctuation">(</span>newdata<span class="token punctuation">,</span> p_Currency<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p_Currency<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newDataNode<span class="token operator">-></span>data <span class="token operator">=</span> newdata<span class="token punctuation">;</span>newDataNode<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//Moving the pointer and prepared next copy</span>pCurCopy<span class="token operator">-></span>p_next_one <span class="token operator">=</span> newDataNode<span class="token punctuation">;</span>pCurCopy <span class="token operator">=</span> pCurCopy<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>p_Currency <span class="token operator">=</span> p_Currency<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Data copy finished , init the cur_size</span>p_NewList<span class="token operator">-></span>current_size <span class="token operator">=</span> list<span class="token operator">-></span>current_size<span class="token punctuation">;</span>list <span class="token operator">=</span> p_NewList<span class="token punctuation">;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//如果不是，那说明可以准备尾插</span><span class="token comment">//for this section , that means the head isn't NULL , just copy as usual:</span>Classic_DataNode<span class="token operator">*</span> pCur <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token operator">-></span>current_size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Classic_DataNode<span class="token operator">*</span> pCopyCur <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> copyData <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>sigElemSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pCopyCur <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> copyData <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>copyData<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>inputArray <span class="token operator">+</span> i <span class="token operator">*</span> sigElemSize<span class="token punctuation">,</span> sigElemSize<span class="token punctuation">)</span><span class="token punctuation">;</span>pCopyCur<span class="token operator">-></span>data <span class="token operator">=</span> copyData<span class="token punctuation">;</span>pCopyCur<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>pCur<span class="token operator">-></span>p_next_one <span class="token operator">=</span> pCopyCur<span class="token punctuation">;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>list<span class="token operator">-></span>current_size <span class="token operator">+=</span> arrayNum<span class="token punctuation">;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入一个节点"><a href="#插入一个节点" class="headerlink" title="插入一个节点"></a>插入一个节点</h3><p>​        欸！这里就到了链表的一个关键了！</p><p><img src="image-20230215144354347.png" alt="image-20230215144354347"></p><p>​        还是要注意到，如果我们断开指针，这样子重连就好了，但是注意，我们必须<strong>先让新节点连上下一个节点，然后旧的链接断开，再连上前一个</strong>，原因很容易猜到的：先断开了怎么找下一个呢？</p><p>1）</p><p><img src="image-20230215144716735.png" alt="image-20230215144716735"></p><p>2）</p><p><img src="image-20230215144741500.png" alt="image-20230215144741500"></p><p>3）</p><p><img src="image-20230215144806121.png" alt="image-20230215144806121"></p><p>​        来看看代码：</p><p>​        我们的函数需要知道元素的大小和地址，和插入的位置：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">ClassicLinkListFunctionStatues <span class="token function">Insert_into_AClassicLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span>data<span class="token punctuation">,</span><span class="token class-name">size_t</span>dataSize<span class="token punctuation">,</span><span class="token class-name">size_t</span>pos<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        检查数据：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> pos<span class="token operator">></span>list<span class="token operator">-></span>current_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_Invalid_Input<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_Invalid_Input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        依旧区分问题：我们插在哪里呢？如果插在头节点，那就：让节点指向旧的头节点，然后把新节点作为头节点就好了</p><pre class="line-numbers language-none"><code class="language-none">if (pos &#x3D;&#x3D; 0)&#123;Classic_DataNode* stored &#x3D; (Classic_DataNode*)malloc(sizeof(Classic_DataNode));if (stored &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE;exit(ClassicLinkList_ERROR_IN_MALLOCING_SPACE);&#125;void* dataPiece &#x3D; malloc(dataSize);memcpy(dataPiece, data, dataSize);stored-&gt;data &#x3D; dataPiece;stored-&gt;p_next_one &#x3D; list-&gt;Head;list-&gt;Head &#x3D; stored;list-&gt;current_size++;return ClassicLinkList_NORMAL;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        中间位置的就把我们的思路抽象出来：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//准备空间</span>Classic_DataNode<span class="token operator">*</span> pCurrency <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> stored <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>stored <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> dataPiece <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>dataPiece<span class="token punctuation">,</span> data<span class="token punctuation">,</span> dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span>stored<span class="token operator">-></span>data <span class="token operator">=</span> dataPiece<span class="token punctuation">;</span><span class="token comment">//定位到当前位置</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pos<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pCurrency <span class="token operator">=</span> pCurrency<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//开始入列</span>stored<span class="token operator">-></span>p_next_one <span class="token operator">=</span> pCurrency<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>pCurrency<span class="token operator">-></span>p_next_one <span class="token operator">=</span> stored<span class="token punctuation">;</span><span class="token comment">//处理属性</span>list<span class="token operator">-></span>current_size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        就好了！</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// About ClassicDataList</span><span class="token comment">// insert back a data into the datalist</span><span class="token comment">// used like this: Insert_into_AClassicLinkList(inserted list, input data,dataSize,insertion_pos)</span><span class="token comment">// </span>ClassicLinkListFunctionStatues <span class="token function">Insert_into_AClassicLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span>data<span class="token punctuation">,</span><span class="token class-name">size_t</span>dataSize<span class="token punctuation">,</span><span class="token class-name">size_t</span>pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> pos<span class="token operator">></span>list<span class="token operator">-></span>current_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_Invalid_Input<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_Invalid_Input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Classic_DataNode<span class="token operator">*</span> stored <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>stored <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> dataPiece <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>dataPiece<span class="token punctuation">,</span> data<span class="token punctuation">,</span> dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span>stored<span class="token operator">-></span>data <span class="token operator">=</span> dataPiece<span class="token punctuation">;</span>stored<span class="token operator">-></span>p_next_one <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span>list<span class="token operator">-></span>Head <span class="token operator">=</span> stored<span class="token punctuation">;</span>list<span class="token operator">-></span>current_size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pCurrency <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> stored <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>stored <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> dataPiece <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>dataPiece<span class="token punctuation">,</span> data<span class="token punctuation">,</span> dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span>stored<span class="token operator">-></span>data <span class="token operator">=</span> dataPiece<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pos<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pCurrency <span class="token operator">=</span> pCurrency<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>stored<span class="token operator">-></span>p_next_one <span class="token operator">=</span> pCurrency<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>pCurrency<span class="token operator">-></span>p_next_one <span class="token operator">=</span> stored<span class="token punctuation">;</span>list<span class="token operator">-></span>current_size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入一群节点函数"><a href="#插入一群节点函数" class="headerlink" title="插入一群节点函数"></a>插入一群节点函数</h3><p>​        很是类似，我们先把目标数组升级，然后找到保存头尾节点，头节点连在插入节点，尾节点连接在下一节点就好了：</p><p>​        函数原型是不难设想的：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// About ClassicDataList</span><span class="token comment">// insert back a bunch of data into the datalist</span><span class="token comment">// used like this: Insert_into_AClassicLinkList(inserted list, insertion_pos,input array ,Single dataSize, the amount of elements)</span><span class="token comment">// </span>ClassicLinkListFunctionStatues <span class="token function">Insert_A_Bunch_of_data_intoClassicLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span> list<span class="token punctuation">,</span><span class="token class-name">size_t</span>pos<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span>inputArray<span class="token punctuation">,</span><span class="token class-name">size_t</span>sigElemSize<span class="token punctuation">,</span><span class="token class-name">size_t</span>arrayNum<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        接下来是：</p><p>​        数据判断：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>inputArray <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 询问用户要不要更改pos</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">></span> list<span class="token operator">-></span>current_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_WARNING_ClassicLinkList_OVERLAP_POS<span class="token punctuation">;</span><span class="token function">SHOW_WHETHER_ACCCEPTED</span><span class="token punctuation">(</span><span class="token string">"y/n: y for yes , n for n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> choice<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>choice<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token char">'y'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pos <span class="token operator">=</span> list<span class="token operator">-></span>current_size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_Invalid_Input<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_Invalid_Input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        先升级目标数组</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Classic_DataNode<span class="token operator">*</span> pCurNow <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> pStart <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayNum <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Classic_DataNode<span class="token operator">*</span> pCopyCur <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> copydata <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>sigElemSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pCopyCur <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> copydata <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>copydata<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>inputArray <span class="token operator">+</span> i <span class="token operator">*</span> sigElemSize<span class="token punctuation">,</span> sigElemSize<span class="token punctuation">)</span><span class="token punctuation">;</span>pCopyCur<span class="token operator">-></span>data <span class="token operator">=</span> copydata<span class="token punctuation">;</span>pCopyCur<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pCurNow <span class="token operator">=</span> pCopyCur<span class="token punctuation">;</span>pStart <span class="token operator">=</span> pCopyCur<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>pCurNow<span class="token operator">-></span>p_next_one <span class="token operator">=</span> pCopyCur<span class="token punctuation">;</span>pCurNow <span class="token operator">=</span> pCurNow<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        然后，开始分类讨论</p><p>​        头节点的：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">// 转移</span>pCurNow<span class="token operator">-></span>p_next_one <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span>     <span class="token comment">// 托管新的头节点</span>list<span class="token operator">-></span>Head <span class="token operator">=</span> pStart<span class="token punctuation">;</span>list<span class="token operator">-></span>current_size <span class="token operator">+=</span> arrayNum<span class="token punctuation">;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        也有不是的，那就：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Classic_DataNode<span class="token operator">*</span> pCur <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pos<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>pCurNow<span class="token operator">-></span>p_next_one <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>pCur<span class="token operator">-></span>p_next_one <span class="token operator">=</span> pStart<span class="token punctuation">;</span>list<span class="token operator">-></span>current_size <span class="token operator">+=</span> arrayNum<span class="token punctuation">;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="增加函数一览"><a href="#增加函数一览" class="headerlink" title="增加函数一览"></a>增加函数一览</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//----------------------------------------Basic_Add_Functions------------------------</span><span class="token comment">// there are four basic input functions:</span><span class="token comment">// </span><span class="token comment">// ----------------------------------------------------------------------------------</span><span class="token comment">// 1. push back an element into the classicLinkList</span><span class="token comment">// func1 : ClassicLinkListFunctionStatues Push_Back_Into_A_ClassicLinkList</span><span class="token comment">//</span><span class="token comment">// input : the inserted list ,the data wanted to be inserted and the inserted datasize</span><span class="token comment">// output: the statues of normal ,can be used in check or just ignore!</span><span class="token comment">// </span><span class="token comment">// ----------------------------------------------------------------------------------</span><span class="token comment">// 2. insert back an element into the classicLinkList by offering a valid pos</span><span class="token comment">// func2 : ClassicLinkListFunctionStatues Insert_into_AClassicLinkList</span><span class="token comment">// </span><span class="token comment">// </span><span class="token comment">// input : the inserted list , the data ,the datasize as well as the position you wanted to insert</span><span class="token comment">// output: the statues of normal ,can be used in check or just ignore!</span><span class="token comment">// </span><span class="token comment">// ----------------------------------------------------------------------------------</span><span class="token comment">// </span><span class="token comment">// 3. push back a bunch of data into the classicLinkList like the first function</span><span class="token comment">// func3 :ClassicLinkListFunctionStatues push_Back_BunchDataintoClassicLinkList</span><span class="token comment">// </span><span class="token comment">// input : the inserted list , the data ,the datasize as well as the position you wanted to insert</span><span class="token comment">// output: the statues of normal ,can be used in check or just ignore!</span><span class="token comment">// </span><span class="token comment">// ----------------------------------------------------------------------------------</span><span class="token comment">// 4. insert back a bunch of data into the classicLinkList like the second function</span><span class="token comment">// func4: ClassicLinkListFunctionStatues Insert_A_Bunch_of_data_intoClassicLinkList</span><span class="token comment">//</span><span class="token comment">// input : the inserted list , the static array ,the datasize in the static array as well as the position you wanted to insert</span><span class="token comment">// output: the statues of normal ,can be used in check or just ignore! </span><span class="token comment">// </span><span class="token comment">//----------------------------------------Basic_Add_Functions-------------------------</span><span class="token comment">// About ClassicLinkList</span><span class="token comment">// push back some data ,like dynamic array , into the final position</span><span class="token comment">//Used like this Push_Back_Into_A_ClassicLinkList(appendedClassicLinkList, data ,sizeof(data))</span><span class="token comment">//</span>ClassicLinkListFunctionStatues <span class="token function">Push_Back_Into_A_ClassicLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span>data<span class="token punctuation">,</span><span class="token class-name">size_t</span>datasize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> p_Currency <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token operator">-></span>Head <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>p_Currency<span class="token operator">-></span>p_next_one<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>p_Currency <span class="token operator">=</span> p_Currency<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> datastored <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>datasize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>datastored<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>datastored<span class="token punctuation">,</span> data<span class="token punctuation">,</span> datasize<span class="token punctuation">)</span><span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> datanode <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>datanode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>datanode<span class="token operator">-></span>data <span class="token operator">=</span> datastored<span class="token punctuation">;</span>datanode<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>p_Currency<span class="token operator">-></span>p_next_one <span class="token operator">=</span> datanode<span class="token punctuation">;</span>list<span class="token operator">-></span>current_size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">void</span><span class="token operator">*</span> datastored <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>datasize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>datastored<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>datastored<span class="token punctuation">,</span> data<span class="token punctuation">,</span> datasize<span class="token punctuation">)</span><span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> datanode <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>datanode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>datanode<span class="token operator">-></span>data <span class="token operator">=</span> datastored<span class="token punctuation">;</span>datanode<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>list<span class="token operator">-></span>Head <span class="token operator">=</span> datanode<span class="token punctuation">;</span>list<span class="token operator">-></span>current_size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// About ClassicDataList</span><span class="token comment">// insert back a data into the datalist</span><span class="token comment">// used like this: Insert_into_AClassicLinkList(inserted list, input data,dataSize,insertion_pos)</span><span class="token comment">// </span>ClassicLinkListFunctionStatues <span class="token function">Insert_into_AClassicLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span>data<span class="token punctuation">,</span><span class="token class-name">size_t</span>dataSize<span class="token punctuation">,</span><span class="token class-name">size_t</span>pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> pos<span class="token operator">></span>list<span class="token operator">-></span>current_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_Invalid_Input<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_Invalid_Input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Classic_DataNode<span class="token operator">*</span> stored <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>stored <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> dataPiece <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>dataPiece<span class="token punctuation">,</span> data<span class="token punctuation">,</span> dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span>stored<span class="token operator">-></span>data <span class="token operator">=</span> dataPiece<span class="token punctuation">;</span>stored<span class="token operator">-></span>p_next_one <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span>list<span class="token operator">-></span>Head <span class="token operator">=</span> stored<span class="token punctuation">;</span>list<span class="token operator">-></span>current_size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pCurrency <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> stored <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>stored <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span><span class="token operator">*</span> dataPiece <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>dataPiece<span class="token punctuation">,</span> data<span class="token punctuation">,</span> dataSize<span class="token punctuation">)</span><span class="token punctuation">;</span>stored<span class="token operator">-></span>data <span class="token operator">=</span> dataPiece<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pos<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pCurrency <span class="token operator">=</span> pCurrency<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>stored<span class="token operator">-></span>p_next_one <span class="token operator">=</span> pCurrency<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>pCurrency<span class="token operator">-></span>p_next_one <span class="token operator">=</span> stored<span class="token punctuation">;</span>list<span class="token operator">-></span>current_size<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// About ClassicDataList</span><span class="token comment">// push back a bunch data into the datalist</span><span class="token comment">// used like this : push_Back_BunchDataintoClassicLinkList( inserted_list , the static array ,the elementsize ,the element num)</span><span class="token comment">//</span>ClassicLinkListFunctionStatues <span class="token function">push_Back_BunchDataintoClassicLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span>inputArray<span class="token punctuation">,</span> <span class="token class-name">size_t</span>sigElemSize<span class="token punctuation">,</span> <span class="token class-name">size_t</span>arrayNum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>inputArray<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Equally as to updata a Static Array into a ClassicLinkList</span><span class="token comment">//Once just use  UpdateStaticArray2ClassicLinkList(),but i'm afraid of unable to use this functions</span><span class="token comment">//as it is said: "DO NOT motivate another functions , try to finish all work if neccessary"</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token operator">-></span>Head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//New a List and new a head and new the data of the head</span>Classic_DataList<span class="token operator">*</span> p_NewList <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> newHead <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> newdata <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>list<span class="token operator">-></span>Head<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//check whether we init the node successfully</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newHead <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newdata <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Do copy the data to the new head and finished initialization</span><span class="token function">memcpy</span><span class="token punctuation">(</span>newdata<span class="token punctuation">,</span> list<span class="token operator">-></span>Head<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>list<span class="token operator">-></span>Head<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newHead<span class="token operator">-></span>data <span class="token operator">=</span> newdata<span class="token punctuation">;</span>newHead<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>p_NewList<span class="token operator">-></span>Head <span class="token operator">=</span> newHead<span class="token punctuation">;</span>p_NewList<span class="token operator">-></span>current_size <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//Start copy other nodes</span>Classic_DataNode<span class="token operator">*</span> p_Currency <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> pCurCopy <span class="token operator">=</span> p_NewList<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token operator">-></span>current_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//Copy the I-th node</span>Classic_DataNode<span class="token operator">*</span> newDataNode <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//check if the initialization is illegal</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newDataNode <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// prepare to copy data from the current node</span><span class="token keyword">void</span><span class="token operator">*</span> newdata <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>p_Currency<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// check if the initialization is illegal</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newdata <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//copy the detailed node</span><span class="token function">memcpy</span><span class="token punctuation">(</span>newdata<span class="token punctuation">,</span> p_Currency<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>p_Currency<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newDataNode<span class="token operator">-></span>data <span class="token operator">=</span> newdata<span class="token punctuation">;</span>newDataNode<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//Moving the pointer and prepared next copy</span>pCurCopy<span class="token operator">-></span>p_next_one <span class="token operator">=</span> newDataNode<span class="token punctuation">;</span>pCurCopy <span class="token operator">=</span> pCurCopy<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>p_Currency <span class="token operator">=</span> p_Currency<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Data copy finished , init the cur_size</span>p_NewList<span class="token operator">-></span>current_size <span class="token operator">=</span> list<span class="token operator">-></span>current_size<span class="token punctuation">;</span>list <span class="token operator">=</span> p_NewList<span class="token punctuation">;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//for this section , that means the head isn't NULL , just copy as usual:</span>Classic_DataNode<span class="token operator">*</span> pCur <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token operator">-></span>current_size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Classic_DataNode<span class="token operator">*</span> pCopyCur <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> copyData <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>sigElemSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pCopyCur <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> copyData <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>copyData<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>inputArray <span class="token operator">+</span> i <span class="token operator">*</span> sigElemSize<span class="token punctuation">,</span> sigElemSize<span class="token punctuation">)</span><span class="token punctuation">;</span>pCopyCur<span class="token operator">-></span>data <span class="token operator">=</span> copyData<span class="token punctuation">;</span>pCopyCur<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>pCur<span class="token operator">-></span>p_next_one <span class="token operator">=</span> pCopyCur<span class="token punctuation">;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>list<span class="token operator">-></span>current_size <span class="token operator">+=</span> arrayNum<span class="token punctuation">;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// About ClassicDataList</span><span class="token comment">// insert back a bunch of data into the datalist</span><span class="token comment">// used like this: Insert_into_AClassicLinkList(inserted list, insertion_pos,input array ,Single dataSize, the amount of elements)</span><span class="token comment">// </span>ClassicLinkListFunctionStatues <span class="token function">Insert_A_Bunch_of_data_intoClassicLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span><span class="token class-name">size_t</span>pos<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span>inputArray<span class="token punctuation">,</span><span class="token class-name">size_t</span>sigElemSize<span class="token punctuation">,</span><span class="token class-name">size_t</span>arrayNum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>inputArray <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">></span> list<span class="token operator">-></span>current_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_WARNING_ClassicLinkList_OVERLAP_POS<span class="token punctuation">;</span><span class="token function">SHOW_WHETHER_ACCCEPTED</span><span class="token punctuation">(</span><span class="token string">"y/n: y for yes , n for n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> choice<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>choice<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token char">'y'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pos <span class="token operator">=</span> list<span class="token operator">-></span>current_size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_Invalid_Input<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_Invalid_Input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pCurNow <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> pStart <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayNum <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Classic_DataNode<span class="token operator">*</span> pCopyCur <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> copydata <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>sigElemSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pCopyCur <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> copydata <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>copydata<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>inputArray <span class="token operator">+</span> i <span class="token operator">*</span> sigElemSize<span class="token punctuation">,</span> sigElemSize<span class="token punctuation">)</span><span class="token punctuation">;</span>pCopyCur<span class="token operator">-></span>data <span class="token operator">=</span> copydata<span class="token punctuation">;</span>pCopyCur<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pCurNow <span class="token operator">=</span> pCopyCur<span class="token punctuation">;</span>pStart <span class="token operator">=</span> pCopyCur<span class="token punctuation">;</span><span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>pCurNow<span class="token operator">-></span>p_next_one <span class="token operator">=</span> pCopyCur<span class="token punctuation">;</span>pCurNow <span class="token operator">=</span> pCurNow<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pCurNow<span class="token operator">-></span>p_next_one <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span>list<span class="token operator">-></span>Head <span class="token operator">=</span> pStart<span class="token punctuation">;</span>list<span class="token operator">-></span>current_size <span class="token operator">+=</span> arrayNum<span class="token punctuation">;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pCur <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pos<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>pCurNow<span class="token operator">-></span>p_next_one <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>pCur<span class="token operator">-></span>p_next_one <span class="token operator">=</span> pStart<span class="token punctuation">;</span>list<span class="token operator">-></span>current_size <span class="token operator">+=</span> arrayNum<span class="token punctuation">;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除函数"><a href="#删除函数" class="headerlink" title="删除函数"></a>删除函数</h3><p>​            我们删除就不整什么尾删法了，直接上任意删除</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//------------------------------------------Deletion_Functions-------------</span><span class="token comment">// there are two basic type of functions in the sections</span><span class="token comment">// 1. Erase a targeted element and erase it from the ClassicDataList</span><span class="token comment">// fun1:eraseAElementfromDataList</span><span class="token comment">// </span><span class="token comment">// input : the list and the erase position</span><span class="token comment">// output: the statues of normal ,can be used in check or just ignore!</span><span class="token comment">// </span><span class="token comment">// --------------------------------------------------------------------------</span><span class="token comment">// </span><span class="token comment">// 2.Erase some target elements from the ClassicDataList</span><span class="token comment">// fun2:eraseAbunchData</span><span class="token comment">// </span><span class="token comment">// input: the list and the start position as well as the last position, that means offer a paired pos</span><span class="token comment">// output: the statues of normal ,can be used in check or just ignore!</span><span class="token comment">//------------------------------------------Deletion_Functions----------------</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除一个节点"><a href="#删除一个节点" class="headerlink" title="删除一个节点"></a>删除一个节点</h3><p>​        对于删除一个元素，我们就逆向过程一下：</p><p><img src="image-20230215151404255.png" alt="image-20230215151404255"></p><p>​        先指定pDel是查找指针的下一个：然后，记作 pDel 之后呢，再：删除与指针重连。</p><p>​        函数的原型显然是显而易见的：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">ClassicLinkListFunctionStatues <span class="token function">eraseAElementfromDataList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span><span class="token class-name">size_t</span>pos<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        做好数据检查：</p><pre class="line-numbers language-none"><code class="language-none">if (list &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;if (pos&lt;0 || pos&gt;list-&gt;current_size)&#123;SHOW_ERROR_ClassicLinkList_Invalid_Input;exit(ClassicLinkList_Invalid_Input);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        开始区分，如果是删除头节点：</p><pre class="line-numbers language-none"><code class="language-none">if (pos &#x3D;&#x3D; 0)&#123;Classic_DataNode* pNewHead &#x3D; list-&gt;Head-&gt;p_next_one;Classic_DataNode* pDel &#x3D; list-&gt;Head;list-&gt;Head &#x3D; pNewHead;free(pDel-&gt;data);list-&gt;current_size--;return ClassicLinkList_NORMAL;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        之后的类似：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Classic_DataNode<span class="token operator">*</span> pCur <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pDel <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>pCur<span class="token operator">-></span>p_next_one <span class="token operator">=</span> pDel<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>pDel<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>pDel<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token operator">-></span>current_size<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// About ClassicDataList</span><span class="token comment">// delete a  data in the datalist by offering a position</span><span class="token comment">//used like this: eraseAElementfromDataList(list, erasing_pos)</span><span class="token comment">//</span>ClassicLinkListFunctionStatues <span class="token function">eraseAElementfromDataList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span><span class="token class-name">size_t</span>pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> pos<span class="token operator">></span>list<span class="token operator">-></span>current_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_Invalid_Input<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_Invalid_Input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Classic_DataNode<span class="token operator">*</span> pNewHead <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> pDel <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span>list<span class="token operator">-></span>Head <span class="token operator">=</span> pNewHead<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>pDel<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token operator">-></span>current_size<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pCur <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pDel <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>pCur<span class="token operator">-></span>p_next_one <span class="token operator">=</span> pDel<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>pDel<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>pDel<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token operator">-></span>current_size<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除多个节点"><a href="#删除多个节点" class="headerlink" title="删除多个节点"></a>删除多个节点</h3><p>函数的原型显而易见了，不多赘述：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">ClassicLinkListFunctionStatues <span class="token function">eraseAbunchData_inDataList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span> list<span class="token punctuation">,</span> <span class="token class-name">size_t</span>front_pos<span class="token punctuation">,</span><span class="token class-name">size_t</span>final_pos<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据检查是少不了的：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>front_pos<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> front_pos<span class="token operator">></span>list<span class="token operator">-></span>current_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_Invalid_Input<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_Invalid_Input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>final_pos<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> final_pos<span class="token operator">></span>list<span class="token operator">-></span>current_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_Invalid_Input<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_Invalid_Input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>front_pos <span class="token operator">></span> final_pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_WARNING_ClassicLinkList_SWAPPED_POS<span class="token punctuation">;</span><span class="token function">SHOW_WHETHER_ACCCEPTED</span><span class="token punctuation">(</span><span class="token string">"y/n: y for yes , n for n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> choice<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>choice<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token char">'y'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> final_pos<span class="token punctuation">;</span>final_pos <span class="token operator">=</span> front_pos<span class="token punctuation">;</span>front_pos <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_Invalid_Input<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_Invalid_Input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        仍然是区分是不是包含了头节点的问题：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Bool flag <span class="token operator">=</span>False<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>front_pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>flag <span class="token operator">=</span> True<span class="token punctuation">;</span>front_pos<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//开始移动位置</span>Classic_DataNode<span class="token operator">*</span> pCur <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> front_pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> cur_place <span class="token operator">=</span> front_pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cur_place <span class="token operator">&lt;=</span> final_pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Classic_DataNode<span class="token operator">*</span> pDel <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>pCur<span class="token operator">-></span>p_next_one <span class="token operator">=</span> pDel<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>pDel<span class="token punctuation">)</span><span class="token punctuation">;</span>cur_place<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>list<span class="token operator">-></span>current_size <span class="token operator">-=</span> final_pos <span class="token operator">-</span> front_pos <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//单独处理头节点的问题：</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> True<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Classic_DataNode<span class="token operator">*</span> pNewHead <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> pDel <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span>list<span class="token operator">-></span>Head <span class="token operator">=</span> pNewHead<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>pDel<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token operator">-></span>current_size<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除函数API一览"><a href="#删除函数API一览" class="headerlink" title="删除函数API一览"></a>删除函数API一览</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//------------------------------------------Deletion_Functions-------------</span><span class="token comment">// there are two basic type of functions in the sections</span><span class="token comment">// 1. Erase a targeted element and erase it from the ClassicDataList</span><span class="token comment">// fun1:eraseAElementfromDataList</span><span class="token comment">// </span><span class="token comment">// input : the list and the erase position</span><span class="token comment">// output: the statues of normal ,can be used in check or just ignore!</span><span class="token comment">// </span><span class="token comment">// --------------------------------------------------------------------------</span><span class="token comment">// </span><span class="token comment">// 2.Erase some target elements from the ClassicDataList</span><span class="token comment">// fun2:eraseAbunchData</span><span class="token comment">// </span><span class="token comment">// input: the list and the start position as well as the last position, that means offer a paired pos</span><span class="token comment">// output: the statues of normal ,can be used in check or just ignore!</span><span class="token comment">//------------------------------------------Deletion_Functions----------------</span><span class="token comment">// About ClassicDataList</span><span class="token comment">// delete a  data in the datalist by offering a position</span><span class="token comment">//used like this: eraseAElementfromDataList(list, erasing_pos)</span><span class="token comment">//</span>ClassicLinkListFunctionStatues <span class="token function">eraseAElementfromDataList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span><span class="token class-name">size_t</span>pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> pos<span class="token operator">></span>list<span class="token operator">-></span>current_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_Invalid_Input<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_Invalid_Input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Classic_DataNode<span class="token operator">*</span> pNewHead <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> pDel <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span>list<span class="token operator">-></span>Head <span class="token operator">=</span> pNewHead<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>pDel<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token operator">-></span>current_size<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pCur <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pDel <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>pCur<span class="token operator">-></span>p_next_one <span class="token operator">=</span> pDel<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>pDel<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>pDel<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token operator">-></span>current_size<span class="token operator">--</span><span class="token punctuation">;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// About ClassicDataList</span><span class="token comment">// delete a bunch of data in the datalist</span><span class="token comment">// used like this eraseAbunchData( list,  front_pos,  final_pos)</span><span class="token comment">//</span>ClassicLinkListFunctionStatues <span class="token function">eraseAbunchData_inDataList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token class-name">size_t</span>front_pos<span class="token punctuation">,</span><span class="token class-name">size_t</span>final_pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>front_pos<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> front_pos<span class="token operator">></span>list<span class="token operator">-></span>current_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_Invalid_Input<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_Invalid_Input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>final_pos<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> final_pos<span class="token operator">></span>list<span class="token operator">-></span>current_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_Invalid_Input<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_Invalid_Input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>front_pos <span class="token operator">></span> final_pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_WARNING_ClassicLinkList_SWAPPED_POS<span class="token punctuation">;</span><span class="token function">SHOW_WHETHER_ACCCEPTED</span><span class="token punctuation">(</span><span class="token string">"y/n: y for yes , n for n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> choice<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>choice<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token char">'y'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> final_pos<span class="token punctuation">;</span>final_pos <span class="token operator">=</span> front_pos<span class="token punctuation">;</span>front_pos <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_Invalid_Input<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_Invalid_Input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Bool flag <span class="token operator">=</span>False<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>front_pos <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>flag <span class="token operator">=</span> True<span class="token punctuation">;</span>front_pos<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pCur <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> front_pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> cur_place <span class="token operator">=</span> front_pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>cur_place <span class="token operator">&lt;=</span> final_pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Classic_DataNode<span class="token operator">*</span> pDel <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>pCur<span class="token operator">-></span>p_next_one <span class="token operator">=</span> pDel<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>pDel<span class="token punctuation">)</span><span class="token punctuation">;</span>cur_place<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>list<span class="token operator">-></span>current_size <span class="token operator">-=</span> final_pos <span class="token operator">-</span> front_pos <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> True<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Classic_DataNode<span class="token operator">*</span> pNewHead <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> pDel <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span>list<span class="token operator">-></span>Head <span class="token operator">=</span> pNewHead<span class="token punctuation">;</span><span class="token function">free</span><span class="token punctuation">(</span>pDel<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>front_pos<span class="token operator">++</span><span class="token punctuation">;</span>list<span class="token operator">-></span>current_size<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查询位置类函数"><a href="#查询位置类函数" class="headerlink" title="查询位置类函数"></a>查询位置类函数</h2><p>​        这个函数模块比较大了，我们首先设计一个是否存在的查询，其次还要设计返回位置的函数，甚至是返回多个位置的函数：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//----------------------------------------check_if_element_existed_functions-----</span><span class="token comment">// there are four functions in this sections</span><span class="token comment">// </span><span class="token comment">// 1.check if the classiclinklist is empty</span><span class="token comment">// fun1: isEmptyClassicLinkList</span><span class="token comment">// </span><span class="token comment">// input :the checked list</span><span class="token comment">// output: My defined bool(Sadly the org C doesn't define that)</span><span class="token comment">// </span><span class="token comment">// ------------------------------------------------------------------------------</span><span class="token comment">// </span><span class="token comment">// 2. check if the target elements is exsited in the datalist</span><span class="token comment">// fun2: checkIsLocateinLinkList</span><span class="token comment">// </span><span class="token comment">// input : the checked list ,the searched data and the Compared functions</span><span class="token comment">// output: the locations that we first found it</span><span class="token comment">// </span><span class="token comment">// -------------------------------------------------------------------------------</span><span class="token comment">// </span><span class="token comment">// 3. return out the first locations that we found of the target elements</span><span class="token comment">// func3:checkIsLocateinLinkList</span><span class="token comment">// </span><span class="token comment">// input : the checked list ,the searched data and the Compared functions</span><span class="token comment">// output: My defined bool(Sadly the org C doesn't define that)</span><span class="token comment">// </span><span class="token comment">// --------------------------------------------------------------------------------</span><span class="token comment">// </span><span class="token comment">// Warning : this functions required the PSDA abstractions is opened so you can use Position_Stored_Dynamic_ArrayFordyarr*</span><span class="token comment">// to get the position</span><span class="token comment">// </span><span class="token comment">// 4. return out a bunch of data that was contained in Position_Stored_Dynamic_ArrayFordyarr</span><span class="token comment">// fun4:returnAbunchLocationsinLinkList</span><span class="token comment">// </span><span class="token comment">// input : the checked list , the Position_Stored_Dynamic_ArrayFordyarr*(required init first)</span><span class="token comment">// output: the Position_Stored_Dynamic_ArrayFordyarr that stored the positions!</span><span class="token comment">//</span><span class="token comment">// -------------------------------------------------------------------</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表是否为空函数"><a href="#链表是否为空函数" class="headerlink" title="链表是否为空函数"></a>链表是否为空函数</h3><p>​        很简答，直接略</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// About ClassicLinkList</span><span class="token comment">// check if the LinkList is empty</span><span class="token comment">//</span>Bool <span class="token function">isEmptyClassicLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token operator">-></span>current_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> True<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> False<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        对于元素是否存在，我看，我们的用户要定义什么是存在，就是说，提供一个函数可以描述需求：</p><p>​         使用 LocateFun 函数就好了</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">LocateFunc user_func<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// About ClassicLinkList</span><span class="token comment">// check if the target elements is exsited in the datalist</span><span class="token comment">//</span>Bool <span class="token function">checkIsLocateinLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span>data<span class="token punctuation">,</span>LocateFuncuser_func<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        检查输入的合法性：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>user_func <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        走一遍，比较一遍就好了：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Classic_DataNode<span class="token operator">*</span> pCur <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token operator">-></span>current_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">user_func</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> pCur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> True<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> False<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        返回具体位置？把存在改成返回位置就好了！</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// About ClassicLinkList</span><span class="token comment">// return out the first locations that we found of the target elements</span><span class="token comment">// can use in this way: size_t pos = returnOutDatabyposinLinkList( list, data, user_func)</span><span class="token class-name">size_t</span> <span class="token function">returnOutDatabyposinLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span>data<span class="token punctuation">,</span> LocateFuncuser_func<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Classic_DataNode<span class="token operator">*</span> pCur <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token operator">-></span>current_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">user_func</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> pCur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> Unfind_ClassicLinkList<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>     下面的多重返回：需要打开动态数组存储</code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// About ClassicLinkList</span><span class="token comment">// return out a bunch of data that was contained in Position_Stored_Dynamic_ArrayFordyarr</span><span class="token comment">// can use in this way: Position_Stored_Dynamic_ArrayFordyarr* somePos = </span><span class="token comment">// returnAbunchLocationsinLinkList( list,  posArr,  data,  user_func)</span><span class="token comment">//</span>Position_Stored_Dynamic_ArrayFordyarr<span class="token operator">*</span> <span class="token function">returnAbunchLocationsinLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span> Position_Stored_Dynamic_ArrayFordyarr<span class="token operator">*</span>  posArr<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span>   data<span class="token punctuation">,</span>LocateFunc    user_func<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>posArr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> p_Currency <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">int</span> possible_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token operator">-></span>current_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>user_func<span class="token punctuation">)</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> p_Currency<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//开始重新开辟下内存</span><span class="token keyword">int</span><span class="token operator">*</span> pro_usable_stored_space <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>posArr<span class="token operator">-></span>posSpace<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>possible_count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pro_usable_stored_space<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>posArr<span class="token operator">-></span>posSpace <span class="token operator">=</span> pro_usable_stored_space<span class="token punctuation">;</span>            <span class="token comment">//向第I个位置存储</span>posArr<span class="token operator">-></span>posSpace<span class="token punctuation">[</span>possible_count<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>possible_count<span class="token operator">++</span><span class="token punctuation">;</span>posArr<span class="token operator">-></span>pos_size <span class="token operator">=</span> possible_count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>p_Currency <span class="token operator">=</span> p_Currency<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>posArr<span class="token operator">-></span>pos_size<span class="token punctuation">)</span><span class="token keyword">return</span> posArr<span class="token punctuation">;</span><span class="token keyword">return</span> Unfind_ClassicLinkList<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询函数一览"><a href="#查询函数一览" class="headerlink" title="查询函数一览"></a>查询函数一览</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//----------------------------------------check_if_element_existed_functions-----</span><span class="token comment">// there are four functions in this sections</span><span class="token comment">// </span><span class="token comment">// 1.check if the classiclinklist is empty</span><span class="token comment">// fun1: isEmptyClassicLinkList</span><span class="token comment">// </span><span class="token comment">// input :the checked list</span><span class="token comment">// output: My defined bool(Sadly the org C doesn't define that)</span><span class="token comment">// </span><span class="token comment">// ------------------------------------------------------------------------------</span><span class="token comment">// </span><span class="token comment">// 2. check if the target elements is exsited in the datalist</span><span class="token comment">// fun2: checkIsLocateinLinkList</span><span class="token comment">// </span><span class="token comment">// input : the checked list ,the searched data and the Compared functions</span><span class="token comment">// output: the locations that we first found it</span><span class="token comment">// </span><span class="token comment">// -------------------------------------------------------------------------------</span><span class="token comment">// </span><span class="token comment">// 3. return out the first locations that we found of the target elements</span><span class="token comment">// func3:checkIsLocateinLinkList</span><span class="token comment">// </span><span class="token comment">// input : the checked list ,the searched data and the Compared functions</span><span class="token comment">// output: My defined bool(Sadly the org C doesn't define that)</span><span class="token comment">// </span><span class="token comment">// --------------------------------------------------------------------------------</span><span class="token comment">// </span><span class="token comment">// Warning : this functions required the PSDA abstractions is opened so you can use Position_Stored_Dynamic_ArrayFordyarr*</span><span class="token comment">// to get the position</span><span class="token comment">// </span><span class="token comment">// 4. return out a bunch of data that was contained in Position_Stored_Dynamic_ArrayFordyarr</span><span class="token comment">// fun4:returnAbunchLocationsinLinkList</span><span class="token comment">// </span><span class="token comment">// input : the checked list , the Position_Stored_Dynamic_ArrayFordyarr*(required init first)</span><span class="token comment">// output: the Position_Stored_Dynamic_ArrayFordyarr that stored the positions!</span><span class="token comment">//</span><span class="token comment">// ---------------------------------------------------------------------------------</span><span class="token comment">// About ClassicLinkList</span><span class="token comment">// check if the LinkList is empty</span><span class="token comment">//</span>Bool <span class="token function">isEmptyClassicLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token operator">-></span>current_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> True<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> False<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// About ClassicLinkList</span><span class="token comment">// check if the target elements is exsited in the datalist</span><span class="token comment">//</span>Bool <span class="token function">checkIsLocateinLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span>data<span class="token punctuation">,</span>LocateFuncuser_func<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>user_func <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pCur <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token operator">-></span>current_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">user_func</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> pCur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> True<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> False<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// About ClassicLinkList</span><span class="token comment">// return out the first locations that we found of the target elements</span><span class="token comment">// can use in this way: size_t pos = returnOutDatabyposinLinkList( list, data, user_func)</span><span class="token class-name">size_t</span> <span class="token function">returnOutDatabyposinLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span>data<span class="token punctuation">,</span> LocateFuncuser_func<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Classic_DataNode<span class="token operator">*</span> pCur <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token operator">-></span>current_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">user_func</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> pCur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> Unfind_ClassicLinkList<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Make sure the OPENUPPOSARR == 1 if wanted to use it</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression">OPENUPPOSARR</span></span><span class="token comment">// About ClassicLinkList</span><span class="token comment">// return out a bunch of data that was contained in Position_Stored_Dynamic_ArrayFordyarr</span><span class="token comment">// can use in this way: Position_Stored_Dynamic_ArrayFordyarr* somePos = </span><span class="token comment">// returnAbunchLocationsinLinkList( list,  posArr,  data,  user_func)</span><span class="token comment">//</span>Position_Stored_Dynamic_ArrayFordyarr<span class="token operator">*</span> <span class="token function">returnAbunchLocationsinLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span> Position_Stored_Dynamic_ArrayFordyarr<span class="token operator">*</span>posArr<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span>data<span class="token punctuation">,</span>LocateFuncuser_func<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>posArr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> p_Currency <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">int</span> possible_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token operator">-></span>current_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>user_func<span class="token punctuation">)</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> p_Currency<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token operator">*</span> pro_usable_stored_space <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">realloc</span><span class="token punctuation">(</span>posArr<span class="token operator">-></span>posSpace<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>possible_count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pro_usable_stored_space<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>posArr<span class="token operator">-></span>posSpace <span class="token operator">=</span> pro_usable_stored_space<span class="token punctuation">;</span>posArr<span class="token operator">-></span>posSpace<span class="token punctuation">[</span>possible_count<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>possible_count<span class="token operator">++</span><span class="token punctuation">;</span>posArr<span class="token operator">-></span>pos_size <span class="token operator">=</span> possible_count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>p_Currency <span class="token operator">=</span> p_Currency<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>posArr<span class="token operator">-></span>pos_size<span class="token punctuation">)</span><span class="token keyword">return</span> posArr<span class="token punctuation">;</span><span class="token keyword">return</span> Unfind_ClassicLinkList<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一些作用函数"><a href="#一些作用函数" class="headerlink" title="一些作用函数"></a>一些作用函数</h2><p>请看一览：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//---------------------------------------Do_Something_to_the_datalist_functions----------</span><span class="token comment">// there are seven functions in this sections</span><span class="token comment">// </span><span class="token comment">// 1. Classic Print functions</span><span class="token comment">// func1: Print_All_Data_LinkList</span><span class="token comment">// to print all the data in the user_defined linklist</span><span class="token comment">// </span><span class="token comment">// input : list and the user print , and the decision whether enjoyed a better print</span><span class="token comment">// output: the statues of normal ,can be used in check or just ignore!</span><span class="token comment">// </span><span class="token comment">// ------------------------------------------------------------------------------------</span><span class="token comment">// </span><span class="token comment">// 2. Do some change to the specific data</span><span class="token comment">// to make some change directly to an element</span><span class="token comment">// </span><span class="token comment">// input : the list ,the targeted positions and the way how you want to operate the data itself</span><span class="token comment">// output: the statues of normal ,can be used in check or just ignore!</span><span class="token comment">// </span><span class="token comment">// ------------------------------------------------------------------------------------</span><span class="token comment">// </span><span class="token comment">// 3. Do some change to all the data in the classiclinklist</span><span class="token comment">// to make some change directly to the whole elements</span><span class="token comment">// </span><span class="token comment">// input : the list ,the way how you want to operate the data itself</span><span class="token comment">// output: the statues of normal ,can be used in check or just ignore!</span><span class="token comment">// </span><span class="token comment">// -----------------------------------------------------------------------------------</span><span class="token comment">// </span><span class="token comment">// 4. Do specific change to an interval pos in the classicLickList</span><span class="token comment">// to make some change directly to the interval elements</span><span class="token comment">// </span><span class="token comment">// input : the list ,the front_pos and the final_pos</span><span class="token comment">// output: the statues of normal ,can be used in check or just ignore!</span><span class="token comment">// </span><span class="token comment">// -----------------------------------------------------------------------------------</span><span class="token comment">// </span><span class="token comment">// 5. reverse ClassicLinkList</span><span class="token comment">// to reverse up the classic LinkList</span><span class="token comment">// </span><span class="token comment">// input : the ready_reversed data</span><span class="token comment">// output: the statues of normal ,can be used in check or just ignore!</span><span class="token comment">// </span><span class="token comment">// -----------------------------------------------------------------------------------</span><span class="token comment">// </span><span class="token comment">// 6. combine two linkList into one</span><span class="token comment">// to combine the two classic linklist into one!</span><span class="token comment">// </span><span class="token comment">// input : the two linklist</span><span class="token comment">// output: the merged linklist Pointer</span><span class="token comment">// </span><span class="token comment">// -----------------------------------------------------------------------------------</span><span class="token comment">// </span><span class="token comment">// 7. sort the elements in the classicLinkList under the user's constructions</span><span class="token comment">// to sort the ClassicLinkList</span><span class="token comment">// </span><span class="token comment">// input : the classicLinklist</span><span class="token comment">// output: the statues of normal ,can be used in check or just ignore!</span><span class="token comment">// </span><span class="token comment">// --------------------------------------------------------------------</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打印函数"><a href="#打印函数" class="headerlink" title="打印函数"></a>打印函数</h3><p>​        还是遍历链表，由于跟查询类似就不再多费口舌了：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// About ClassicLinkList</span><span class="token comment">// to print the data</span><span class="token comment">// use in this way: Print_All_Data_LinkList( list, user_print,  whether_better_print)</span><span class="token comment">//</span>ClassicLinkListFunctionStatues <span class="token function">Print_All_Data_LinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>   list<span class="token punctuation">,</span>MyPrint  user_print<span class="token punctuation">,</span> BetterPrintSwitch_for_ClassicLinkList whether_better_print<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user_print<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>whether_better_print <span class="token operator">==</span> ClassicLinkList_OPEN<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nStart printing:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> p_Currency <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token operator">-></span>current_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">user_print</span><span class="token punctuation">(</span>p_Currency<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>p_Currency <span class="token operator">=</span> p_Currency<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>whether_better_print <span class="token operator">==</span> ClassicLinkList_OPEN<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nFinish printing:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三大作用函数"><a href="#三大作用函数" class="headerlink" title="三大作用函数"></a>三大作用函数</h3><h4 id="个体作用函数"><a href="#个体作用函数" class="headerlink" title="个体作用函数"></a>个体作用函数</h4><p>​        跟查询单个类似：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// About ClassicLinkList</span><span class="token comment">// to make some change to the specific data</span><span class="token comment">// use in this way:doChangetoSpecificElementinLinkList( list,  pos , user_func)</span><span class="token comment">//</span>ClassicLinkListFunctionStatues <span class="token function">doChangetoSpecificElementinLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token class-name">size_t</span>pos <span class="token punctuation">,</span>Do_Specific_Changeuser_func<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 数据合法性</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>user_func<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> pos<span class="token operator">></span>list<span class="token operator">-></span>current_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_Invalid_Input<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_Invalid_Input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 开始寻找对应的</span>Classic_DataNode<span class="token operator">*</span> pCur <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pos<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">user_func</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="区间作用函数"><a href="#区间作用函数" class="headerlink" title="区间作用函数"></a>区间作用函数</h4><p>​        不难想的：提供作用方式 + 区间长度+区间位置</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// About ClassicLinkList</span><span class="token comment">// to make some change to the interval data</span><span class="token comment">// use in this way:doChangetoTargetIntervalDatainLinkList(list , pos1,pos2, user_func)</span><span class="token comment">//</span>ClassicLinkListFunctionStatues <span class="token function">doChangetoTargetIntervalDatainLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token class-name">size_t</span>front_pos<span class="token punctuation">,</span><span class="token class-name">size_t</span>final_pos<span class="token punctuation">,</span>Do_Specific_Changeuser_func<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        还是类似的：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 数据检查</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>front_pos<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> front_pos<span class="token operator">></span>list<span class="token operator">-></span>current_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_Invalid_Input<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_Invalid_Input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>final_pos<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> final_pos<span class="token operator">></span>list<span class="token operator">-></span>current_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_Invalid_Input<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_Invalid_Input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>front_pos <span class="token operator">></span> final_pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_WARNING_ClassicLinkList_SWAPPED_POS<span class="token punctuation">;</span><span class="token function">SHOW_WHETHER_ACCCEPTED</span><span class="token punctuation">(</span><span class="token string">"y/n: y for yes , n for n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> choice<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>choice<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token char">'y'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> final_pos<span class="token punctuation">;</span>final_pos <span class="token operator">=</span> front_pos<span class="token punctuation">;</span>front_pos <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_Invalid_Input<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_Invalid_Input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pCur <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> front_pos<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> front_pos<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> final_pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">user_func</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="全体作用"><a href="#全体作用" class="headerlink" title="全体作用"></a>全体作用</h4><p>​        不细说，类似的：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// About ClassicLinkList</span><span class="token comment">// to make some change to the whole elements in the data</span><span class="token comment">// use in this way:doChangetoAllDatainLinkList( list,  user_func)</span><span class="token comment">//</span>ClassicLinkListFunctionStatues <span class="token function">doChangetoAllDatainLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span>Do_Specific_Changeuser_func<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> user_func <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pCur <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token operator">-></span>current_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">user_func</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>pCur<span class="token operator">=</span>pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="三大函数API一览"><a href="#三大函数API一览" class="headerlink" title="三大函数API一览"></a>三大函数API一览</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// About ClassicLinkList</span><span class="token comment">// to make some change to the specific data</span><span class="token comment">// use in this way:doChangetoSpecificElementinLinkList( list,  pos , user_func)</span><span class="token comment">//</span>ClassicLinkListFunctionStatues <span class="token function">doChangetoSpecificElementinLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token class-name">size_t</span>pos <span class="token punctuation">,</span>Do_Specific_Changeuser_func<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>user_func<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> pos<span class="token operator">></span>list<span class="token operator">-></span>current_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_Invalid_Input<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_Invalid_Input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pCur <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pos<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">user_func</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// About ClassicLinkList</span><span class="token comment">// to make some change to the interval data</span><span class="token comment">// use in this way:doChangetoTargetIntervalDatainLinkList(list , pos1,pos2, user_func)</span><span class="token comment">//</span>ClassicLinkListFunctionStatues <span class="token function">doChangetoTargetIntervalDatainLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token class-name">size_t</span>front_pos<span class="token punctuation">,</span><span class="token class-name">size_t</span>final_pos<span class="token punctuation">,</span>Do_Specific_Changeuser_func<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>front_pos<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> front_pos<span class="token operator">></span>list<span class="token operator">-></span>current_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_Invalid_Input<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_Invalid_Input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>final_pos<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> final_pos<span class="token operator">></span>list<span class="token operator">-></span>current_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_Invalid_Input<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_Invalid_Input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>front_pos <span class="token operator">></span> final_pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_WARNING_ClassicLinkList_SWAPPED_POS<span class="token punctuation">;</span><span class="token function">SHOW_WHETHER_ACCCEPTED</span><span class="token punctuation">(</span><span class="token string">"y/n: y for yes , n for n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> choice<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>choice<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token char">'y'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> final_pos<span class="token punctuation">;</span>final_pos <span class="token operator">=</span> front_pos<span class="token punctuation">;</span>front_pos <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_Invalid_Input<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_Invalid_Input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pCur <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> front_pos<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> front_pos<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> final_pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">user_func</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// About ClassicLinkList</span><span class="token comment">// to make some change to the whole elements in the data</span><span class="token comment">// use in this way:doChangetoAllDatainLinkList( list,  user_func)</span><span class="token comment">//</span>ClassicLinkListFunctionStatues <span class="token function">doChangetoAllDatainLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span>Do_Specific_Changeuser_func<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> user_func <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pCur <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token operator">-></span>current_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">user_func</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>pCur<span class="token operator">=</span>pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="翻转链表函数"><a href="#翻转链表函数" class="headerlink" title="翻转链表函数"></a>翻转链表函数</h3><p>​        看一个反转链表的函数</p><p>​        为了加快效率，我们分类讨论一下：</p><p>​        一个没必要反转，两个直接互换就好，问题在于多个的：</p><pre class="line-numbers language-none"><code class="language-none">if (list &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;if (list-&gt;current_size &#x3D;&#x3D; 1)&#123;printf(&quot;No need in reversing!,try a longer one lol&quot;);return ClassicLinkList_NORMAL;&#125;if (list-&gt;current_size &#x3D;&#x3D; 2)&#123;Classic_DataNode* headFisrt &#x3D; list-&gt;Head;Classic_DataNode* pFin &#x3D; headFisrt-&gt;p_next_one;pFin-&gt;p_next_one &#x3D; headFisrt;headFisrt-&gt;p_next_one &#x3D; NULL;list-&gt;Head &#x3D; pFin;return ClassicLinkList_NORMAL;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        对于一个中间片段：</p><p><img src="image-20230215155300284.png" alt="image-20230215155300284"></p><p>​        我们需要首先将指针反转，然后，后行指针先被先行指针赋值：</p><p><img src="image-20230215155447947.png" alt="image-20230215155447947"></p><p>​        先行指针后移：成为子问题：</p><p><img src="image-20230215155521784.png" alt="image-20230215155521784"></p><p>​        代码上就是这样的：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// About ClassicLinkList</span><span class="token comment">// to reverse up the classiclinklist</span><span class="token comment">// use in this way:ReverseLinkList(list)</span><span class="token comment">//</span>ClassicLinkListFunctionStatues <span class="token function">ReverseLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token operator">-></span>current_size <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No need in reversing!,try a longer one lol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token operator">-></span>current_size <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Classic_DataNode<span class="token operator">*</span> headFisrt <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> pFin <span class="token operator">=</span> headFisrt<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>pFin<span class="token operator">-></span>p_next_one <span class="token operator">=</span> headFisrt<span class="token punctuation">;</span>headFisrt<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>list<span class="token operator">-></span>Head <span class="token operator">=</span> pFin<span class="token punctuation">;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pFinal <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> pPrior <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>pFinal<span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Classic_DataNode<span class="token operator">*</span> tempFin <span class="token operator">=</span> pFinal<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>pFinal<span class="token operator">-></span>p_next_one <span class="token operator">=</span> pPrior<span class="token punctuation">;</span>pPrior <span class="token operator">=</span> pFinal<span class="token punctuation">;</span>pFinal <span class="token operator">=</span> tempFin<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>list<span class="token operator">-></span>Head <span class="token operator">=</span> pPrior<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链表的合并于衔接函数"><a href="#链表的合并于衔接函数" class="headerlink" title="链表的合并于衔接函数"></a>链表的合并于衔接函数</h3><p>​        对于这样，仍然是先检查合法性+指向末尾：</p><p>​        况且，如果用户不想拷贝数据，直接传参</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>list_be_added <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> list_adder <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pCur<span class="token operator">=</span>list_be_added<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list_be_added<span class="token operator">-></span>current_size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Do not copy , instead just merge!</span><span class="token keyword">if</span> <span class="token punctuation">(</span>whether_copied<span class="token operator">==</span>ClassicLinkList_NO_COPY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>pCur<span class="token operator">-></span>p_next_one <span class="token operator">=</span> list_adder<span class="token operator">-></span>Head<span class="token punctuation">;</span>list_be_added<span class="token operator">-></span>current_size <span class="token operator">+=</span> list_adder<span class="token operator">-></span>current_size<span class="token punctuation">;</span><span class="token keyword">return</span> list_be_added<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        拷贝的话，就是 copy + 衔接的问题：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Classic_DataNode<span class="token operator">*</span> pAdder <span class="token operator">=</span> list_adder<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list_adder<span class="token operator">-></span>current_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//prepare the space</span>Classic_DataNode<span class="token operator">*</span> pCopy <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> dataCopy <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>pAdder<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pCopy <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> dataCopy <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Using to copy data and initialize the copied node</span><span class="token function">memcpy</span><span class="token punctuation">(</span>dataCopy<span class="token punctuation">,</span> pAdder<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pAdder<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pCopy<span class="token operator">-></span>data <span class="token operator">=</span> dataCopy<span class="token punctuation">;</span>pCopy<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//then push back into the linklist</span>pCur<span class="token operator">-></span>p_next_one <span class="token operator">=</span> pCopy<span class="token punctuation">;</span><span class="token comment">//Moving the copy pointer</span>pAdder <span class="token operator">=</span> pAdder<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>list_be_added<span class="token operator">-></span>current_size <span class="token operator">+=</span> list_adder<span class="token operator">-></span>current_size<span class="token punctuation">;</span><span class="token keyword">return</span> list_be_added<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        看看：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// About ClassicLinkList</span><span class="token comment">// to merge two linklist into the one</span><span class="token comment">// use in this way:mergeLinkList(list_be_added, list_adder, whether_copied)</span><span class="token comment">//</span>Classic_DataList<span class="token operator">*</span> <span class="token function">mergeLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list_be_added<span class="token punctuation">,</span> Classic_DataList<span class="token operator">*</span>list_adder<span class="token punctuation">,</span> <span class="token class-name">size_t</span>whether_copied<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list_be_added <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> list_adder <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pCur<span class="token operator">=</span>list_be_added<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list_be_added<span class="token operator">-></span>current_size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Do not copy , instead just merge!</span><span class="token keyword">if</span> <span class="token punctuation">(</span>whether_copied<span class="token operator">==</span>ClassicLinkList_NO_COPY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>pCur<span class="token operator">-></span>p_next_one <span class="token operator">=</span> list_adder<span class="token operator">-></span>Head<span class="token punctuation">;</span>list_be_added<span class="token operator">-></span>current_size <span class="token operator">+=</span> list_adder<span class="token operator">-></span>current_size<span class="token punctuation">;</span><span class="token keyword">return</span> list_be_added<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pAdder <span class="token operator">=</span> list_adder<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list_adder<span class="token operator">-></span>current_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//prepare the space</span>Classic_DataNode<span class="token operator">*</span> pCopy <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> dataCopy <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>pAdder<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pCopy <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> dataCopy <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Using to copy data and initialize the copied node</span><span class="token function">memcpy</span><span class="token punctuation">(</span>dataCopy<span class="token punctuation">,</span> pAdder<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pAdder<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pCopy<span class="token operator">-></span>data <span class="token operator">=</span> dataCopy<span class="token punctuation">;</span>pCopy<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//then push back into the linklist</span>pCur<span class="token operator">-></span>p_next_one <span class="token operator">=</span> pCopy<span class="token punctuation">;</span><span class="token comment">//Moving the copy pointer</span>pAdder <span class="token operator">=</span> pAdder<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>list_be_added<span class="token operator">-></span>current_size <span class="token operator">+=</span> list_adder<span class="token operator">-></span>current_size<span class="token punctuation">;</span><span class="token keyword">return</span> list_be_added<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="排序整理函数"><a href="#排序整理函数" class="headerlink" title="排序整理函数"></a>排序整理函数</h3><p>​        使用冒泡排序排序我们的链表，两两的比较，本质上就是 pCur 跟 pCur<code>-&gt;</code>next_one 比较。。。那就很简单了：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// About ClassicLinkList</span><span class="token comment">// sort the classicLinklist in the bobblesort</span><span class="token comment">// use in this way:sortClassicLinkListinBubbleSort(Classic_DataList* list, CompareFunc user_func) </span><span class="token comment">//</span>ClassicLinkListFunctionStatues <span class="token function">sortClassicLinkListinBubbleSort</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span> CompareFuncuser_func<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//检查数据是否合法</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>user_func <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token operator">-></span>current_size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Classic_DataNode<span class="token operator">*</span> pCur <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>list<span class="token operator">-></span>current_size<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//this two for loops are just standard BobbleSort</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">user_func</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>data<span class="token punctuation">,</span> pCur<span class="token operator">-></span>p_next_one<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">void</span><span class="token operator">*</span> tempdata <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>tempdata<span class="token punctuation">,</span> pCur<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> tempdatasize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Before Swap,make sure that the dataContainer is huge enough to contain a new space</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>p_next_one<span class="token operator">-></span>data<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">void</span><span class="token operator">*</span> pTempSwap <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>p_next_one<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pTempSwap <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>pCur<span class="token operator">-></span>data <span class="token operator">=</span> pTempSwap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Copy and swap</span><span class="token function">memcpy</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>data<span class="token punctuation">,</span> pCur<span class="token operator">-></span>p_next_one<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>p_next_one<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>p_next_one<span class="token operator">-></span>data<span class="token punctuation">,</span> tempdata<span class="token punctuation">,</span> tempdatasize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Moving pointer to the next one</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="作用函数一览："><a href="#作用函数一览：" class="headerlink" title="作用函数一览："></a>作用函数一览：</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//---------------------------------------Do_Something_to_the_datalist_functions----------</span><span class="token comment">// there are seven functions in this sections</span><span class="token comment">// </span><span class="token comment">// 1. Classic Print functions</span><span class="token comment">// func1: Print_All_Data_LinkList</span><span class="token comment">// to print all the data in the user_defined linklist</span><span class="token comment">// </span><span class="token comment">// input : list and the user print , and the decision whether enjoyed a better print</span><span class="token comment">// output: the statues of normal ,can be used in check or just ignore!</span><span class="token comment">// </span><span class="token comment">// ------------------------------------------------------------------------------------</span><span class="token comment">// </span><span class="token comment">// 2. Do some change to the specific data</span><span class="token comment">// to make some change directly to an element</span><span class="token comment">// </span><span class="token comment">// input : the list ,the targeted positions and the way how you want to operate the data itself</span><span class="token comment">// output: the statues of normal ,can be used in check or just ignore!</span><span class="token comment">// </span><span class="token comment">// ------------------------------------------------------------------------------------</span><span class="token comment">// </span><span class="token comment">// 3. Do some change to all the data in the classiclinklist</span><span class="token comment">// to make some change directly to the whole elements</span><span class="token comment">// </span><span class="token comment">// input : the list ,the way how you want to operate the data itself</span><span class="token comment">// output: the statues of normal ,can be used in check or just ignore!</span><span class="token comment">// </span><span class="token comment">// -----------------------------------------------------------------------------------</span><span class="token comment">// </span><span class="token comment">// 4. Do specific change to an interval pos in the classicLickList</span><span class="token comment">// to make some change directly to the interval elements</span><span class="token comment">// </span><span class="token comment">// input : the list ,the front_pos and the final_pos</span><span class="token comment">// output: the statues of normal ,can be used in check or just ignore!</span><span class="token comment">// </span><span class="token comment">// -----------------------------------------------------------------------------------</span><span class="token comment">// </span><span class="token comment">// 5. reverse ClassicLinkList</span><span class="token comment">// to reverse up the classic LinkList</span><span class="token comment">// </span><span class="token comment">// input : the ready_reversed data</span><span class="token comment">// output: the statues of normal ,can be used in check or just ignore!</span><span class="token comment">// </span><span class="token comment">// -----------------------------------------------------------------------------------</span><span class="token comment">// </span><span class="token comment">// 6. combine two linkList into one</span><span class="token comment">// to combine the two classic linklist into one!</span><span class="token comment">// </span><span class="token comment">// input : the two linklist</span><span class="token comment">// output: the merged linklist Pointer</span><span class="token comment">// </span><span class="token comment">// -----------------------------------------------------------------------------------</span><span class="token comment">// </span><span class="token comment">// 7. sort the elements in the classicLinkList under the user's constructions</span><span class="token comment">// to sort the ClassicLinkList</span><span class="token comment">// </span><span class="token comment">// input : the classicLinklist</span><span class="token comment">// output: the statues of normal ,can be used in check or just ignore!</span><span class="token comment">// </span><span class="token comment">// ---------------------------------------------------------------------------------</span><span class="token comment">// About ClassicLinkList</span><span class="token comment">// to print the data</span><span class="token comment">// use in this way: Print_All_Data_LinkList( list, user_print,  whether_better_print)</span><span class="token comment">//</span>ClassicLinkListFunctionStatues <span class="token function">Print_All_Data_LinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span>MyPrintuser_print<span class="token punctuation">,</span> BetterPrintSwitch_for_ClassicLinkListwhether_better_print<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>user_print<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>whether_better_print <span class="token operator">==</span> ClassicLinkList_OPEN<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nStart printing:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> p_Currency <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token operator">-></span>current_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">user_print</span><span class="token punctuation">(</span>p_Currency<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>p_Currency <span class="token operator">=</span> p_Currency<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>whether_better_print <span class="token operator">==</span> ClassicLinkList_OPEN<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nFinish printing:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// About ClassicLinkList</span><span class="token comment">// to make some change to the specific data</span><span class="token comment">// use in this way:doChangetoSpecificElementinLinkList( list,  pos , user_func)</span><span class="token comment">//</span>ClassicLinkListFunctionStatues <span class="token function">doChangetoSpecificElementinLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token class-name">size_t</span>pos <span class="token punctuation">,</span>Do_Specific_Changeuser_func<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>user_func<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> pos<span class="token operator">></span>list<span class="token operator">-></span>current_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_Invalid_Input<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_Invalid_Input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pCur <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pos<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">user_func</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// About ClassicLinkList</span><span class="token comment">// to make some change to the interval data</span><span class="token comment">// use in this way:doChangetoTargetIntervalDatainLinkList(list , pos1,pos2, user_func)</span><span class="token comment">//</span>ClassicLinkListFunctionStatues <span class="token function">doChangetoTargetIntervalDatainLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span> <span class="token class-name">size_t</span>front_pos<span class="token punctuation">,</span><span class="token class-name">size_t</span>final_pos<span class="token punctuation">,</span>Do_Specific_Changeuser_func<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>front_pos<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> front_pos<span class="token operator">></span>list<span class="token operator">-></span>current_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_Invalid_Input<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_Invalid_Input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>final_pos<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> final_pos<span class="token operator">></span>list<span class="token operator">-></span>current_size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_Invalid_Input<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_Invalid_Input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>front_pos <span class="token operator">></span> final_pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_WARNING_ClassicLinkList_SWAPPED_POS<span class="token punctuation">;</span><span class="token function">SHOW_WHETHER_ACCCEPTED</span><span class="token punctuation">(</span><span class="token string">"y/n: y for yes , n for n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> choice<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>choice<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>choice <span class="token operator">==</span> <span class="token char">'y'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> final_pos<span class="token punctuation">;</span>final_pos <span class="token operator">=</span> front_pos<span class="token punctuation">;</span>front_pos <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_Invalid_Input<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_Invalid_Input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pCur <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> front_pos<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> front_pos<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> final_pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">user_func</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// About ClassicLinkList</span><span class="token comment">// to make some change to the whole elements in the data</span><span class="token comment">// use in this way:doChangetoAllDatainLinkList( list,  user_func)</span><span class="token comment">//</span>ClassicLinkListFunctionStatues <span class="token function">doChangetoAllDatainLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span>Do_Specific_Changeuser_func<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> user_func <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pCur <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token operator">-></span>current_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">user_func</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>pCur<span class="token operator">=</span>pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// About ClassicLinkList</span><span class="token comment">// to reverse up the classiclinklist</span><span class="token comment">// use in this way:ReverseLinkList(list)</span><span class="token comment">//</span>ClassicLinkListFunctionStatues <span class="token function">ReverseLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token operator">-></span>current_size <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No need in reversing!,try a longer one lol"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token operator">-></span>current_size <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Classic_DataNode<span class="token operator">*</span> headFisrt <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> pFin <span class="token operator">=</span> headFisrt<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>pFin<span class="token operator">-></span>p_next_one <span class="token operator">=</span> headFisrt<span class="token punctuation">;</span>headFisrt<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>list<span class="token operator">-></span>Head <span class="token operator">=</span> pFin<span class="token punctuation">;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pFinal <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> pPrior <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>pFinal<span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Classic_DataNode<span class="token operator">*</span> tempFin <span class="token operator">=</span> pFinal<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>pFinal<span class="token operator">-></span>p_next_one <span class="token operator">=</span> pPrior<span class="token punctuation">;</span>pPrior <span class="token operator">=</span> pFinal<span class="token punctuation">;</span>pFinal <span class="token operator">=</span> tempFin<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>list<span class="token operator">-></span>Head <span class="token operator">=</span> pPrior<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// About ClassicLinkList</span><span class="token comment">// to merge two linklist into the one</span><span class="token comment">// use in this way:mergeLinkList(list_be_added, list_adder, whether_copied)</span><span class="token comment">//</span>Classic_DataList<span class="token operator">*</span> <span class="token function">mergeLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list_be_added<span class="token punctuation">,</span> Classic_DataList<span class="token operator">*</span>list_adder<span class="token punctuation">,</span> <span class="token class-name">size_t</span>whether_copied<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list_be_added <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> list_adder <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pCur<span class="token operator">=</span>list_be_added<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list_be_added<span class="token operator">-></span>current_size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Do not copy , instead just merge!</span><span class="token keyword">if</span> <span class="token punctuation">(</span>whether_copied<span class="token operator">==</span>ClassicLinkList_NO_COPY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>pCur<span class="token operator">-></span>p_next_one <span class="token operator">=</span> list_adder<span class="token operator">-></span>Head<span class="token punctuation">;</span>list_be_added<span class="token operator">-></span>current_size <span class="token operator">+=</span> list_adder<span class="token operator">-></span>current_size<span class="token punctuation">;</span><span class="token keyword">return</span> list_be_added<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pAdder <span class="token operator">=</span> list_adder<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list_adder<span class="token operator">-></span>current_size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//prepare the space</span>Classic_DataNode<span class="token operator">*</span> pCopy <span class="token operator">=</span> <span class="token punctuation">(</span>Classic_DataNode<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Classic_DataNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> dataCopy <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>pAdder<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pCopy <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> dataCopy <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Using to copy data and initialize the copied node</span><span class="token function">memcpy</span><span class="token punctuation">(</span>dataCopy<span class="token punctuation">,</span> pAdder<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pAdder<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pCopy<span class="token operator">-></span>data <span class="token operator">=</span> dataCopy<span class="token punctuation">;</span>pCopy<span class="token operator">-></span>p_next_one <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//then push back into the linklist</span>pCur<span class="token operator">-></span>p_next_one <span class="token operator">=</span> pCopy<span class="token punctuation">;</span><span class="token comment">//Moving the copy pointer</span>pAdder <span class="token operator">=</span> pAdder<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>list_be_added<span class="token operator">-></span>current_size <span class="token operator">+=</span> list_adder<span class="token operator">-></span>current_size<span class="token punctuation">;</span><span class="token keyword">return</span> list_be_added<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// About ClassicLinkList</span><span class="token comment">// sort the classicLinklist in the bobblesort</span><span class="token comment">// use in this way:sortClassicLinkListinBubbleSort(Classic_DataList* list, CompareFunc user_func) </span><span class="token comment">//</span>ClassicLinkListFunctionStatues <span class="token function">sortClassicLinkListinBubbleSort</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span>list<span class="token punctuation">,</span> CompareFuncuser_func<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>user_func <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token operator">-></span>current_size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>Classic_DataNode<span class="token operator">*</span> pCur <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>list<span class="token operator">-></span>current_size<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//this two for loops are just standard BobbleSort</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">user_func</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>data<span class="token punctuation">,</span> pCur<span class="token operator">-></span>p_next_one<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">void</span><span class="token operator">*</span> tempdata <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>tempdata<span class="token punctuation">,</span> pCur<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> tempdatasize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Before Swap,make sure that the dataContainer is huge enough to contain a new space</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>p_next_one<span class="token operator">-></span>data<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">void</span><span class="token operator">*</span> pTempSwap <span class="token operator">=</span> <span class="token function">realloc</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>p_next_one<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pTempSwap <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_ERROR_IN_MALLOCING_SPACE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>pCur<span class="token operator">-></span>data <span class="token operator">=</span> pTempSwap<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Copy and swap</span><span class="token function">memcpy</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>data<span class="token punctuation">,</span> pCur<span class="token operator">-></span>p_next_one<span class="token operator">-></span>data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>p_next_one<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">memcpy</span><span class="token punctuation">(</span>pCur<span class="token operator">-></span>p_next_one<span class="token operator">-></span>data<span class="token punctuation">,</span> tempdata<span class="token punctuation">,</span> tempdatasize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//Moving pointer to the next one</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="消除链表"><a href="#消除链表" class="headerlink" title="消除链表"></a>消除链表</h2><p>​        可以看作一个区域删除的扩展</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//----------------------------------------------------Basic_Erase------------------------------</span><span class="token comment">// </span><span class="token comment">// 1.Erase A LinkList</span><span class="token comment">// used in just clear a linklist</span><span class="token comment">// func1: clearAClassicLinkList</span><span class="token comment">// </span><span class="token comment">// input : just a classiclinklist</span><span class="token comment">// output: the statues of normal ,can be used in check or just ignore!</span><span class="token comment">// </span><span class="token comment">// --------------------------------------------------------------------------------------------</span><span class="token comment">//About ClassicLinkList</span><span class="token comment">// Erase a classicLinkList</span><span class="token comment">// Use in this way clearAClassicLinkList( list)</span><span class="token comment">//</span>ClassicLinkListFunctionStatues <span class="token function">clearAClassicLinkList</span><span class="token punctuation">(</span>Classic_DataList<span class="token operator">*</span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>SHOW_ERROR_ClassicLinkList_NULL_INPUT<span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span>ClassicLinkList_NULL_INPUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Classic_DataNode<span class="token operator">*</span> pCur <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span>Classic_DataNode<span class="token operator">*</span> pDel <span class="token operator">=</span> list<span class="token operator">-></span>Head<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token operator">-></span>current_size <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">free</span><span class="token punctuation">(</span>pDel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token operator">-></span>current_size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">free</span><span class="token punctuation">(</span>pDel<span class="token punctuation">)</span><span class="token punctuation">;</span>pDel <span class="token operator">=</span> pCur<span class="token punctuation">;</span>pCur <span class="token operator">=</span> pCur<span class="token operator">-></span>p_next_one<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>list<span class="token operator">-></span>current_size <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span><span class="token keyword">return</span> ClassicLinkList_NORMAL<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试文档"><a href="#测试文档" class="headerlink" title="测试文档"></a>测试文档</h2><p>​        可以把这几个头文件和源文件添加到工程测试：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_CRT_SECURE_NO_WARNINGS</span> <span class="token expression"><span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"ClassicLinkList.h"</span></span>MyPrint <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Do_Specific_Change <span class="token function">dochange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>e <span class="token operator">=</span> <span class="token operator">*</span>e <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>LocateFunc <span class="token function">loc</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> e1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> e2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">*</span>e1 <span class="token operator">==</span> <span class="token operator">*</span>e2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>CompareFunc <span class="token function">comp</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> e1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> e2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">*</span>e1 <span class="token operator">&lt;</span> <span class="token operator">*</span>e2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//do test initailization</span><span class="token comment">//default init</span>Classic_DataList<span class="token operator">*</span> defaultinit <span class="token operator">=</span> <span class="token function">Init_A_ClassicLinkList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//updata init</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Classic_DataList<span class="token operator">*</span> update_one <span class="token operator">=</span> <span class="token function">UpdateStaticArray2ClassicLinkList</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> Dyarr_SIGINT<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Print_All_Data_LinkList</span><span class="token punctuation">(</span>update_one<span class="token punctuation">,</span> print<span class="token punctuation">,</span> ClassicLinkList_OPEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// copy init</span>Classic_DataList<span class="token operator">*</span> copy_one <span class="token operator">=</span> <span class="token function">Init_A_ClassicLinkList_By_CopyAClassicLinkList</span><span class="token punctuation">(</span>update_one<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nThouth , this is the copy one:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Print_All_Data_LinkList</span><span class="token punctuation">(</span>copy_one<span class="token punctuation">,</span> print<span class="token punctuation">,</span> ClassicLinkList_OPEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Push back </span><span class="token keyword">int</span> addersig <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nFirst push:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Push_Back_Into_A_ClassicLinkList</span><span class="token punctuation">(</span>defaultinit<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addersig<span class="token punctuation">,</span> Dyarr_SIGINT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Print_All_Data_LinkList</span><span class="token punctuation">(</span>defaultinit<span class="token punctuation">,</span> print<span class="token punctuation">,</span> ClassicLinkList_OPEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nSecond push:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Push_Back_Into_A_ClassicLinkList</span><span class="token punctuation">(</span>defaultinit<span class="token punctuation">,</span> <span class="token operator">&amp;</span>addersig<span class="token punctuation">,</span> Dyarr_SIGINT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Print_All_Data_LinkList</span><span class="token punctuation">(</span>defaultinit<span class="token punctuation">,</span> print<span class="token punctuation">,</span> ClassicLinkList_OPEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Push back a sum</span><span class="token keyword">int</span> adderarr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">101</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">103</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">105</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">push_Back_BunchDataintoClassicLinkList</span><span class="token punctuation">(</span>defaultinit<span class="token punctuation">,</span> adderarr<span class="token punctuation">,</span> Dyarr_SIGINT<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Print_All_Data_LinkList</span><span class="token punctuation">(</span>defaultinit<span class="token punctuation">,</span> print<span class="token punctuation">,</span> ClassicLinkList_OPEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Insert start:</span><span class="token keyword">int</span> insertionsig <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//to the head:</span><span class="token function">Insert_into_AClassicLinkList</span><span class="token punctuation">(</span>defaultinit<span class="token punctuation">,</span> <span class="token operator">&amp;</span>insertionsig<span class="token punctuation">,</span> Dyarr_SIGINT<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Print_All_Data_LinkList</span><span class="token punctuation">(</span>defaultinit<span class="token punctuation">,</span> print<span class="token punctuation">,</span> ClassicLinkList_OPEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//to other place</span><span class="token function">Insert_into_AClassicLinkList</span><span class="token punctuation">(</span>defaultinit<span class="token punctuation">,</span> <span class="token operator">&amp;</span>insertionsig<span class="token punctuation">,</span> Dyarr_SIGINT<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Print_All_Data_LinkList</span><span class="token punctuation">(</span>defaultinit<span class="token punctuation">,</span> print<span class="token punctuation">,</span> ClassicLinkList_OPEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//for a bunch ...</span><span class="token comment">//head</span><span class="token keyword">int</span> insertarr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">Insert_A_Bunch_of_data_intoClassicLinkList</span><span class="token punctuation">(</span>update_one<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> insertarr<span class="token punctuation">,</span> Dyarr_SIGINT<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Print_All_Data_LinkList</span><span class="token punctuation">(</span>update_one<span class="token punctuation">,</span> print<span class="token punctuation">,</span> ClassicLinkList_OPEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//other place</span><span class="token function">Insert_A_Bunch_of_data_intoClassicLinkList</span><span class="token punctuation">(</span>update_one<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> insertarr<span class="token punctuation">,</span> Dyarr_SIGINT<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Print_All_Data_LinkList</span><span class="token punctuation">(</span>update_one<span class="token punctuation">,</span> print<span class="token punctuation">,</span> ClassicLinkList_OPEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Erase </span><span class="token function">eraseAElementfromDataList</span><span class="token punctuation">(</span>copy_one<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Print_All_Data_LinkList</span><span class="token punctuation">(</span>copy_one<span class="token punctuation">,</span> print<span class="token punctuation">,</span> ClassicLinkList_OPEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">eraseAElementfromDataList</span><span class="token punctuation">(</span>copy_one<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Print_All_Data_LinkList</span><span class="token punctuation">(</span>copy_one<span class="token punctuation">,</span> print<span class="token punctuation">,</span> ClassicLinkList_OPEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Erase bunch</span><span class="token function">eraseAbunchData_inDataList</span><span class="token punctuation">(</span>copy_one<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Print_All_Data_LinkList</span><span class="token punctuation">(</span>copy_one<span class="token punctuation">,</span> print<span class="token punctuation">,</span> ClassicLinkList_OPEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//make change:</span><span class="token comment">//sig</span><span class="token function">doChangetoSpecificElementinLinkList</span><span class="token punctuation">(</span>copy_one<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> dochange<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Print_All_Data_LinkList</span><span class="token punctuation">(</span>copy_one<span class="token punctuation">,</span> print<span class="token punctuation">,</span> ClassicLinkList_OPEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//interval</span><span class="token function">doChangetoTargetIntervalDatainLinkList</span><span class="token punctuation">(</span>copy_one<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> dochange<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Print_All_Data_LinkList</span><span class="token punctuation">(</span>copy_one<span class="token punctuation">,</span> print<span class="token punctuation">,</span> ClassicLinkList_OPEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//all</span><span class="token function">doChangetoAllDatainLinkList</span><span class="token punctuation">(</span>copy_one<span class="token punctuation">,</span> dochange<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Print_All_Data_LinkList</span><span class="token punctuation">(</span>copy_one<span class="token punctuation">,</span> print<span class="token punctuation">,</span> ClassicLinkList_OPEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//check if in</span>Classic_DataList<span class="token operator">*</span> checkerlist <span class="token operator">=</span> <span class="token function">UpdateStaticArray2ClassicLinkList</span><span class="token punctuation">(</span>insertarr<span class="token punctuation">,</span> Dyarr_SIGINT<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> wannafind <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"So is it null?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEmptyClassicLinkList</span><span class="token punctuation">(</span>checkerlist<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\nNot null sir!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">checkIsLocateinLinkList</span><span class="token punctuation">(</span>checkerlist<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wannafind<span class="token punctuation">,</span> loc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"yes, there is a num that is -1\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"and it is on the place: %d\n"</span><span class="token punctuation">,</span> <span class="token function">returnOutDatabyposinLinkList</span><span class="token punctuation">(</span>checkerlist<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wannafind<span class="token punctuation">,</span> loc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> wannafind2 <span class="token operator">=</span> wannafind <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"and also there is -2 too, it is in: %d\n"</span><span class="token punctuation">,</span> <span class="token function">returnOutDatabyposinLinkList</span><span class="token punctuation">(</span>checkerlist<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wannafind2<span class="token punctuation">,</span> loc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I can also make a change in this way directly:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">doChangetoSpecificElementinLinkList</span><span class="token punctuation">(</span>checkerlist<span class="token punctuation">,</span> <span class="token function">returnOutDatabyposinLinkList</span><span class="token punctuation">(</span>checkerlist<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wannafind2<span class="token punctuation">,</span> loc<span class="token punctuation">)</span><span class="token punctuation">,</span> dochange<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Print_All_Data_LinkList</span><span class="token punctuation">(</span>checkerlist<span class="token punctuation">,</span> print<span class="token punctuation">,</span> ClassicLinkList_OPEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//find bunch </span>Position_Stored_Dynamic_ArrayFordyarr<span class="token operator">*</span> posarr <span class="token operator">=</span> <span class="token function">Init_A_Postion_Stored_Dynamic_ArrayFordyarr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">returnAbunchLocationsinLinkList</span><span class="token punctuation">(</span>checkerlist<span class="token punctuation">,</span> posarr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>wannafind<span class="token punctuation">,</span> loc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Show_All_Locations_In_PSDAfor_dyarr</span><span class="token punctuation">(</span>posarr<span class="token punctuation">,</span> PSDA_dyarr_OPEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//reverse</span><span class="token function">ReverseLinkList</span><span class="token punctuation">(</span>checkerlist<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Print_All_Data_LinkList</span><span class="token punctuation">(</span>checkerlist<span class="token punctuation">,</span> print<span class="token punctuation">,</span> ClassicLinkList_OPEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Sort</span><span class="token function">sortClassicLinkListinBubbleSort</span><span class="token punctuation">(</span>checkerlist<span class="token punctuation">,</span> comp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Print_All_Data_LinkList</span><span class="token punctuation">(</span>checkerlist<span class="token punctuation">,</span> print<span class="token punctuation">,</span> ClassicLinkList_OPEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Del</span><span class="token function">clearAClassicLinkList</span><span class="token punctuation">(</span>checkerlist<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Print_All_Data_LinkList</span><span class="token punctuation">(</span>checkerlist<span class="token punctuation">,</span> print<span class="token punctuation">,</span> ClassicLinkList_OPEN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> MyTinyLibProject </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学教程 （8）</title>
      <link href="/2023/02/13/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E6%95%99%E7%A8%8B%EF%BC%888%EF%BC%89/"/>
      <url>/2023/02/13/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E6%95%99%E7%A8%8B%EF%BC%888%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="二重积分"><a href="#二重积分" class="headerlink" title="二重积分"></a>二重积分</h1><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>​        他表示一个曲顶柱体的体积，现在把区间里的小区快切割一下</p><p><img src="image-20230213134721131.png" alt="image-20230213134721131"></p><p>​        现在朝上面做一个柱体，产生了一个微元体积</p><p><img src="image-20230213134825844.png" alt="image-20230213134825844"></p><p>​        现在对小区间求和：</p><script type="math/tex; mode=display">\lim\limits_{\lambda \rightarrow 0}\sum_{i=1}^n \Delta \sigma_i f(x_i,y_i)</script><p>​        这个$\lambda$每个小区域的大小。若这个的极限存在，那就有：</p><script type="math/tex; mode=display">\lim\limits_{\lambda \rightarrow 0}\sum_{i=1}^n \Delta \sigma_i f(x_i,y_i)=\iint_{D}f(x,y)d\sigma</script><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><p>​    1）</p><script type="math/tex; mode=display">\iint_D[\alpha f(x,y)+\beta g(x,y)]d\sigma=\alpha\iint_Df(x,y)d\sigma+\beta\iint_D g(x,y)d\sigma</script><p>​        2)如果$D = D_1+D_2$,然后就有</p><script type="math/tex; mode=display">\iint_D f(x,y)d\sigma = \iint_{D_1} f(x,y)d\sigma+\iint_{D_2} f(x,y)d\sigma</script><p>​        3)对于$f(x,y) \equiv 1$</p><script type="math/tex; mode=display">\iint_D 1 d\sigma =\sigma</script><p>​        4)$f(x,y)\leq g(x,y)$</p><script type="math/tex; mode=display">\iint_D f(x,y) d\sigma\leq \iint_D g(x,y) d\sigma</script><p>​        5)</p><script type="math/tex; mode=display">|\iint_Df(x,y)d\sigma|\leq \iint_D|f(x,y)|d\sigma</script><p>​        6)假设$m\leq f(x,y)\leq M$,</p><script type="math/tex; mode=display">m\sigma \leq \iint_Df(x,y)d\sigma \leq M\sigma</script><p>​        推广：</p><script type="math/tex; mode=display">f(\xi,y)=\frac{1}{\sigma}\iint_Df(x,y)d\sigma</script><h4 id="计算-直角坐标"><a href="#计算-直角坐标" class="headerlink" title="计算(直角坐标)"></a>计算(直角坐标)</h4><p><img src="image-20230213140515497.png" alt="image-20230213140515497"></p><p>​        </p><p>​        假设截面是这个</p><p><img src="image-20230213140555154.png" alt="image-20230213140555154"></p><p>​        于是，可以看作先对 y 再对 x做积分：</p><script type="math/tex; mode=display">V = \int_a^b[\int_{\varphi_1(x)}^{\varphi_2(x)}f(x,y)dy]dx</script><p>于是：</p><p>例题1：</p><p>​        $\iint_D xyd\sigma,y=1,x=2,y=x$</p><p>​        原式=$\int_1^2\int_{1}^{x}xydydx=\int_1^2x[\frac{y^2}{2}|_1^x]dx=\int_1^2{x(\frac{x^2}{2}-\frac{1}{2})}=\frac{x^4}{8}-\frac{x^2}{4}|_1^2=\frac{9}{8}$</p><p>​        我们也有先对X再对Y做积分：</p><script type="math/tex; mode=display">=\int_1^2dy\int_y^2 f(x,y)dx</script><p>​        注意，对于Y，左边是下限，右边是上限</p><p>例题2：</p><p>$\iint_D y\sqrt{1+x^2-y^2}d\sigma,D:y=x,x=-1,y=1$</p><p>法一：$\int_{-1}^1dx\int_{x}^{1}y\sqrt{1+x^2-y^2}dy=0.5$</p><p>法二：$\int_{-1}^1dy\int_{-1}^{y}y\sqrt{1+x^2-y^2}dx$</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​        对于积分区域是长方形的：</p><script type="math/tex; mode=display">\int_a^bdx\int_c^d f(x,y)dy = \int_c^ddy\int_a^b f(x,y)dx</script><p><img src="image-20230213141904801.png" alt="image-20230213141904801"></p><p>​        对于积分区域是长方形的，且<code>f(x,y)</code>=$f_1(x)f_2(x)$</p><script type="math/tex; mode=display">\int_a^bdx\int_c^df_1(x)f_2(y)dy=\int_a^bf_1(x)dx\cdot\int_C^df_2(x)dy</script><h4 id="计算（极坐标）"><a href="#计算（极坐标）" class="headerlink" title="计算（极坐标）"></a>计算（极坐标）</h4><p>​        主要应用在曲线（圆类）比较多</p><p><img src="image-20230213142436470.png" alt="image-20230213142436470"></p><p>​        </p><p><img src="image-20230213142548063.png" alt="image-20230213142548063"></p><p>​        于是：</p><script type="math/tex; mode=display">\iint_D f(x,y)d\sigma = \iint_D \rho f(\rho\cos\theta,\rho\sin\theta) d\rho d\theta</script><p>​        小心不要丢掉$\rho$!</p><p>如：</p><p>例题:$\iint_D e^{-x^2-y^2}dxdy$</p><p>​        做代换，得到：</p><script type="math/tex; mode=display">\int_0^{2\pi}d\theta\int_0^ae^{-\rho^2}\rho d\rho = \pi(1-e^{-a^2})</script><h4 id="一个重要的推论："><a href="#一个重要的推论：" class="headerlink" title="一个重要的推论："></a>一个重要的推论：</h4><p><img src="image-20230213143049432.png" alt="image-20230213143049432"></p><p>​        同时，作为长方形底面积式子：得到：</p><p><img src="image-20230213143210280.png" alt="image-20230213143210280"></p><script type="math/tex; mode=display">\frac{\pi}{4}(1-e^{-R^2})\leq(\int_0^Re^{-x^2}dx)^2\leq\frac{\pi}{4}(1-e^{-2R^2})</script><p>​        于是有一个著名的结论：</p><script type="math/tex; mode=display">\int_0^R e^{-x^2}dx=\frac{\sqrt \pi}{2}</script><p>例子：$\iint_D \arctan\frac{y}{x}dxdy$</p><p><img src="image-20230213143631579.png" alt="image-20230213143631579"></p><p>D见上图：</p><p>解答：=$\int_0^{\frac{\pi}{4}}d\theta \int_1^3 \arctan(\tan\theta)\rho d\rho=\int_0^{\frac{\pi}{4}}\theta\int_1^3\rho d\rho=\frac{\pi^2}{8}$</p><h4 id="二重积分的换元法"><a href="#二重积分的换元法" class="headerlink" title="二重积分的换元法"></a>二重积分的换元法</h4><p>​        首先可以有：</p><script type="math/tex; mode=display">\begin{equation}\left\{\begin{aligned}x & = & \rho\cos(t) \\y & = & \rho\sin(t) \\\end{aligned}\right.\end{equation}</script><p>​        作为一个经典的变换！对于更一般的：</p><p>1)$x=x(u,v),y=y(u,v)$</p><p>2)$J_{(u,v)}=\frac{\partial (x,y)}{\partial (u,v)}$下：</p><script type="math/tex; mode=display">\iint_D f(x,y)dxdy=\iint_{D'}f(x(u,v),y(u,v))|J_{(u,v)}|</script><p>例题：$\iint_D e^{\frac{y-x}{y+x}}dxdy$</p><p><img src="image-20230213144715490.png" alt="image-20230213144715490"></p><p>令：$u=y-x,v=y+x$于是：</p><script type="math/tex; mode=display">x=\frac{v-u}{2},y=\frac{u+v}{2}</script><p><code>-&gt;</code></p><script type="math/tex; mode=display">x=0 \rightarrow v=u\\y=0 \rightarrow v=-u\\x+y=2\rightarrow v=2\\J=-0.5</script><script type="math/tex; mode=display">\iint_D e^{\frac{u}{v}}dudv=\frac{1}{2}\int_0^2dv\int_{-v}^{v}e^{\frac{u}{v}}du=e-e^{-1}</script><h2 id="三重积分"><a href="#三重积分" class="headerlink" title="三重积分"></a>三重积分</h2><p>​        定义：</p><script type="math/tex; mode=display">\lim\limits_{\lambda\rightarrow 0}\sum_{i=0}^{n}f(x_i,y_i,z_i)\Delta v_i =\iiint_\Omega f(x,y,z)dxdydz</script><p>​        可以理解为：将密度考虑成一个关于空间的函数即可，然后在原有空间上增加一个维度！</p><p>​        使用切丝法逐步切：</p><script type="math/tex; mode=display">\iiint_\Omega f(x,y,z)dxdydz= \int_{x_1}^{x_2}dx\int_{y(x_1)}^{y(x_2)}dy\int_{z(x_1,y_1)}^{z(x_2,y_2)}f(x,y,z)dz</script><p>例如：</p><p><img src="image-20230213150010068.png" alt="image-20230213150010068"></p><script type="math/tex; mode=display">=\iint_{D_ {xy} }[\int_0^{1-x-2y}xdz]dxdy=\int_0^1dx\int_0^{\frac{1-x}{2}}dy\int_0^{1-x-2y}xdz</script><p>例如：$\iiint_D z^2dxdydz$,$D:\frac{x^2}{a^2}+\frac{y^2}{b^2}+\frac{z^2}{c^2}=1$</p><script type="math/tex; mode=display">=\int_{-c}^{c}z^2dz\iint_{D_{xy} }dxdy</script><p>而长轴短轴的变化是：</p><script type="math/tex; mode=display">a' = a\sqrt{1-\frac{z^2}{c^2} },b' = b\sqrt{1-\frac{z^2}{c^2} }</script><p>故：因为椭圆的面试是$\pi a’b’$</p><script type="math/tex; mode=display">=\pi ab\int_{-c}^{c}z^2(1-\frac{z^2}{c^2})dz=\frac{4}{15}\pi abc^3</script><h3 id="柱面坐标"><a href="#柱面坐标" class="headerlink" title="柱面坐标"></a>柱面坐标</h3><p>​        使用：</p><script type="math/tex; mode=display">\begin{equation}\left\{\begin{aligned}x & = & \rho\cos(t) \\y & = & \rho\sin(t) \\z & = & z\end{aligned}\right.\end{equation}</script><p>​        表达坐标的系统叫柱坐标系统！</p><p>​        </p><script type="math/tex; mode=display">dv=\rho d\rho d\theta dz</script><p>对于一个长方体：$a \leq x \leq b,c \leq x \leq d,e \leq x \leq f$且函数可以完全分离：</p><script type="math/tex; mode=display">\int_a^bf_1(x)dx\int_c^df_2(y)dy\int_e^ff_3(z)dz= \\(\int_a^bf_1(x)dx)\cdot(\int_c^df_2(y)dy)\cdot(\int_e^ff_3(z)dz)</script>]]></content>
      
      
      
        <tags>
            
            <tag> Math Works </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言数据结构模拟：动态数组的实现思路</title>
      <link href="/2023/02/12/C%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A8%A1%E6%8B%9F%EF%BC%9A%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF/"/>
      <url>/2023/02/12/C%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A8%A1%E6%8B%9F%EF%BC%9A%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="动态数组API实现思路"><a href="#动态数组API实现思路" class="headerlink" title="动态数组API实现思路"></a>动态数组API实现思路</h1><h2 id="前导"><a href="#前导" class="headerlink" title="前导"></a>前导</h2><p>​        写这样一篇博客是因为大伙说看不大懂（大悲），强烈建议我写一份思路。所以重新整一篇思路篇，关于通用单链表的源码已经整完了，会在这篇文章出现的时候一并传上来</p><h2 id="结构本身"><a href="#结构本身" class="headerlink" title="结构本身"></a>结构本身</h2><p>​        动态数组不同于静态数组正是在动态数组可以实现动态的扩展，换而言之，它是在运行的时候动态的扩展数组而无需在编译阶段准备。这使得我们的程序更加具有灵活性！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;old oneint arr[255] &#x3D; &#123;1,2,3&#125;;&#x2F;&#x2F;这个时候会在栈上开辟1020个字节，注意，可会导致浪费，用户不一定需这么多——也可能需要的远远大于这么多<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">int* data &#x3D; NULL;&#x2F;&#x2F; ... do somethingdata &#x3D; (int*)malloc(MALLOCSIZE);&#x2F;&#x2F; ... do somethingdata &#x3D; (int*)realloc(data , NEWSIZE);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        我们的数组就是这样动态编译的——有趣的是，他本质上同数组没有区别！只不过一个合格的动态数组会自动判断访问是否合法与自动伸缩而已</p><p>​        为了达成这样的目的：我们维护以下几个信息</p><p>1）内存区域碎片 ： 就是裸数组本身，我们使用片区域存储东西</p><p>2）元素大小 ： 这个元素多大？我们的指针访问的步长是否可以覆盖到单个数据？</p><p>3）可以容纳的数组大小：使用这个来预防频繁的小量的存储与删除</p><p>4）当前元素的个数 ：这个来判断你的访问是不是合法的！</p><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><p>1）增加</p><p>​        动态数组一般只可以追加，但是我们可以使用元素后挪的方式来实现插入</p><p>2）查找</p><p>​        还记得静态数组如何查找吗？我们当然可以使用静态数组一样的方式进行查找</p><p>3）删除</p><p>​        对于尾删，我们可以直接让当前元素数据减1就好了，下次的增加读写可以直接实现覆盖！可以使用元素前移删除指定位置的擦除！</p><p>4）改动</p><p>​        还是涉及到根本访问！不再赘述。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>​        1.C语言 上必须传入一个结构体对当前结构体进行改变，于是要检查是否为空！</p><p>​        2.注意涉及到数据时建议拷贝一份而不是指针直接托管，否则容易陷入一个指针Free了这个内存块，而另一个指针仍有权限访问这个内存地址！</p>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> MyTinyLibProject </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言数据结构模拟（2）：经典单链表头文件-源代码-测试</title>
      <link href="/2023/02/11/C%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A8%A1%E6%8B%9F%EF%BC%882%EF%BC%89%EF%BC%9A%E7%BB%8F%E5%85%B8%E5%8D%95%E9%93%BE%E8%A1%A8%E5%A4%B4%E6%96%87%E4%BB%B6-%E6%BA%90%E4%BB%A3%E7%A0%81-%E6%B5%8B%E8%AF%95/"/>
      <url>/2023/02/11/C%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A8%A1%E6%8B%9F%EF%BC%882%EF%BC%89%EF%BC%9A%E7%BB%8F%E5%85%B8%E5%8D%95%E9%93%BE%E8%A1%A8%E5%A4%B4%E6%96%87%E4%BB%B6-%E6%BA%90%E4%BB%A3%E7%A0%81-%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="API一览"><a href="#API一览" class="headerlink" title="API一览"></a>API一览</h1><p>1.头文件：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">define _CRT_SECURE_NO_WARNINGS 1#defineOPENUPPOSARR 1#define OPENUPDEFAULTSIZE 1#define OPENQUICKMALLOC 1&#x2F;&#x2F;(General Version)#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;string.h&gt;&#x2F;&#x2F;Error Code Meaning&#x2F;&#x2F;Program Normally run till the end return NORMAL as 0&#x2F;&#x2F;When Error in mallocing Space the program return 1&#x2F;&#x2F;when inputing a NULL we returns -1&#x2F;&#x2F;when inputing a invalid input we returns -2&#x2F;&#x2F;Locations UnFind we returns -3 typedef enum _ClassicLinkListFunctionStatues_ &#123;ClassicLinkList_NORMAL &#x3D; 0,ClassicLinkList_ERROR_IN_MALLOCING_SPACE &#x3D; 1,ClassicLinkList_NULL_INPUT &#x3D; -1,ClassicLinkList_Invalid_Input &#x3D; -2,ClassicLinkList_UnFind &#x3D; -3,ClassicLinkList_Invalid_Free &#x3D; -4,&#125;ClassicLinkListFunctionStatues;&#x2F;&#x2F;MyBool Defined here!&#x2F;&#x2F;typedef enum _bool_ &#123;True &#x3D; 1,False &#x3D; 0&#125;Bool;&#x2F;&#x2F;This is some abstractions using in reminding you some basic informations and errors!&#x2F;&#x2F;#define SHOW_ERROR_ClassicLinkList_NULL_INPUT printf(&quot;\nSorry! Your input NULL!\n&quot;)#define SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE printf(&quot;\nSorry!Failed to malloc space for your data\n&quot;)#define SHOW_ERROR_ClassicLinkList_Invalid_Input printf(&quot;\nYour input invalid, reject to run functions\n&quot;)#define SHOW_ERROR_ClassicLinkList_UnFind printf(&quot;\nPositions unfind!\n&quot;)#define SHOW_ERROR_ClassicLinkList_Invalid_Free printf(&quot;\nFree the invalid space,reject to run the functions\n&quot;)#define SHOW_WARNING_ClassicLinkList_SWAPPED_POS printf(&quot;Warning! the front_pos is bigger then the final pos\n Do you agreed swap them?&quot;)#define SHOW_WARNING_ClassicLinkList_OVERLAP_POS printf(&quot;Considered as your insertion_input is overlapped!\n set pos as the cur_size?&quot;)&#x2F;&#x2F;this abstractions is used to define the aquisition of whether the program&#39;s decison is acceptable,&#x2F;&#x2F;X is the message string!&#x2F;&#x2F;#define SHOW_WHETHER_ACCCEPTED(X) printf(X)&#x2F;&#x2F;If wanted flashed a newline you can use it! &#x2F;&#x2F;#define SLASHN printf(&quot;\n&quot;)&#x2F;&#x2F;used in MergeclassicLinkList&#x2F;&#x2F;If accepted copy �� Do write ClassicLinkList_ACCEPTED_COPY#define ClassicLinkList_ACCEPTED_COPY 1#define ClassicLinkList_NO_COPY0#define Unfind_ClassicLinkList -1&#x2F;&#x2F;Used in whether the targeted elements is found&#x2F;&#x2F;If is considered found, just use Find , otherwise unfind!typedef enum _ClassicLinkList_isFind_ &#123;Find &#x3D; 1,Unfind &#x3D; 0&#125;ClassicLinkList_isFind;&#x2F;&#x2F;Used in whether print data in ClassicLinkList better&#x2F;&#x2F;Use ClassicLinkList_OPEN if you want a better printtypedef enum _BetterPrintSwitch_for_ClassicLinkList_ &#123;ClassicLinkList_OPEN &#x3D; 1,ClassicLinkList_CLOSE &#x3D; 0&#125;BetterPrintSwitch_for_ClassicLinkList;&#x2F;&#x2F;-------------------------------------------Main_Define------------------------------------------&#x2F;&#x2F;Basic definitions of datanode, it can be considered as a node in a loop&#x2F;&#x2F;is consisted of dataPiece and the pointer to the next datanode&#x2F;&#x2F;UNLESS YOU ARE CONCIOUS ABOUT WHAT YOU ARE DOING! DO NOT CHANGE THE DATA DIRECTLY! typedef struct _Classic_DataNode_ &#123;void* data;struct _Classic_DataNode_* p_next_one;&#125;Classic_DataNode;&#x2F;&#x2F;basic definations of datalist , it can be considered as the loop or the main body of the data structure&#x2F;&#x2F;to better operate the data structure , it is consisted of Head pointer that pointed to the first data in the data struct&#x2F;&#x2F;as well as the current_size of the data structure&#x2F;&#x2F;UNLESS YOU ARE CONCIOUS ABOUT WHAT YOU ARE DOING! DO NOT CHANGE THE DATA DIRECTLY! typedef struct _Classic_DataList_ &#123;Classic_DataNode* Head;size_t current_size;&#125;Classic_DataList;&#x2F;&#x2F;this type of int is used to mark the returnType of the compare functionstypedef unsigned int Is_Used_Compared_Int;typedef void(*MyPrint)(void*);typedef void* (*Do_Specific_Change)(void*);typedef Is_Used_Compared_Int(*CompareFunc)(void*, void*);typedef Is_Used_Compared_Int(*LocateFunc)(void*, void*);&#x2F;&#x2F;--------------------Default_size_Type---------------------------------------------#if OPENUPDEFAULTSIZE#define Dyarr_SIGINT sizeof(int)#define Dyarr_SIGCHAR sizeof(char)#define Dyarr_SIGFLOAT sizeof(float)#define Dyarr_SIGDOUBLE sizeof(double)#define Dyarr_SIG(dataType) sizeof(dataType)#define Dyarr_INT_SIZE(X) sizeof(int)*X#define Dyarr_CHAR_SIZE(X) sizeof(char)*X#define Dyarr_FLOAT_SIZE(X) sizeof(float)*X#define Dyarr_DOUBLE_SIZE(X) sizeof(double)*X#define Dyarr_TYPE_SIZE(dataType,X) sizeof(dataType)*X#endif&#x2F;&#x2F;-------------------------------QuickMalloc----------------------------------------------------#if OPENQUICKMALLOC#define MALLOC(type) (type*)malloc(sizeof(type))#define MALLOCN(type,ElemNum) (type*)malloc(sizeof(type)*ElemNum)#endif&#x2F;&#x2F;-----------------------Position_Stored_Dynamic_Array_For_Dyarr---------------------------------&#x2F;&#x2F;About Position_Stored_Dynamic_Array_Func&#x2F;&#x2F;Create A Position_Stored_Dynamic_Array! Can init it in this way:&#x2F;&#x2F;&gt;&gt;Position_Stored_Dynamic_ArrayFordyarr* Name&#x3D;Init_A_Postion_Stored_Dynamic_ArrayFordyarr();&#x2F;&#x2F;Used in returning multitude locations#if OPENUPPOSARR&#x2F;&#x2F;Main data structure!&#x2F;&#x2F;Used in returning multitude locationstypedef struct _Dyarrposarr_ &#123;int* posSpace;size_t pos_size;&#125;Position_Stored_Dynamic_ArrayFordyarr;&#x2F;&#x2F;Want a better Print to beutify your control table? try this onetypedef enum _BetterPrintSwitch_for_pos_dyarr_ &#123;PSDA_dyarr_OPEN &#x3D; 1,PSDA_dyarr_CLOSE &#x3D; 0&#125;BetterPrintSwitch_for_pos_dyarr;&#x2F;&#x2F;can use this type when indicating the typetypedef unsigned int BetterPrintfor_PosDyarr;&#x2F;&#x2F;About Position_Stored_Dynamic_Array_Func&#x2F;&#x2F;Create A Position_Stored_Dynamic_Array! Can init it in this way:&#x2F;&#x2F;&gt;&gt;Position_Stored_Dynamic_ArrayFordyarr* Name&#x3D;Init_A_Postion_Stored_Dynamic_ArrayFordyarr();Position_Stored_Dynamic_ArrayFordyarr* Init_A_Postion_Stored_Dynamic_ArrayFordyarr();&#x2F;&#x2F;About Positions_Stored_Dynamic_Array&#x2F;&#x2F;this function is aimed to output a series of locations that is stored in the pos&#x2F;&#x2F;Use PSDA_dyarr_OPEN to have a better shown ,else use PSDA_dyarr_CLOSE&#x2F;&#x2F;ClassicLinkListFunctionStatues Show_All_Locations_In_PSDAfor_dyarr(Position_Stored_Dynamic_ArrayFordyarr* posarr,BetterPrintfor_PosDyarrWhether_Better_Print);&#x2F;&#x2F;About Positions_Stored_Dynamic_Array&#x2F;&#x2F; push back a pos into the dynamic array&#x2F;&#x2F;ClassicLinkListFunctionStatues Push_back_a_locations_in_PSDA_dyarr(Position_Stored_Dynamic_ArrayFordyarr* posarr,intpos_acquired);&#x2F;&#x2F;About Positions_Stored_Dynamic_Array&#x2F;&#x2F;this function is aimed to return the number of locations&#x2F;&#x2F;Use PSDA_dyarr_OPEN to have a better shown ,else use PSDA_dyarr_CLOSEsize_t Get_pos_size_From_PSDA_for_dyarr(Position_Stored_Dynamic_ArrayFordyarr* posarr,BetterPrintfor_PosDyarrWhether_Shown_Print);&#x2F;&#x2F;About Positions_Stored_Dynamic_Array&#x2F;&#x2F;return a pos that is targeted!&#x2F;&#x2F;void* getPosbyPosinPSDA(Position_Stored_Dynamic_ArrayFordyarr* getter,size_tpos);&#x2F;&#x2F;About Positions_Stored_Dynamic_ArrayClassicLinkListFunctionStatues DesTroy_A_PSDA_for_dyarr(Position_Stored_Dynamic_ArrayFordyarr* pointer_to_wishedfreeposarr);#endif &#x2F;&#x2F; OPENUPPOSARR&#x2F;&#x2F;-----------------------------About ClassicLinkList-----------------------------------------------------&#x2F;&#x2F;----------------------------Init-functions-------------------------------------------------------------&#x2F;&#x2F; &#x2F;&#x2F; there are three basic type of initialization&#x2F;&#x2F; &#x2F;&#x2F; -----------------------------------------------------------------------------------------------------&#x2F;&#x2F; 1.includeing the default type (init a NULL head and zero cur_size)&#x2F;&#x2F; func1: Classic_DataList* Init_A_ClassicLinkList()&#x2F;&#x2F; &#x2F;&#x2F; No input , or input VOID&#x2F;&#x2F; have output : output a clssicLinklist pointer&#x2F;&#x2F; ------------------------------------------------------------------------------------------------------&#x2F;&#x2F; 2.includeing the copy one (init the same type of the be-copied one)&#x2F;&#x2F; func2: Classic_DataList* Init_A_ClassicLinkList_By_CopyAClassicLinkList&#x2F;&#x2F; &#x2F;&#x2F; input : a required_be_copied list .&#x2F;&#x2F; output: a new list but have is the same as the be_copied list&#x2F;&#x2F; ------------------------------------------------------------------------------------------------------&#x2F;&#x2F; 3.includeing to transform the static array to the linklist one&#x2F;&#x2F; func3: Classic_DataList* UpdateStaticArray2ClassicLinkList&#x2F;&#x2F; &#x2F;&#x2F; input : a waited_transformed static_array , the element size which is in the static array &#x2F;&#x2F; output: a new pointer that points to classicLinkList&#x2F;&#x2F; &#x2F;&#x2F; &#x2F;&#x2F;----------------------------Init-functions-------------------------------------------------------------&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; This function is used to init a default type of classicLinkList&#x2F;&#x2F; that the head of dataPiece is NULL and the cur_size is zero.&#x2F;&#x2F; Use push back to init the dataPiece&#x2F;&#x2F; use in this Way: &#x2F;&#x2F; Classic_DataList* List &#x3D; Init_A_ClassicLinkList();&#x2F;&#x2F;Classic_DataList* Init_A_ClassicLinkList();&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; to copy an already exited linklist&#x2F;&#x2F; Classic_DataList* List &#x3D; Init_A_ClassicLinkList_By_CopyAClassicLinkList(Classic_DataList* list) &#x2F;&#x2F;Classic_DataList* Init_A_ClassicLinkList_By_CopyAClassicLinkList(Classic_DataList* list);&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; to updata a static array into a ClassicLinkList&#x2F;&#x2F; Classic_DataList* List &#x3D; UpdateStaticArray2ClassicLinkList(&#x2F;&#x2F; void* inputArray, &#x2F;&#x2F; size_t dataSize, &#x2F;&#x2F; size_t dataNum&#x2F;&#x2F; )&#x2F;&#x2F;Classic_DataList* UpdateStaticArray2ClassicLinkList(void* inputArray,size_tdataSize,size_tdataNum);&#x2F;&#x2F;----------------------------------------Basic_Add_Functions--------------------------------------------&#x2F;&#x2F; there are four basic input functions:&#x2F;&#x2F; &#x2F;&#x2F; ------------------------------------------------------------------------------------------------------&#x2F;&#x2F; 1. push back an element into the classicLinkList&#x2F;&#x2F; func1 : ClassicLinkListFunctionStatues Push_Back_Into_A_ClassicLinkList&#x2F;&#x2F;&#x2F;&#x2F; input : the inserted list ,the data wanted to be inserted and the inserted datasize&#x2F;&#x2F; output: the statues of normal ,can be used in check or just ignore!&#x2F;&#x2F; &#x2F;&#x2F; ------------------------------------------------------------------------------------------------------&#x2F;&#x2F; &#x2F;&#x2F; 2. insert back an element into the classicLinkList by offering a valid pos&#x2F;&#x2F; func2 : ClassicLinkListFunctionStatues Insert_into_AClassicLinkList(Classic_DataList* list, void* data,size_t dataSize,size_t pos)&#x2F;&#x2F; &#x2F;&#x2F; &#x2F;&#x2F; input : the inserted list , the data ,the datasize as well as the position you wanted to insert&#x2F;&#x2F; output: the statues of normal ,can be used in check or just ignore!&#x2F;&#x2F; &#x2F;&#x2F; ------------------------------------------------------------------------------------------------------&#x2F;&#x2F; &#x2F;&#x2F; 3. push back a bunch of data into the classicLinkList like the first function&#x2F;&#x2F; func3 :ClassicLinkListFunctionStatues push_Back_BunchDataintoClassicLinkList(Classic_DataList* list,void* inputArray,size_t sigElemSize,size_t arrayNum)&#x2F;&#x2F; &#x2F;&#x2F; input : the inserted list , the data ,the datasize as well as the position you wanted to insert&#x2F;&#x2F; output: the statues of normal ,can be used in check or just ignore!&#x2F;&#x2F; &#x2F;&#x2F; ------------------------------------------------------------------------------------------------------&#x2F;&#x2F; 4. insert back a bunch of data into the classicLinkList like the second function&#x2F;&#x2F; func4: ClassicLinkListFunctionStatues Insert_A_Bunch_of_data_intoClassicLinkList&#x2F;&#x2F;&#x2F;&#x2F; input : the inserted list , the static array ,the datasize in the static array as well as the position you wanted to insert&#x2F;&#x2F; output: the statues of normal ,can be used in check or just ignore! &#x2F;&#x2F; &#x2F;&#x2F;----------------------------------------Basic_Add_Functions--------------------------------------------&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; push back some data ,like dynamic array , into the final position&#x2F;&#x2F;Used like this Push_Back_Into_A_ClassicLinkList(appendedClassicLinkList, data ,sizeof(data))&#x2F;&#x2F;ClassicLinkListFunctionStatues Push_Back_Into_A_ClassicLinkList(Classic_DataList* list,void* data,size_tdatasize);&#x2F;&#x2F; About ClassicDataList&#x2F;&#x2F; insert back a data into the datalist&#x2F;&#x2F; used like this: Insert_into_AClassicLinkList(inserted list, input data,dataSize,insertion_pos)&#x2F;&#x2F; ClassicLinkListFunctionStatues Insert_into_AClassicLinkList(Classic_DataList* list,void* data,size_tdataSize,size_tpos);&#x2F;&#x2F; About ClassicDataList&#x2F;&#x2F; push back a bunch data into the datalist&#x2F;&#x2F; used like this : push_Back_BunchDataintoClassicLinkList( inserted_list , the static array ,the elementsize ,the element num)&#x2F;&#x2F;ClassicLinkListFunctionStatues push_Back_BunchDataintoClassicLinkList(Classic_DataList* list,void* inputArray,size_tsigElemSize,size_tarrayNum);&#x2F;&#x2F; About ClassicDataList&#x2F;&#x2F; insert back a bunch of data into the datalist&#x2F;&#x2F; used like this: Insert_into_AClassicLinkList(inserted list, insertion_pos,input array ,Single dataSize, the amount of elements)&#x2F;&#x2F; ClassicLinkListFunctionStatues Insert_A_Bunch_of_data_intoClassicLinkList(Classic_DataList* list,size_tpos,void* inputArray,size_tsigElemSize,size_tarrayNum);&#x2F;&#x2F;------------------------------------------Deletion_Functions-------------------------------------------&#x2F;&#x2F; there are two basic type of functions in the sections&#x2F;&#x2F; 1. Erase a targeted element and erase it from the ClassicDataList&#x2F;&#x2F; fun1:eraseAElementfromDataList&#x2F;&#x2F; &#x2F;&#x2F; input : the list and the erase position&#x2F;&#x2F; output: the statues of normal ,can be used in check or just ignore!&#x2F;&#x2F; &#x2F;&#x2F; ------------------------------------------------------------------------------------------------------&#x2F;&#x2F; &#x2F;&#x2F; 2.Erase some target elements from the ClassicDataList&#x2F;&#x2F; fun2:eraseAbunchData&#x2F;&#x2F; &#x2F;&#x2F; input: the list and the start position as well as the last position, that means offer a paired pos&#x2F;&#x2F; output: the statues of normal ,can be used in check or just ignore!&#x2F;&#x2F;------------------------------------------Deletion_Functions-------------------------------------------&#x2F;&#x2F; About ClassicDataList&#x2F;&#x2F; delete a  data in the datalist by offering a position&#x2F;&#x2F;used like this: eraseAElementfromDataList(list, erasing_pos)&#x2F;&#x2F;ClassicLinkListFunctionStatues eraseAElementfromDataList(Classic_DataList* list,size_tpos);&#x2F;&#x2F; About ClassicDataList&#x2F;&#x2F; delete a bunch of data in the datalist&#x2F;&#x2F; used like this eraseAbunchData( list,  front_pos,  final_pos)&#x2F;&#x2F;ClassicLinkListFunctionStatues eraseAbunchData_inDataList(Classic_DataList* list,size_tfront_pos,size_tfinal_pos);&#x2F;&#x2F;----------------------------------------check_if_element_existed_functions-----------------------------&#x2F;&#x2F; there are four functions in this sections&#x2F;&#x2F; &#x2F;&#x2F; 1.check if the classiclinklist is empty&#x2F;&#x2F; fun1: isEmptyClassicLinkList&#x2F;&#x2F; &#x2F;&#x2F; input :the checked list&#x2F;&#x2F; output: My defined bool(Sadly the org C doesn&#39;t define that)&#x2F;&#x2F; &#x2F;&#x2F; ------------------------------------------------------------------------------------------------------&#x2F;&#x2F; &#x2F;&#x2F; 2. check if the target elements is exsited in the datalist&#x2F;&#x2F; fun2: checkIsLocateinLinkList&#x2F;&#x2F; &#x2F;&#x2F; input : the checked list ,the searched data and the Compared functions&#x2F;&#x2F; output: the locations that we first found it&#x2F;&#x2F; &#x2F;&#x2F; ------------------------------------------------------------------------------------------------------&#x2F;&#x2F; &#x2F;&#x2F; 3. return out the first locations that we found of the target elements&#x2F;&#x2F; func3:checkIsLocateinLinkList&#x2F;&#x2F; &#x2F;&#x2F; input : the checked list ,the searched data and the Compared functions&#x2F;&#x2F; output: My defined bool(Sadly the org C doesn&#39;t define that)&#x2F;&#x2F; &#x2F;&#x2F; ------------------------------------------------------------------------------------------------------&#x2F;&#x2F; &#x2F;&#x2F; Warning : this functions required the PSDA abstractions is opened so you can use Position_Stored_Dynamic_ArrayFordyarr*&#x2F;&#x2F; to get the position&#x2F;&#x2F; &#x2F;&#x2F; 4. return out a bunch of data that was contained in Position_Stored_Dynamic_ArrayFordyarr&#x2F;&#x2F; fun4:returnAbunchLocationsinLinkList&#x2F;&#x2F; &#x2F;&#x2F; input : the checked list , the Position_Stored_Dynamic_ArrayFordyarr*(required init first)&#x2F;&#x2F; output: the Position_Stored_Dynamic_ArrayFordyarr that stored the positions!&#x2F;&#x2F;&#x2F;&#x2F; ------------------------------------------------------------------------------------------------------&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; check if the LinkList is empty&#x2F;&#x2F;Bool isEmptyClassicLinkList(Classic_DataList* list);&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; check if the target elements is exsited in the datalist&#x2F;&#x2F;Bool checkIsLocateinLinkList(Classic_DataList* list,void* data,LocateFuncuser_func);&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; return out the first locations that we found of the target elements&#x2F;&#x2F; can use in this way: size_t pos &#x3D; returnOutDatabyposinLinkList( list, data, user_func)size_t returnOutDatabyposinLinkList(Classic_DataList* list,void* data,LocateFuncuser_func);#if OPENUPPOSARR&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; return out a bunch of data that was contained in Position_Stored_Dynamic_ArrayFordyarr&#x2F;&#x2F; can use in this way: Position_Stored_Dynamic_ArrayFordyarr* somePos &#x3D; &#x2F;&#x2F; returnAbunchLocationsinLinkList( list,  posArr,  data,  user_func)&#x2F;&#x2F;Position_Stored_Dynamic_ArrayFordyarr* returnAbunchLocationsinLinkList(Classic_DataList* list,Position_Stored_Dynamic_ArrayFordyarr* posArr,void* data,LocateFuncuser_func);#endif &#x2F;&#x2F;---------------------------------------Do_Something_to_the_datalist_functions--------------------------&#x2F;&#x2F; there are seven functions in this sections&#x2F;&#x2F; &#x2F;&#x2F; 1. Classic Print functions&#x2F;&#x2F; func1: Print_All_Data_LinkList&#x2F;&#x2F; to print all the data in the user_defined linklist&#x2F;&#x2F; &#x2F;&#x2F; input : list and the user print , and the decision whether enjoyed a better print&#x2F;&#x2F; output: the statues of normal ,can be used in check or just ignore!&#x2F;&#x2F; &#x2F;&#x2F; ------------------------------------------------------------------------------------------------------&#x2F;&#x2F; &#x2F;&#x2F; 2. Do some change to the specific data&#x2F;&#x2F; to make some change directly to an element&#x2F;&#x2F; &#x2F;&#x2F; input : the list ,the targeted positions and the way how you want to operate the data itself&#x2F;&#x2F; output: the statues of normal ,can be used in check or just ignore!&#x2F;&#x2F; &#x2F;&#x2F; ------------------------------------------------------------------------------------------------------&#x2F;&#x2F; &#x2F;&#x2F; 3. Do some change to all the data in the classiclinklist&#x2F;&#x2F; to make some change directly to the whole elements&#x2F;&#x2F; &#x2F;&#x2F; input : the list ,the way how you want to operate the data itself&#x2F;&#x2F; output: the statues of normal ,can be used in check or just ignore!&#x2F;&#x2F; &#x2F;&#x2F; ------------------------------------------------------------------------------------------------------&#x2F;&#x2F; &#x2F;&#x2F; 4. Do specific change to an interval pos in the classicLickList&#x2F;&#x2F; to make some change directly to the interval elements&#x2F;&#x2F; &#x2F;&#x2F; input : the list ,the front_pos and the final_pos&#x2F;&#x2F; output: the statues of normal ,can be used in check or just ignore!&#x2F;&#x2F; &#x2F;&#x2F; ------------------------------------------------------------------------------------------------------&#x2F;&#x2F; &#x2F;&#x2F; 5. reverse ClassicLinkList&#x2F;&#x2F; to reverse up the classic LinkList&#x2F;&#x2F; &#x2F;&#x2F; input : the ready_reversed data&#x2F;&#x2F; output: the statues of normal ,can be used in check or just ignore!&#x2F;&#x2F; &#x2F;&#x2F; ------------------------------------------------------------------------------------------------------&#x2F;&#x2F; &#x2F;&#x2F; 6. combine two linkList into one&#x2F;&#x2F; to combine the two classic linklist into one!&#x2F;&#x2F; &#x2F;&#x2F; input : the two linklist&#x2F;&#x2F; output: the merged linklist Pointer&#x2F;&#x2F; &#x2F;&#x2F; ------------------------------------------------------------------------------------------------------&#x2F;&#x2F; &#x2F;&#x2F; 7. sort the elements in the classicLinkList under the user&#39;s constructions&#x2F;&#x2F; to sort the ClassicLinkList&#x2F;&#x2F; &#x2F;&#x2F; input : the classicLinklist&#x2F;&#x2F; output: the statues of normal ,can be used in check or just ignore!&#x2F;&#x2F; &#x2F;&#x2F; ------------------------------------------------------------------------------------------------------&#x2F;&#x2F;&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; to print the data&#x2F;&#x2F; use in this way: Print_All_Data_LinkList( list, user_print,  whether_better_print)&#x2F;&#x2F;ClassicLinkListFunctionStatues Print_All_Data_LinkList(Classic_DataList* list,MyPrintuser_print,BetterPrintSwitch_for_ClassicLinkListwhether_better_print);&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; to make some change to the specific data&#x2F;&#x2F; use in this way:doChangetoSpecificElementinLinkList( list,  pos , user_func)&#x2F;&#x2F;ClassicLinkListFunctionStatues doChangetoSpecificElementinLinkList(Classic_DataList* list,size_tpos,Do_Specific_Changeuser_func);&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; to make some change to the interval data&#x2F;&#x2F; use in this way:doChangetoTargetIntervalDatainLinkList(list , pos1,pos2, user_func)&#x2F;&#x2F;ClassicLinkListFunctionStatues doChangetoTargetIntervalDatainLinkList(Classic_DataList* list,size_tfront_pos,size_tfinal_pos,Do_Specific_Changeuser_func);&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; to make some change to the whole elements in the data&#x2F;&#x2F; use in this way:doChangetoAllDatainLinkList( list,  user_func)&#x2F;&#x2F;ClassicLinkListFunctionStatues doChangetoAllDatainLinkList(Classic_DataList* list,Do_Specific_Changeuser_func);&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; to reverse up the classiclinklist&#x2F;&#x2F; use in this way:ReverseLinkList(list)&#x2F;&#x2F;ClassicLinkListFunctionStatues ReverseLinkList(Classic_DataList* list);&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; to merge two linklist into the one&#x2F;&#x2F; use in this way:mergeLinkList(list_be_added, list_adder, whether_copied)&#x2F;&#x2F;Classic_DataList* mergeLinkList(Classic_DataList* list_be_added,Classic_DataList* list_adder,size_twhether_copied);&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; sort the classicLinklist in the bobblesort&#x2F;&#x2F; use in this way:sortClassicLinkListinBubbleSort(Classic_DataList* list, CompareFunc user_func) &#x2F;&#x2F;ClassicLinkListFunctionStatues sortClassicLinkListinBubbleSort(Classic_DataList* list,CompareFuncuser_func);&#x2F;&#x2F;----------------------------------------------------Basic_Erase----------------------------------------&#x2F;&#x2F; &#x2F;&#x2F; 1.Erase A LinkList&#x2F;&#x2F; used in just clear a linklist&#x2F;&#x2F; func1: clearAClassicLinkList&#x2F;&#x2F; &#x2F;&#x2F; input : just a classiclinklist&#x2F;&#x2F; output: the statues of normal ,can be used in check or just ignore!&#x2F;&#x2F; &#x2F;&#x2F; ------------------------------------------------------------------------------------------------------&#x2F;&#x2F;About ClassicLinkList&#x2F;&#x2F; Erase a classicLinkList&#x2F;&#x2F; Use in this way clearAClassicLinkList( list)&#x2F;&#x2F;ClassicLinkListFunctionStatues clearAClassicLinkList(Classic_DataList* list);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>源文件：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define _CRT_SECURE_NO_WARNINGS 1#defineOPENUPPOSARR 1#define OPENUPDEFAULTSIZE 1#define OPENQUICKMALLOC 1&#x2F;&#x2F;(General Version)#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;string.h&gt;&#x2F;&#x2F;Error Code Meaning&#x2F;&#x2F;Program Normally run till the end return NORMAL as 0&#x2F;&#x2F;When Error in mallocing Space the program return 1&#x2F;&#x2F;when inputing a NULL we returns -1&#x2F;&#x2F;when inputing a invalid input we returns -2&#x2F;&#x2F;Locations UnFind we returns -3 typedef enum _ClassicLinkListFunctionStatues_ &#123;ClassicLinkList_NORMAL&#x3D;0,ClassicLinkList_ERROR_IN_MALLOCING_SPACE &#x3D; 1,ClassicLinkList_NULL_INPUT &#x3D; -1,ClassicLinkList_Invalid_Input&#x3D;-2,ClassicLinkList_UnFind&#x3D;-3,ClassicLinkList_Invalid_Free&#x3D;-4,&#125;ClassicLinkListFunctionStatues;&#x2F;&#x2F;MyBool Defined here!&#x2F;&#x2F;typedef enum _bool_ &#123;True &#x3D; 1,False &#x3D; 0&#125;Bool;&#x2F;&#x2F;This is some abstractions using in reminding you some basic informations and errors!&#x2F;&#x2F;#define SHOW_ERROR_ClassicLinkList_NULL_INPUT printf(&quot;\nSorry! Your input NULL!\n&quot;)#define SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE printf(&quot;\nSorry!Failed to malloc space for your data\n&quot;)#define SHOW_ERROR_ClassicLinkList_Invalid_Input printf(&quot;\nYour input invalid, reject to run functions\n&quot;)#define SHOW_ERROR_ClassicLinkList_UnFind printf(&quot;\nPositions unfind!\n&quot;)#define SHOW_ERROR_ClassicLinkList_Invalid_Free printf(&quot;\nFree the invalid space,reject to run the functions\n&quot;)#define SHOW_WARNING_ClassicLinkList_SWAPPED_POS printf(&quot;Warning! the front_pos is bigger then the final pos\n Do you agreed swap them?&quot;)#define SHOW_WARNING_ClassicLinkList_OVERLAP_POS printf(&quot;Considered as your insertion_input is overlapped!\n set pos as the cur_size?&quot;)&#x2F;&#x2F;this abstractions is used to define the aquisition of whether the program&#39;s decison is acceptable,&#x2F;&#x2F;X is the message string!&#x2F;&#x2F;#define SHOW_WHETHER_ACCCEPTED(X) printf(X)&#x2F;&#x2F;If wanted flashed a newline you can use it! &#x2F;&#x2F;#define SLASHN printf(&quot;\n&quot;)&#x2F;&#x2F;used in MergeclassicLinkList&#x2F;&#x2F;If accepted copy ！ Do write ClassicLinkList_ACCEPTED_COPY#define ClassicLinkList_ACCEPTED_COPY 1#define ClassicLinkList_NO_COPY0#define Unfind_ClassicLinkList -1&#x2F;&#x2F;Used in whether the targeted elements is found&#x2F;&#x2F;If is considered found, just use Find , otherwise unfind!typedef enum _ClassicLinkList_isFind_ &#123;Find &#x3D; 1,Unfind &#x3D; 0&#125;ClassicLinkList_isFind;&#x2F;&#x2F;Used in whether print data in ClassicLinkList better&#x2F;&#x2F;Use ClassicLinkList_OPEN if you want a better printtypedef enum _BetterPrintSwitch_for_ClassicLinkList_ &#123;ClassicLinkList_OPEN &#x3D; 1,ClassicLinkList_CLOSE &#x3D; 0&#125;BetterPrintSwitch_for_ClassicLinkList;&#x2F;&#x2F;-------------------------------------------Main_Define------------------------------------------&#x2F;&#x2F;Basic definitions of datanode, it can be considered as a node in a loop&#x2F;&#x2F;is consisted of dataPiece and the pointer to the next datanode&#x2F;&#x2F;UNLESS YOU ARE CONCIOUS ABOUT WHAT YOU ARE DOING! DO NOT CHANGE THE DATA DIRECTLY! typedef struct _Classic_DataNode_ &#123;void* data;struct _Classic_DataNode_* p_next_one;&#125;Classic_DataNode;&#x2F;&#x2F;basic definations of datalist , it can be considered as the loop or the main body of the data structure&#x2F;&#x2F;to better operate the data structure , it is consisted of Head pointer that pointed to the first data in the data struct&#x2F;&#x2F;as well as the current_size of the data structure&#x2F;&#x2F;UNLESS YOU ARE CONCIOUS ABOUT WHAT YOU ARE DOING! DO NOT CHANGE THE DATA DIRECTLY! typedef struct _Classic_DataList_ &#123;Classic_DataNode* Head;size_t current_size;&#125;Classic_DataList;&#x2F;&#x2F;this type of int is used to mark the returnType of the compare functionstypedef unsigned int Is_Used_Compared_Int;typedef void(*MyPrint)(void*);typedef void* (*Do_Specific_Change)(void*);typedef Is_Used_Compared_Int(*CompareFunc)(void*, void*);typedef Is_Used_Compared_Int(*LocateFunc)(void*, void*);&#x2F;&#x2F;--------------------Default_size_Type---------------------------------------------#if OPENUPDEFAULTSIZE#define Dyarr_SIGINT sizeof(int)#define Dyarr_SIGCHAR sizeof(char)#define Dyarr_SIGFLOAT sizeof(float)#define Dyarr_SIGDOUBLE sizeof(double)#define Dyarr_SIG(dataType) sizeof(dataType)#define Dyarr_INT_SIZE(X) sizeof(int)*X#define Dyarr_CHAR_SIZE(X) sizeof(char)*X#define Dyarr_FLOAT_SIZE(X) sizeof(float)*X#define Dyarr_DOUBLE_SIZE(X) sizeof(double)*X#define Dyarr_TYPE_SIZE(dataType,X) sizeof(dataType)*X#endif&#x2F;&#x2F;-------------------------------QuickMalloc----------------------------------------------------#if OPENQUICKMALLOC#define MALLOC(type) (type*)malloc(sizeof(type))#define MALLOCN(type,ElemNum) (type*)malloc(sizeof(type)*ElemNum)#endif&#x2F;&#x2F;-----------------------Position_Stored_Dynamic_Array_For_Dyarr---------------------------------&#x2F;&#x2F;About Position_Stored_Dynamic_Array_Func&#x2F;&#x2F;Create A Position_Stored_Dynamic_Array! Can init it in this way:&#x2F;&#x2F;&gt;&gt;Position_Stored_Dynamic_ArrayFordyarr* Name&#x3D;Init_A_Postion_Stored_Dynamic_ArrayFordyarr();&#x2F;&#x2F;Used in returning multitude locations#if OPENUPPOSARR&#x2F;&#x2F;Main data structure!&#x2F;&#x2F;Used in returning multitude locationstypedef struct _Dyarrposarr_ &#123;int* posSpace;size_t pos_size;&#125;Position_Stored_Dynamic_ArrayFordyarr;&#x2F;&#x2F;Want a better Print to beutify your control table? try this onetypedef enum _BetterPrintSwitch_for_pos_dyarr_ &#123;PSDA_dyarr_OPEN &#x3D; 1,PSDA_dyarr_CLOSE &#x3D; 0&#125;BetterPrintSwitch_for_pos_dyarr;&#x2F;&#x2F;can use this type when indicating the typetypedef unsigned int BetterPrintfor_PosDyarr;&#x2F;&#x2F;About Position_Stored_Dynamic_Array_Func&#x2F;&#x2F;Create A Position_Stored_Dynamic_Array! Can init it in this way:&#x2F;&#x2F;&gt;&gt;Position_Stored_Dynamic_ArrayFordyarr* Name&#x3D;Init_A_Postion_Stored_Dynamic_ArrayFordyarr();Position_Stored_Dynamic_ArrayFordyarr* Init_A_Postion_Stored_Dynamic_ArrayFordyarr()&#123;Position_Stored_Dynamic_ArrayFordyarr* pro_usable_space &#x3D; (Position_Stored_Dynamic_ArrayFordyarr*)malloc(sizeof(Position_Stored_Dynamic_ArrayFordyarr));if (!pro_usable_space)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;pro_usable_space-&gt;posSpace &#x3D; NULL;pro_usable_space-&gt;pos_size &#x3D; 0;return pro_usable_space;&#125;&#x2F;&#x2F;About Positions_Stored_Dynamic_Array&#x2F;&#x2F;this function is aimed to output a series of locations that is stored in the pos&#x2F;&#x2F;&#x2F;&#x2F;Use PSDA_dyarr_OPEN to have a better shown ,else use PSDA_dyarr_CLOSEClassicLinkListFunctionStatues Show_All_Locations_In_PSDAfor_dyarr(Position_Stored_Dynamic_ArrayFordyarr*posarr,BetterPrintfor_PosDyarrWhether_Better_Print)&#123;if (!posarr)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;if (Whether_Better_Print &#x3D;&#x3D; PSDA_dyarr_OPEN)printf(&quot;\nPositions are shown! :\n&quot;);for (int i &#x3D; 0; i &lt; posarr-&gt;pos_size; i++)printf(&quot;%u &quot;, posarr-&gt;posSpace[i]);if (Whether_Better_Print &#x3D;&#x3D; PSDA_dyarr_OPEN)printf(&quot;\nFinish Printing!\n&quot;);return ClassicLinkList_NORMAL;&#125;&#x2F;&#x2F;About Positions_Stored_Dynamic_ArrayClassicLinkListFunctionStatues Push_back_a_locations_in_PSDA_dyarr(Position_Stored_Dynamic_ArrayFordyarr*posarr, intpos_acquired)&#123;int* pro_usable_space &#x3D; (int*)realloc(posarr-&gt;posSpace, sizeof(int) * (posarr-&gt;pos_size + 1));if (!pro_usable_space)&#123;SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE;exit(ClassicLinkList_ERROR_IN_MALLOCING_SPACE);&#125;posarr-&gt;posSpace &#x3D; pro_usable_space;posarr-&gt;posSpace[posarr-&gt;pos_size] &#x3D; pos_acquired;posarr-&gt;pos_size++;return ClassicLinkList_NORMAL;&#125;&#x2F;&#x2F;About Positions_Stored_Dynamic_Array&#x2F;&#x2F;this function is aimed to return the number of locations&#x2F;&#x2F;Use PSDA_dyarr_OPEN to have a better shown ,else use PSDA_dyarr_CLOSEsize_t Get_pos_size_From_PSDA_for_dyarr(Position_Stored_Dynamic_ArrayFordyarr*posarr, BetterPrintfor_PosDyarrWhether_Shown_Print)&#123;if (!posarr)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;if (Whether_Shown_Print &#x3D;&#x3D; PSDA_dyarr_OPEN)printf(&quot;\nCurrent targeted data&#39;s total num is:%u!\n&quot;, posarr-&gt;pos_size);return posarr-&gt;pos_size;&#125;&#x2F;&#x2F;About Positions_Stored_Dynamic_Array&#x2F;&#x2F;return a pos that is targeted!&#x2F;&#x2F;void* getPosbyPosinPSDA(Position_Stored_Dynamic_ArrayFordyarr* getter,size_tpos)&#123;if (!getter) &#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;if (pos &gt; getter-&gt;pos_size)&#123;SHOW_ERROR_ClassicLinkList_Invalid_Input;exit(ClassicLinkList_Invalid_Input);&#125;for (int i &#x3D; 0; i &lt; pos; i++)return (char*)getter-&gt;posSpace + i * sizeof(size_t);&#125;&#x2F;&#x2F;About Positions_Stored_Dynamic_ArrayClassicLinkListFunctionStatues DesTroy_A_PSDA_for_dyarr(Position_Stored_Dynamic_ArrayFordyarr*pointer_to_wishedfreeposarr)&#123;if (!pointer_to_wishedfreeposarr)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;free(pointer_to_wishedfreeposarr-&gt;posSpace);free(pointer_to_wishedfreeposarr);pointer_to_wishedfreeposarr &#x3D; NULL;return ClassicLinkList_NORMAL;&#125;#endif &#x2F;&#x2F; OPENUPPOSARR&#x2F;&#x2F;-----------------------------About ClassicLinkList-----------------------------------------------------------&#x2F;&#x2F;----------------------------Init-functions--------------------------------------------------------------------&#x2F;&#x2F; &#x2F;&#x2F; there are three basic type of initialization&#x2F;&#x2F; &#x2F;&#x2F; ------------------------------------------------------------------------------------------------------------&#x2F;&#x2F; 1.includeing the default type (init a NULL head and zero cur_size)&#x2F;&#x2F; func1: Classic_DataList* Init_A_ClassicLinkList()&#x2F;&#x2F; &#x2F;&#x2F; No input , or input VOID&#x2F;&#x2F; have output : output a clssicLinklist pointer&#x2F;&#x2F; -------------------------------------------------------------------------------------------------------------&#x2F;&#x2F; 2.includeing the copy one (init the same type of the be-copied one)&#x2F;&#x2F; func2: Classic_DataList* Init_A_ClassicLinkList_By_CopyAClassicLinkList&#x2F;&#x2F; &#x2F;&#x2F; input : a required_be_copied list .&#x2F;&#x2F; output: a new list but have is the same as the be_copied list&#x2F;&#x2F; -------------------------------------------------------------------------------------------------------------&#x2F;&#x2F; 3.includeing to transform the static array to the linklist one&#x2F;&#x2F; func3: Classic_DataList* UpdateStaticArray2ClassicLinkList&#x2F;&#x2F; &#x2F;&#x2F; input : a waited_transformed static_array , the element size which is in the static array &#x2F;&#x2F; output: a new pointer that points to classicLinkList&#x2F;&#x2F; &#x2F;&#x2F; &#x2F;&#x2F;----------------------------Init-functions--------------------------------------------------------------------&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; This function is used to init a default type of classicLinkList&#x2F;&#x2F; that the head of dataPiece is NULL and the cur_size is zero.&#x2F;&#x2F; Use push back to init the dataPiece&#x2F;&#x2F; use in this Way: &#x2F;&#x2F; Classic_DataList* List &#x3D; Init_A_ClassicLinkList();Classic_DataList* Init_A_ClassicLinkList()&#123;&#x2F;&#x2F; create empty spaceClassic_DataList* pro_usable_space &#x3D; (Classic_DataList*)malloc(sizeof(Classic_DataList));&#x2F;&#x2F; Check whether init succeededif (!pro_usable_space)&#123;SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE;exit(ClassicLinkList_ERROR_IN_MALLOCING_SPACE);&#125;&#x2F;&#x2F; Default set pro_usable_space-&gt;Head &#x3D; NULL;pro_usable_space-&gt;current_size &#x3D; 0;&#x2F;&#x2F; return out the Structurereturn pro_usable_space;&#125;&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; to copy an already exited linklist&#x2F;&#x2F; Classic_DataList* List &#x3D; Init_A_ClassicLinkList_By_CopyAClassicLinkList(Classic_DataList* list) &#x2F;&#x2F;Classic_DataList* Init_A_ClassicLinkList_By_CopyAClassicLinkList(Classic_DataList*list) &#123;&#x2F;&#x2F;check whether the input is legalif (list &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;&#x2F;&#x2F;check whether there is neccessity to copy if (list-&gt;current_size &#x3D;&#x3D; 0)&#123;printf(&quot;No need to copy! it hasn&#39;t been initialize yet!&quot;);&#x2F;&#x2F;Used to return NULL , but it is dangerous that two pointers points one things return NULL;&#125;&#x2F;&#x2F;New a List and new a head and new the data of the headClassic_DataList* p_NewList &#x3D; (Classic_DataList*)malloc(sizeof(Classic_DataList));Classic_DataNode* newHead &#x3D; (Classic_DataNode*)malloc(sizeof(Classic_DataNode));void* newdata &#x3D; malloc(sizeof(list-&gt;Head-&gt;data));&#x2F;&#x2F;check whether we init the node successfullyif (newHead &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE;exit(ClassicLinkList_ERROR_IN_MALLOCING_SPACE);&#125;if (newdata &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE;exit(ClassicLinkList_ERROR_IN_MALLOCING_SPACE);&#125;&#x2F;&#x2F;Do copy the data to the new head and finished initializationmemcpy(newdata, list-&gt;Head-&gt;data, sizeof(list-&gt;Head-&gt;data));newHead-&gt;data &#x3D; newdata;newHead-&gt;p_next_one &#x3D; NULL;p_NewList-&gt;Head &#x3D; newHead;p_NewList-&gt;current_size &#x3D; 1;&#x2F;&#x2F;Start copy other nodesClassic_DataNode* p_Currency &#x3D; list-&gt;Head-&gt;p_next_one;Classic_DataNode* pCurCopy &#x3D; p_NewList-&gt;Head;for (int i &#x3D; 0; i &lt; list-&gt;current_size-1; i++) &#123;&#x2F;&#x2F;Copy the I-th nodeClassic_DataNode* newDataNode &#x3D; (Classic_DataNode*)malloc(sizeof(Classic_DataNode));&#x2F;&#x2F;check if the initialization is illegalif(newDataNode&#x3D;&#x3D;NULL)&#123;SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE;exit(ClassicLinkList_ERROR_IN_MALLOCING_SPACE);&#125;&#x2F;&#x2F; prepare to copy data from the current nodevoid* newdata &#x3D; malloc(sizeof(p_Currency-&gt;data));&#x2F;&#x2F; check if the initialization is illegalif (newdata &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE;exit(ClassicLinkList_ERROR_IN_MALLOCING_SPACE);&#125;&#x2F;&#x2F;copy the detailed nodememcpy(newdata, p_Currency-&gt;data, sizeof(p_Currency-&gt;data));newDataNode-&gt;data &#x3D; newdata;newDataNode-&gt;p_next_one &#x3D; NULL;&#x2F;&#x2F;Moving the pointer and prepared next copypCurCopy-&gt;p_next_one &#x3D; newDataNode;pCurCopy &#x3D; pCurCopy-&gt;p_next_one;p_Currency &#x3D; p_Currency-&gt;p_next_one;&#125;&#x2F;&#x2F;Data copy finished , init the cur_sizep_NewList-&gt;current_size &#x3D; list-&gt;current_size;return p_NewList;&#125;&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; to updata a static array into a ClassicLinkList&#x2F;&#x2F; Classic_DataList* List &#x3D; UpdateStaticArray2ClassicLinkList(&#x2F;&#x2F; void* inputArray, &#x2F;&#x2F; size_t dataSize, &#x2F;&#x2F; size_t dataNum&#x2F;&#x2F; )&#x2F;&#x2F;Classic_DataList* UpdateStaticArray2ClassicLinkList(void*inputArray, size_tdataSize, size_tdataNum)&#123;if (inputArray &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;Classic_DataList* pro_usable_space &#x3D; (Classic_DataList*)malloc(sizeof(Classic_DataList));Classic_DataNode* FirstHeaddata &#x3D; (Classic_DataNode*)malloc(sizeof(Classic_DataNode*));void* datapiece &#x3D; malloc(dataSize);if (pro_usable_space &#x3D;&#x3D; NULL&amp;&amp;FirstHeaddata &#x3D;&#x3D; NULL&amp;&amp;datapiece &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE;exit(ClassicLinkList_ERROR_IN_MALLOCING_SPACE);&#125;memcpy(datapiece, inputArray, dataSize);FirstHeaddata-&gt;data &#x3D; datapiece;FirstHeaddata-&gt;p_next_one &#x3D; NULL;pro_usable_space-&gt;current_size &#x3D; 1;pro_usable_space-&gt;Head &#x3D; FirstHeaddata;for (int i &#x3D; 1; i &lt; dataNum; i++)&#123;Classic_DataNode* p_Currency &#x3D; pro_usable_space-&gt;Head;while (p_Currency-&gt;p_next_one)&#123;p_Currency &#x3D; p_Currency-&gt;p_next_one;&#125;void* datastored &#x3D; malloc(dataSize);if (!datastored)&#123;SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE;exit(ClassicLinkList_ERROR_IN_MALLOCING_SPACE);&#125;memcpy(datastored, (char*)inputArray + i * dataSize, dataSize);Classic_DataNode* datanode &#x3D; (Classic_DataNode*)malloc(sizeof(Classic_DataNode));if (!datanode)&#123;SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE;exit(ClassicLinkList_ERROR_IN_MALLOCING_SPACE);&#125;datanode-&gt;data &#x3D; datastored;datanode-&gt;p_next_one &#x3D; NULL;p_Currency-&gt;p_next_one &#x3D; datanode;pro_usable_space-&gt;current_size++;&#125;return pro_usable_space;&#125;&#x2F;&#x2F;----------------------------------------Basic_Add_Functions------------------------&#x2F;&#x2F; there are four basic input functions:&#x2F;&#x2F; &#x2F;&#x2F; ----------------------------------------------------------------------------------&#x2F;&#x2F; 1. push back an element into the classicLinkList&#x2F;&#x2F; func1 : ClassicLinkListFunctionStatues Push_Back_Into_A_ClassicLinkList&#x2F;&#x2F;&#x2F;&#x2F; input : the inserted list ,the data wanted to be inserted and the inserted datasize&#x2F;&#x2F; output: the statues of normal ,can be used in check or just ignore!&#x2F;&#x2F; &#x2F;&#x2F; ----------------------------------------------------------------------------------&#x2F;&#x2F; 2. insert back an element into the classicLinkList by offering a valid pos&#x2F;&#x2F; func2 : ClassicLinkListFunctionStatues Insert_into_AClassicLinkList&#x2F;&#x2F; &#x2F;&#x2F; &#x2F;&#x2F; input : the inserted list , the data ,the datasize as well as the position you wanted to insert&#x2F;&#x2F; output: the statues of normal ,can be used in check or just ignore!&#x2F;&#x2F; &#x2F;&#x2F; ----------------------------------------------------------------------------------&#x2F;&#x2F; &#x2F;&#x2F; 3. push back a bunch of data into the classicLinkList like the first function&#x2F;&#x2F; func3 :ClassicLinkListFunctionStatues push_Back_BunchDataintoClassicLinkList&#x2F;&#x2F; &#x2F;&#x2F; input : the inserted list , the data ,the datasize as well as the position you wanted to insert&#x2F;&#x2F; output: the statues of normal ,can be used in check or just ignore!&#x2F;&#x2F; &#x2F;&#x2F; ----------------------------------------------------------------------------------&#x2F;&#x2F; 4. insert back a bunch of data into the classicLinkList like the second function&#x2F;&#x2F; func4: ClassicLinkListFunctionStatues Insert_A_Bunch_of_data_intoClassicLinkList&#x2F;&#x2F;&#x2F;&#x2F; input : the inserted list , the static array ,the datasize in the static array as well as the position you wanted to insert&#x2F;&#x2F; output: the statues of normal ,can be used in check or just ignore! &#x2F;&#x2F; &#x2F;&#x2F;----------------------------------------Basic_Add_Functions-------------------------&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; push back some data ,like dynamic array , into the final position&#x2F;&#x2F;Used like this Push_Back_Into_A_ClassicLinkList(appendedClassicLinkList, data ,sizeof(data))&#x2F;&#x2F;ClassicLinkListFunctionStatues Push_Back_Into_A_ClassicLinkList(Classic_DataList*list, void*data,size_tdatasize)&#123;if (!list)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;if (!data)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;Classic_DataNode* p_Currency &#x3D; list-&gt;Head;if(list-&gt;Head !&#x3D; NULL)&#123;while (p_Currency-&gt;p_next_one)&#123;p_Currency &#x3D; p_Currency-&gt;p_next_one;&#125;void* datastored &#x3D; malloc(datasize);if (!datastored)&#123;SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE;exit(ClassicLinkList_ERROR_IN_MALLOCING_SPACE);&#125;memcpy(datastored, data, datasize);Classic_DataNode* datanode &#x3D; (Classic_DataNode*)malloc(sizeof(Classic_DataNode));if (!datanode)&#123;SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE;exit(ClassicLinkList_ERROR_IN_MALLOCING_SPACE);&#125;datanode-&gt;data &#x3D; datastored;datanode-&gt;p_next_one &#x3D; NULL;p_Currency-&gt;p_next_one &#x3D; datanode;list-&gt;current_size++;&#125;else&#123;void* datastored &#x3D; malloc(datasize);if (!datastored)&#123;SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE;exit(ClassicLinkList_ERROR_IN_MALLOCING_SPACE);&#125;memcpy(datastored, data, datasize);Classic_DataNode* datanode &#x3D; (Classic_DataNode*)malloc(sizeof(Classic_DataNode));if (!datanode)&#123;SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE;exit(ClassicLinkList_ERROR_IN_MALLOCING_SPACE);&#125;datanode-&gt;data &#x3D; datastored;datanode-&gt;p_next_one &#x3D; NULL;list-&gt;Head &#x3D; datanode;list-&gt;current_size++;&#125;return ClassicLinkList_NORMAL;&#125;&#x2F;&#x2F; About ClassicDataList&#x2F;&#x2F; insert back a data into the datalist&#x2F;&#x2F; used like this: Insert_into_AClassicLinkList(inserted list, input data,dataSize,insertion_pos)&#x2F;&#x2F; ClassicLinkListFunctionStatues Insert_into_AClassicLinkList(Classic_DataList*list, void*data,size_tdataSize,size_tpos)&#123;if (list &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;if (data &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;if (pos&lt;0 || pos&gt;list-&gt;current_size)&#123;SHOW_ERROR_ClassicLinkList_Invalid_Input;exit(ClassicLinkList_Invalid_Input);&#125;if (pos &#x3D;&#x3D; 0)&#123;Classic_DataNode* stored &#x3D; (Classic_DataNode*)malloc(sizeof(Classic_DataNode));if (stored &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE;exit(ClassicLinkList_ERROR_IN_MALLOCING_SPACE);&#125;void* dataPiece &#x3D; malloc(dataSize);memcpy(dataPiece, data, dataSize);stored-&gt;data &#x3D; dataPiece;stored-&gt;p_next_one &#x3D; list-&gt;Head;list-&gt;Head &#x3D; stored;list-&gt;current_size++;return ClassicLinkList_NORMAL;&#125;Classic_DataNode* pCurrency &#x3D; list-&gt;Head;Classic_DataNode* stored &#x3D; (Classic_DataNode*)malloc(sizeof(Classic_DataNode));if (stored &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE;exit(ClassicLinkList_ERROR_IN_MALLOCING_SPACE);&#125;void* dataPiece &#x3D; malloc(dataSize);memcpy(dataPiece, data, dataSize);stored-&gt;data &#x3D; dataPiece;for (int i &#x3D; 0; i &lt; pos; i++)&#123;pCurrency &#x3D; pCurrency-&gt;p_next_one;&#125;stored-&gt;p_next_one &#x3D; pCurrency-&gt;p_next_one;pCurrency-&gt;p_next_one &#x3D; stored;list-&gt;current_size++;return ClassicLinkList_NORMAL;&#125;&#x2F;&#x2F; About ClassicDataList&#x2F;&#x2F; push back a bunch data into the datalist&#x2F;&#x2F; used like this : push_Back_BunchDataintoClassicLinkList( inserted_list , the static array ,the elementsize ,the element num)&#x2F;&#x2F;ClassicLinkListFunctionStatues push_Back_BunchDataintoClassicLinkList(Classic_DataList*list,void*inputArray, size_tsigElemSize, size_tarrayNum)&#123;if (list &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;if(inputArray&#x3D;&#x3D;NULL)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;&#x2F;&#x2F;Equally as to updata a Static Array into a ClassicLinkList&#x2F;&#x2F;Once just use  UpdateStaticArray2ClassicLinkList(),but i&#39;m afraid of unable to use this functions&#x2F;&#x2F;as it is said: &quot;DO NOT motivate another functions , try to finish all work if neccessary&quot;if (list-&gt;Head &#x3D;&#x3D; NULL)&#123;&#x2F;&#x2F;New a List and new a head and new the data of the headClassic_DataList* p_NewList &#x3D; (Classic_DataList*)malloc(sizeof(Classic_DataList));Classic_DataNode* newHead &#x3D; (Classic_DataNode*)malloc(sizeof(Classic_DataNode));void* newdata &#x3D; malloc(sizeof(list-&gt;Head-&gt;data));&#x2F;&#x2F;check whether we init the node successfullyif (newHead &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE;exit(ClassicLinkList_ERROR_IN_MALLOCING_SPACE);&#125;if (newdata &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE;exit(ClassicLinkList_ERROR_IN_MALLOCING_SPACE);&#125;&#x2F;&#x2F;Do copy the data to the new head and finished initializationmemcpy(newdata, list-&gt;Head-&gt;data, sizeof(list-&gt;Head-&gt;data));newHead-&gt;data &#x3D; newdata;newHead-&gt;p_next_one &#x3D; NULL;p_NewList-&gt;Head &#x3D; newHead;p_NewList-&gt;current_size &#x3D; 1;&#x2F;&#x2F;Start copy other nodesClassic_DataNode* p_Currency &#x3D; list-&gt;Head-&gt;p_next_one;Classic_DataNode* pCurCopy &#x3D; p_NewList-&gt;Head;for (int i &#x3D; 0; i &lt; list-&gt;current_size - 1; i++)&#123;&#x2F;&#x2F;Copy the I-th nodeClassic_DataNode* newDataNode &#x3D; (Classic_DataNode*)malloc(sizeof(Classic_DataNode));&#x2F;&#x2F;check if the initialization is illegalif (newDataNode &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE;exit(ClassicLinkList_ERROR_IN_MALLOCING_SPACE);&#125;&#x2F;&#x2F; prepare to copy data from the current nodevoid* newdata &#x3D; malloc(sizeof(p_Currency-&gt;data));&#x2F;&#x2F; check if the initialization is illegalif (newdata &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE;exit(ClassicLinkList_ERROR_IN_MALLOCING_SPACE);&#125;&#x2F;&#x2F;copy the detailed nodememcpy(newdata, p_Currency-&gt;data, sizeof(p_Currency-&gt;data));newDataNode-&gt;data &#x3D; newdata;newDataNode-&gt;p_next_one &#x3D; NULL;&#x2F;&#x2F;Moving the pointer and prepared next copypCurCopy-&gt;p_next_one &#x3D; newDataNode;pCurCopy &#x3D; pCurCopy-&gt;p_next_one;p_Currency &#x3D; p_Currency-&gt;p_next_one;&#125;&#x2F;&#x2F;Data copy finished , init the cur_sizep_NewList-&gt;current_size &#x3D; list-&gt;current_size;list &#x3D; p_NewList;return ClassicLinkList_NORMAL;&#125;&#x2F;&#x2F;for this section , that means the head isn&#39;t NULL , just copy as usual:Classic_DataNode* pCur &#x3D; list-&gt;Head;for (int i &#x3D; 0; i &lt; list-&gt;current_size-1; i++) &#123;pCur &#x3D; pCur-&gt;p_next_one;&#125;for (int i &#x3D; 0; i &lt; arrayNum; i++) &#123;Classic_DataNode* pCopyCur &#x3D; (Classic_DataNode*)malloc(sizeof(Classic_DataNode));void* copyData &#x3D; malloc(sizeof(sigElemSize));if (pCopyCur &#x3D;&#x3D; NULL &amp;&amp; copyData &#x3D;&#x3D; NULL) &#123;SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE;exit(ClassicLinkList_ERROR_IN_MALLOCING_SPACE);&#125;memcpy(copyData, (char*)inputArray + i * sigElemSize, sigElemSize);pCopyCur-&gt;data &#x3D; copyData;pCopyCur-&gt;p_next_one &#x3D; NULL;pCur-&gt;p_next_one &#x3D; pCopyCur;pCur &#x3D; pCur-&gt;p_next_one;&#125;list-&gt;current_size +&#x3D; arrayNum;return ClassicLinkList_NORMAL;&#125;&#x2F;&#x2F; About ClassicDataList&#x2F;&#x2F; insert back a bunch of data into the datalist&#x2F;&#x2F; used like this: Insert_into_AClassicLinkList(inserted list, insertion_pos,input array ,Single dataSize, the amount of elements)&#x2F;&#x2F; ClassicLinkListFunctionStatues Insert_A_Bunch_of_data_intoClassicLinkList(Classic_DataList*list,size_tpos,void*inputArray,size_tsigElemSize,size_tarrayNum) &#123;if (list &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;if (inputArray &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;if (pos &gt; list-&gt;current_size)&#123;SHOW_WARNING_ClassicLinkList_OVERLAP_POS;SHOW_WHETHER_ACCCEPTED(&quot;y&#x2F;n: y for yes , n for n&quot;);int choice;scanf(&quot;%c&quot;, &amp;choice);if (choice &#x3D;&#x3D; &#39;y&#39;)&#123;pos &#x3D; list-&gt;current_size;&#125;else&#123;SHOW_ERROR_ClassicLinkList_Invalid_Input;exit(ClassicLinkList_Invalid_Input);&#125;&#125;Classic_DataNode* pCurNow &#x3D; NULL;Classic_DataNode* pStart &#x3D; NULL;for(int i &#x3D; 0 ; i &lt; arrayNum ; i++)&#123;Classic_DataNode* pCopyCur &#x3D; (Classic_DataNode*)malloc(sizeof(Classic_DataNode));void* copydata &#x3D; malloc(sigElemSize);if (pCopyCur &#x3D;&#x3D; NULL &amp;&amp; copydata &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE;exit(ClassicLinkList_ERROR_IN_MALLOCING_SPACE);&#125;memcpy(copydata, (char*)inputArray + i * sigElemSize, sigElemSize);pCopyCur-&gt;data &#x3D; copydata;pCopyCur-&gt;p_next_one &#x3D; NULL;if (i &#x3D;&#x3D; 0)&#123;pCurNow &#x3D; pCopyCur;pStart &#x3D; pCopyCur;continue;&#125;pCurNow-&gt;p_next_one &#x3D; pCopyCur;pCurNow &#x3D; pCurNow-&gt;p_next_one;&#125;if (pos &#x3D;&#x3D; 0)&#123;pCurNow-&gt;p_next_one &#x3D; list-&gt;Head;list-&gt;Head &#x3D; pStart;list-&gt;current_size +&#x3D; arrayNum;return ClassicLinkList_NORMAL;&#125;Classic_DataNode* pCur &#x3D; list-&gt;Head;for (int i &#x3D; 0; i &lt; pos; i++) &#123;pCur &#x3D; pCur-&gt;p_next_one;&#125;pCurNow-&gt;p_next_one &#x3D; pCur-&gt;p_next_one;pCur-&gt;p_next_one &#x3D; pStart;list-&gt;current_size +&#x3D; arrayNum;return ClassicLinkList_NORMAL;&#125;&#x2F;&#x2F;------------------------------------------Deletion_Functions-------------&#x2F;&#x2F; there are two basic type of functions in the sections&#x2F;&#x2F; 1. Erase a targeted element and erase it from the ClassicDataList&#x2F;&#x2F; fun1:eraseAElementfromDataList&#x2F;&#x2F; &#x2F;&#x2F; input : the list and the erase position&#x2F;&#x2F; output: the statues of normal ,can be used in check or just ignore!&#x2F;&#x2F; &#x2F;&#x2F; --------------------------------------------------------------------------&#x2F;&#x2F; &#x2F;&#x2F; 2.Erase some target elements from the ClassicDataList&#x2F;&#x2F; fun2:eraseAbunchData&#x2F;&#x2F; &#x2F;&#x2F; input: the list and the start position as well as the last position, that means offer a paired pos&#x2F;&#x2F; output: the statues of normal ,can be used in check or just ignore!&#x2F;&#x2F;------------------------------------------Deletion_Functions----------------&#x2F;&#x2F; About ClassicDataList&#x2F;&#x2F; delete a  data in the datalist by offering a position&#x2F;&#x2F;used like this: eraseAElementfromDataList(list, erasing_pos)&#x2F;&#x2F;ClassicLinkListFunctionStatues eraseAElementfromDataList(Classic_DataList*list,size_tpos) &#123;if (list &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;if (pos&lt;0 || pos&gt;list-&gt;current_size)&#123;SHOW_ERROR_ClassicLinkList_Invalid_Input;exit(ClassicLinkList_Invalid_Input);&#125;if (pos &#x3D;&#x3D; 0)&#123;Classic_DataNode* pNewHead &#x3D; list-&gt;Head-&gt;p_next_one;Classic_DataNode* pDel &#x3D; list-&gt;Head;list-&gt;Head &#x3D; pNewHead;free(pDel-&gt;data);list-&gt;current_size--;return ClassicLinkList_NORMAL;&#125;Classic_DataNode* pCur &#x3D; list-&gt;Head;for (int i &#x3D; 0; i &lt; pos-1; i++)&#123;pCur &#x3D; pCur-&gt;p_next_one;&#125;Classic_DataNode* pDel &#x3D; pCur-&gt;p_next_one;pCur-&gt;p_next_one &#x3D; pDel-&gt;p_next_one;free(pDel-&gt;data);free(pDel);list-&gt;current_size--;return ClassicLinkList_NORMAL;&#125;&#x2F;&#x2F; About ClassicDataList&#x2F;&#x2F; delete a bunch of data in the datalist&#x2F;&#x2F; used like this eraseAbunchData( list,  front_pos,  final_pos)&#x2F;&#x2F;ClassicLinkListFunctionStatues eraseAbunchData_inDataList(Classic_DataList*list, size_tfront_pos,size_tfinal_pos)&#123;if (list &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;if (front_pos&lt;0 || front_pos&gt;list-&gt;current_size)&#123;SHOW_ERROR_ClassicLinkList_Invalid_Input;exit(ClassicLinkList_Invalid_Input);&#125;if (final_pos&lt;0 || final_pos&gt;list-&gt;current_size)&#123;SHOW_ERROR_ClassicLinkList_Invalid_Input;exit(ClassicLinkList_Invalid_Input);&#125;if (front_pos &gt; final_pos)&#123;SHOW_WARNING_ClassicLinkList_SWAPPED_POS;SHOW_WHETHER_ACCCEPTED(&quot;y&#x2F;n: y for yes , n for n&quot;);int choice;scanf(&quot;%c&quot;, &amp;choice);if (choice &#x3D;&#x3D; &#39;y&#39;) &#123;int temp &#x3D; final_pos;final_pos &#x3D; front_pos;front_pos &#x3D; temp;&#125;else&#123;SHOW_ERROR_ClassicLinkList_Invalid_Input;exit(ClassicLinkList_Invalid_Input);&#125;&#125;Bool flag &#x3D;False;if (front_pos &#x3D;&#x3D; 0) &#123;flag &#x3D; True;front_pos++;&#125;Classic_DataNode* pCur &#x3D; list-&gt;Head;for (int i &#x3D; 0; i &lt; front_pos-1; i++) &#123;pCur &#x3D; pCur-&gt;p_next_one;&#125;int cur_place &#x3D; front_pos-1;while (cur_place &lt;&#x3D; final_pos-1) &#123;Classic_DataNode* pDel &#x3D; pCur-&gt;p_next_one;pCur-&gt;p_next_one &#x3D; pDel-&gt;p_next_one;free(pDel);cur_place++;&#125;list-&gt;current_size -&#x3D; final_pos - front_pos +1;if (flag &#x3D;&#x3D; True) &#123;Classic_DataNode* pNewHead &#x3D; pCur-&gt;p_next_one;Classic_DataNode* pDel &#x3D; list-&gt;Head;list-&gt;Head &#x3D; pNewHead;free(pDel-&gt;data);front_pos++;list-&gt;current_size--;&#125;return ClassicLinkList_NORMAL;&#125;&#x2F;&#x2F;----------------------------------------check_if_element_existed_functions-----&#x2F;&#x2F; there are four functions in this sections&#x2F;&#x2F; &#x2F;&#x2F; 1.check if the classiclinklist is empty&#x2F;&#x2F; fun1: isEmptyClassicLinkList&#x2F;&#x2F; &#x2F;&#x2F; input :the checked list&#x2F;&#x2F; output: My defined bool(Sadly the org C doesn&#39;t define that)&#x2F;&#x2F; &#x2F;&#x2F; ------------------------------------------------------------------------------&#x2F;&#x2F; &#x2F;&#x2F; 2. check if the target elements is exsited in the datalist&#x2F;&#x2F; fun2: checkIsLocateinLinkList&#x2F;&#x2F; &#x2F;&#x2F; input : the checked list ,the searched data and the Compared functions&#x2F;&#x2F; output: the locations that we first found it&#x2F;&#x2F; &#x2F;&#x2F; -------------------------------------------------------------------------------&#x2F;&#x2F; &#x2F;&#x2F; 3. return out the first locations that we found of the target elements&#x2F;&#x2F; func3:checkIsLocateinLinkList&#x2F;&#x2F; &#x2F;&#x2F; input : the checked list ,the searched data and the Compared functions&#x2F;&#x2F; output: My defined bool(Sadly the org C doesn&#39;t define that)&#x2F;&#x2F; &#x2F;&#x2F; --------------------------------------------------------------------------------&#x2F;&#x2F; &#x2F;&#x2F; Warning : this functions required the PSDA abstractions is opened so you can use Position_Stored_Dynamic_ArrayFordyarr*&#x2F;&#x2F; to get the position&#x2F;&#x2F; &#x2F;&#x2F; 4. return out a bunch of data that was contained in Position_Stored_Dynamic_ArrayFordyarr&#x2F;&#x2F; fun4:returnAbunchLocationsinLinkList&#x2F;&#x2F; &#x2F;&#x2F; input : the checked list , the Position_Stored_Dynamic_ArrayFordyarr*(required init first)&#x2F;&#x2F; output: the Position_Stored_Dynamic_ArrayFordyarr that stored the positions!&#x2F;&#x2F;&#x2F;&#x2F; ---------------------------------------------------------------------------------&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; check if the LinkList is empty&#x2F;&#x2F;Bool isEmptyClassicLinkList(Classic_DataList* list)&#123;if (list-&gt;current_size &#x3D;&#x3D; 0)&#123;return True;&#125;return False;&#125;&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; check if the target elements is exsited in the datalist&#x2F;&#x2F;Bool checkIsLocateinLinkList(Classic_DataList*list, void*data,LocateFuncuser_func)&#123;if (list &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;if (data &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;if (user_func &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;Classic_DataNode* pCur &#x3D; list-&gt;Head;for (int i &#x3D; 0; i &lt; list-&gt;current_size; i++)&#123;if (user_func(data, pCur-&gt;data)) &#123;return True;&#125;&#125;return False;&#125;&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; return out the first locations that we found of the target elements&#x2F;&#x2F; can use in this way: size_t pos &#x3D; returnOutDatabyposinLinkList( list, data, user_func)size_t returnOutDatabyposinLinkList(Classic_DataList*list, void*data, LocateFuncuser_func)&#123;Classic_DataNode* pCur &#x3D; list-&gt;Head;for (int i &#x3D; 0; i &lt; list-&gt;current_size; i++)&#123;if (user_func(data, pCur-&gt;data)) &#123;return i;&#125;pCur &#x3D; pCur-&gt;p_next_one;&#125;return Unfind_ClassicLinkList;&#125;&#x2F;&#x2F; Make sure the OPENUPPOSARR &#x3D;&#x3D; 1 if wanted to use it#if OPENUPPOSARR&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; return out a bunch of data that was contained in Position_Stored_Dynamic_ArrayFordyarr&#x2F;&#x2F; can use in this way: Position_Stored_Dynamic_ArrayFordyarr* somePos &#x3D; &#x2F;&#x2F; returnAbunchLocationsinLinkList( list,  posArr,  data,  user_func)&#x2F;&#x2F;Position_Stored_Dynamic_ArrayFordyarr* returnAbunchLocationsinLinkList(Classic_DataList*list, Position_Stored_Dynamic_ArrayFordyarr*posArr, void*data,LocateFuncuser_func)&#123;if (list &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;if (data &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;if (posArr &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;Classic_DataNode* p_Currency &#x3D; list-&gt;Head;int possible_count &#x3D; 0;for (int i &#x3D; 0; i &lt; list-&gt;current_size; i++)&#123;if ((*user_func)(data, p_Currency-&gt;data))&#123;int* pro_usable_stored_space &#x3D; (int*)realloc(posArr-&gt;posSpace, sizeof(int) * (possible_count + 1));if (!pro_usable_stored_space)&#123;SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE;exit(ClassicLinkList_ERROR_IN_MALLOCING_SPACE);&#125;posArr-&gt;posSpace &#x3D; pro_usable_stored_space;posArr-&gt;posSpace[possible_count] &#x3D; i;possible_count++;posArr-&gt;pos_size &#x3D; possible_count;&#125;p_Currency &#x3D; p_Currency-&gt;p_next_one;&#125;if (posArr-&gt;pos_size)return posArr;return Unfind_ClassicLinkList;&#125;#endif &#x2F;&#x2F;---------------------------------------Do_Something_to_the_datalist_functions----------&#x2F;&#x2F; there are seven functions in this sections&#x2F;&#x2F; &#x2F;&#x2F; 1. Classic Print functions&#x2F;&#x2F; func1: Print_All_Data_LinkList&#x2F;&#x2F; to print all the data in the user_defined linklist&#x2F;&#x2F; &#x2F;&#x2F; input : list and the user print , and the decision whether enjoyed a better print&#x2F;&#x2F; output: the statues of normal ,can be used in check or just ignore!&#x2F;&#x2F; &#x2F;&#x2F; ------------------------------------------------------------------------------------&#x2F;&#x2F; &#x2F;&#x2F; 2. Do some change to the specific data&#x2F;&#x2F; to make some change directly to an element&#x2F;&#x2F; &#x2F;&#x2F; input : the list ,the targeted positions and the way how you want to operate the data itself&#x2F;&#x2F; output: the statues of normal ,can be used in check or just ignore!&#x2F;&#x2F; &#x2F;&#x2F; ------------------------------------------------------------------------------------&#x2F;&#x2F; &#x2F;&#x2F; 3. Do some change to all the data in the classiclinklist&#x2F;&#x2F; to make some change directly to the whole elements&#x2F;&#x2F; &#x2F;&#x2F; input : the list ,the way how you want to operate the data itself&#x2F;&#x2F; output: the statues of normal ,can be used in check or just ignore!&#x2F;&#x2F; &#x2F;&#x2F; -----------------------------------------------------------------------------------&#x2F;&#x2F; &#x2F;&#x2F; 4. Do specific change to an interval pos in the classicLickList&#x2F;&#x2F; to make some change directly to the interval elements&#x2F;&#x2F; &#x2F;&#x2F; input : the list ,the front_pos and the final_pos&#x2F;&#x2F; output: the statues of normal ,can be used in check or just ignore!&#x2F;&#x2F; &#x2F;&#x2F; -----------------------------------------------------------------------------------&#x2F;&#x2F; &#x2F;&#x2F; 5. reverse ClassicLinkList&#x2F;&#x2F; to reverse up the classic LinkList&#x2F;&#x2F; &#x2F;&#x2F; input : the ready_reversed data&#x2F;&#x2F; output: the statues of normal ,can be used in check or just ignore!&#x2F;&#x2F; &#x2F;&#x2F; -----------------------------------------------------------------------------------&#x2F;&#x2F; &#x2F;&#x2F; 6. combine two linkList into one&#x2F;&#x2F; to combine the two classic linklist into one!&#x2F;&#x2F; &#x2F;&#x2F; input : the two linklist&#x2F;&#x2F; output: the merged linklist Pointer&#x2F;&#x2F; &#x2F;&#x2F; -----------------------------------------------------------------------------------&#x2F;&#x2F; &#x2F;&#x2F; 7. sort the elements in the classicLinkList under the user&#39;s constructions&#x2F;&#x2F; to sort the ClassicLinkList&#x2F;&#x2F; &#x2F;&#x2F; input : the classicLinklist&#x2F;&#x2F; output: the statues of normal ,can be used in check or just ignore!&#x2F;&#x2F; &#x2F;&#x2F; ---------------------------------------------------------------------------------&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; to print the data&#x2F;&#x2F; use in this way: Print_All_Data_LinkList( list, user_print,  whether_better_print)&#x2F;&#x2F;ClassicLinkListFunctionStatues Print_All_Data_LinkList(Classic_DataList*list,MyPrintuser_print, BetterPrintSwitch_for_ClassicLinkListwhether_better_print)&#123;if (!list)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;if (!user_print)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;if (whether_better_print &#x3D;&#x3D; ClassicLinkList_OPEN) &#123;printf(&quot;\nStart printing:\n&quot;);&#125;Classic_DataNode* p_Currency &#x3D; list-&gt;Head;for (int i &#x3D; 0; i &lt; list-&gt;current_size; i++)&#123;user_print(p_Currency-&gt;data);p_Currency &#x3D; p_Currency-&gt;p_next_one;&#125;if (whether_better_print &#x3D;&#x3D; ClassicLinkList_OPEN) &#123;printf(&quot;\nFinish printing:\n&quot;);&#125;return ClassicLinkList_NORMAL;&#125;&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; to make some change to the specific data&#x2F;&#x2F; use in this way:doChangetoSpecificElementinLinkList( list,  pos , user_func)&#x2F;&#x2F;ClassicLinkListFunctionStatues doChangetoSpecificElementinLinkList(Classic_DataList*list, size_tpos ,Do_Specific_Changeuser_func) &#123;if (list &#x3D;&#x3D; NULL&amp;&amp;user_func&#x3D;&#x3D;NULL)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;if (pos&lt;0 || pos&gt;list-&gt;current_size)&#123;SHOW_ERROR_ClassicLinkList_Invalid_Input;exit(ClassicLinkList_Invalid_Input);&#125;Classic_DataNode* pCur &#x3D; list-&gt;Head;for (int i &#x3D; 0; i &lt; pos; i++)&#123;pCur &#x3D; pCur-&gt;p_next_one;&#125;user_func(pCur-&gt;data);return ClassicLinkList_NORMAL;&#125;&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; to make some change to the interval data&#x2F;&#x2F; use in this way:doChangetoTargetIntervalDatainLinkList(list , pos1,pos2, user_func)&#x2F;&#x2F;ClassicLinkListFunctionStatues doChangetoTargetIntervalDatainLinkList(Classic_DataList*list, size_tfront_pos,size_tfinal_pos,Do_Specific_Changeuser_func) &#123;if (list &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;if (front_pos&lt;0 || front_pos&gt;list-&gt;current_size)&#123;SHOW_ERROR_ClassicLinkList_Invalid_Input;exit(ClassicLinkList_Invalid_Input);&#125;if (final_pos&lt;0 || final_pos&gt;list-&gt;current_size)&#123;SHOW_ERROR_ClassicLinkList_Invalid_Input;exit(ClassicLinkList_Invalid_Input);&#125;if (front_pos &gt; final_pos)&#123;SHOW_WARNING_ClassicLinkList_SWAPPED_POS;SHOW_WHETHER_ACCCEPTED(&quot;y&#x2F;n: y for yes , n for n&quot;);int choice;scanf(&quot;%c&quot;, &amp;choice);if (choice &#x3D;&#x3D; &#39;y&#39;)&#123;int temp &#x3D; final_pos;final_pos &#x3D; front_pos;front_pos &#x3D; temp;&#125;else&#123;SHOW_ERROR_ClassicLinkList_Invalid_Input;exit(ClassicLinkList_Invalid_Input);&#125;&#125;Classic_DataNode* pCur &#x3D; list-&gt;Head;for (int i &#x3D; 0; i &lt; front_pos; i++) &#123;pCur &#x3D; pCur-&gt;p_next_one;&#125;for (int i &#x3D; front_pos; i &lt; final_pos+1; i++)&#123;user_func(pCur-&gt;data);pCur &#x3D; pCur-&gt;p_next_one;&#125;return ClassicLinkList_NORMAL;&#125;&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; to make some change to the whole elements in the data&#x2F;&#x2F; use in this way:doChangetoAllDatainLinkList( list,  user_func)&#x2F;&#x2F;ClassicLinkListFunctionStatues doChangetoAllDatainLinkList(Classic_DataList*list,Do_Specific_Changeuser_func)&#123;if (list &#x3D;&#x3D; NULL &amp;&amp; user_func &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;Classic_DataNode* pCur &#x3D; list-&gt;Head;for (int i &#x3D; 0; i &lt; list-&gt;current_size; i++) &#123;user_func(pCur-&gt;data);pCur&#x3D;pCur-&gt;p_next_one;&#125;return ClassicLinkList_NORMAL;&#125;&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; to reverse up the classiclinklist&#x2F;&#x2F; use in this way:ReverseLinkList(list)&#x2F;&#x2F;ClassicLinkListFunctionStatues ReverseLinkList(Classic_DataList* list)&#123;if (list &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;if (list-&gt;current_size &#x3D;&#x3D; 1)&#123;printf(&quot;No need in reversing!,try a longer one lol&quot;);return ClassicLinkList_NORMAL;&#125;if (list-&gt;current_size &#x3D;&#x3D; 2)&#123;Classic_DataNode* headFisrt &#x3D; list-&gt;Head;Classic_DataNode* pFin &#x3D; headFisrt-&gt;p_next_one;pFin-&gt;p_next_one &#x3D; headFisrt;headFisrt-&gt;p_next_one &#x3D; NULL;list-&gt;Head &#x3D; pFin;return ClassicLinkList_NORMAL;&#125;Classic_DataNode* pFinal &#x3D; list-&gt;Head-&gt;p_next_one;Classic_DataNode* pPrior &#x3D; list-&gt;Head;while (pFinal!&#x3D; NULL) &#123;Classic_DataNode* tempFin &#x3D; pFinal-&gt;p_next_one;pFinal-&gt;p_next_one &#x3D; pPrior;pPrior &#x3D; pFinal;pFinal &#x3D; tempFin;&#125;list-&gt;Head &#x3D; pPrior;&#125;&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; to merge two linklist into the one&#x2F;&#x2F; use in this way:mergeLinkList(list_be_added, list_adder, whether_copied)&#x2F;&#x2F;Classic_DataList* mergeLinkList(Classic_DataList*list_be_added, Classic_DataList*list_adder, size_twhether_copied)&#123;if (list_be_added &#x3D;&#x3D; NULL &amp;&amp; list_adder &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;Classic_DataNode* pCur&#x3D;list_be_added-&gt;Head;for (int i &#x3D; 0; i &lt; list_be_added-&gt;current_size-1; i++)&#123;pCur &#x3D; pCur-&gt;p_next_one;&#125;&#x2F;&#x2F;Do not copy , instead just merge!if (whether_copied&#x3D;&#x3D;ClassicLinkList_NO_COPY) &#123;pCur-&gt;p_next_one &#x3D; list_adder-&gt;Head;list_be_added-&gt;current_size +&#x3D; list_adder-&gt;current_size;return list_be_added;&#125;Classic_DataNode* pAdder &#x3D; list_adder-&gt;Head;for (int i &#x3D; 0; i &lt; list_adder-&gt;current_size; i++)&#123;&#x2F;&#x2F;prepare the spaceClassic_DataNode* pCopy &#x3D; (Classic_DataNode*)malloc(sizeof(Classic_DataNode));void* dataCopy &#x3D; malloc(sizeof(pAdder-&gt;data));if (pCopy &#x3D;&#x3D; NULL &amp;&amp; dataCopy &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE;exit(ClassicLinkList_ERROR_IN_MALLOCING_SPACE);&#125;&#x2F;&#x2F;Using to copy data and initialize the copied nodememcpy(dataCopy, pAdder-&gt;data, sizeof(pAdder-&gt;data));pCopy-&gt;data &#x3D; dataCopy;pCopy-&gt;p_next_one &#x3D; NULL;&#x2F;&#x2F;then push back into the linklistpCur-&gt;p_next_one &#x3D; pCopy;&#x2F;&#x2F;Moving the copy pointerpAdder &#x3D; pAdder-&gt;p_next_one;pCur &#x3D; pCur-&gt;p_next_one;&#125;list_be_added-&gt;current_size +&#x3D; list_adder-&gt;current_size;return list_be_added;&#125;&#x2F;&#x2F; About ClassicLinkList&#x2F;&#x2F; sort the classicLinklist in the bobblesort&#x2F;&#x2F; use in this way:sortClassicLinkListinBubbleSort(Classic_DataList* list, CompareFunc user_func) &#x2F;&#x2F;ClassicLinkListFunctionStatues sortClassicLinkListinBubbleSort(Classic_DataList*list, CompareFuncuser_func) &#123;if (list &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;if (user_func &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;for (int i &#x3D; 0; i &lt; list-&gt;current_size-1; i++)&#123;Classic_DataNode* pCur &#x3D; list-&gt;Head;for(int j&#x3D;0;j&lt;list-&gt;current_size-i-1;j++)&#123;&#x2F;&#x2F;this two for loops are just standard BobbleSortif (user_func(pCur-&gt;data, pCur-&gt;p_next_one-&gt;data))&#123;void* tempdata &#x3D; malloc(sizeof(pCur-&gt;data));memcpy(tempdata, pCur-&gt;data, sizeof(pCur-&gt;data));int tempdatasize &#x3D; sizeof(pCur-&gt;data);&#x2F;&#x2F;Before Swap,make sure that the dataContainer is huge enough to contain a new spaceif (sizeof(pCur-&gt;p_next_one-&gt;data) &gt; sizeof(pCur-&gt;data))&#123;void* pTempSwap &#x3D; realloc(pCur-&gt;data, sizeof(pCur-&gt;p_next_one-&gt;data));if (pTempSwap &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_ClassicLinkList_ERROR_IN_MALLOCING_SPACE;exit(ClassicLinkList_ERROR_IN_MALLOCING_SPACE);&#125;pCur-&gt;data &#x3D; pTempSwap;&#125;&#x2F;&#x2F;Copy and swapmemcpy(pCur-&gt;data, pCur-&gt;p_next_one-&gt;data, sizeof(pCur-&gt;p_next_one-&gt;data));memcpy(pCur-&gt;p_next_one-&gt;data, tempdata, tempdatasize);&#125;&#x2F;&#x2F;Moving pointer to the next onepCur &#x3D; pCur-&gt;p_next_one;&#125;&#125;return ClassicLinkList_NORMAL;&#125;&#x2F;&#x2F;----------------------------------------------------Basic_Erase------------------------------&#x2F;&#x2F; &#x2F;&#x2F; 1.Erase A LinkList&#x2F;&#x2F; used in just clear a linklist&#x2F;&#x2F; func1: clearAClassicLinkList&#x2F;&#x2F; &#x2F;&#x2F; input : just a classiclinklist&#x2F;&#x2F; output: the statues of normal ,can be used in check or just ignore!&#x2F;&#x2F; &#x2F;&#x2F; --------------------------------------------------------------------------------------------&#x2F;&#x2F;About ClassicLinkList&#x2F;&#x2F; Erase a classicLinkList&#x2F;&#x2F; Use in this way clearAClassicLinkList( list)&#x2F;&#x2F;ClassicLinkListFunctionStatues clearAClassicLinkList(Classic_DataList* list)&#123;if (list &#x3D;&#x3D; NULL) &#123;SHOW_ERROR_ClassicLinkList_NULL_INPUT;exit(ClassicLinkList_NULL_INPUT);&#125;Classic_DataNode* pCur &#x3D; list-&gt;Head-&gt;p_next_one;Classic_DataNode* pDel &#x3D; list-&gt;Head;if (list-&gt;current_size &#x3D;&#x3D; 1) &#123;free(pDel);&#125;for (int i &#x3D; 0; i &lt; list-&gt;current_size-1; i++)&#123;free(pDel);pDel &#x3D; pCur;pCur &#x3D; pCur-&gt;p_next_one;&#125;list-&gt;current_size &#x3D; 0 ;return ClassicLinkList_NORMAL;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试文档：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define _CRT_SECURE_NO_WARNINGS 1#include&quot;ClassicLinkList.h&quot;MyPrint print(int* e) &#123;printf(&quot;%d &quot;, *e);&#125;Do_Specific_Change dochange(int* e) &#123;*e &#x3D; *e + 1;&#125;LocateFunc loc(int* e1, int* e2) &#123;return *e1 &#x3D;&#x3D; *e2;&#125;CompareFunc comp(int* e1, int* e2) &#123;return *e1 &lt; *e2;&#125;int main()&#123;&#x2F;&#x2F;do test initailization&#x2F;&#x2F;default initClassic_DataList* defaultinit &#x3D; Init_A_ClassicLinkList();&#x2F;&#x2F;updata initint array[10] &#x3D; &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;Classic_DataList* update_one &#x3D; UpdateStaticArray2ClassicLinkList(array, Dyarr_SIGINT, 10);Print_All_Data_LinkList(update_one, print, ClassicLinkList_OPEN);&#x2F;&#x2F; copy initClassic_DataList* copy_one &#x3D; Init_A_ClassicLinkList_By_CopyAClassicLinkList(update_one);printf(&quot;\nThouth , this is the copy one:&quot;);Print_All_Data_LinkList(copy_one, print, ClassicLinkList_OPEN);&#x2F;&#x2F; Push back int addersig &#x3D; 100;printf(&quot;\nFirst push:&quot;);Push_Back_Into_A_ClassicLinkList(defaultinit, &amp;addersig, Dyarr_SIGINT);Print_All_Data_LinkList(defaultinit, print, ClassicLinkList_OPEN);printf(&quot;\nSecond push:&quot;);Push_Back_Into_A_ClassicLinkList(defaultinit, &amp;addersig, Dyarr_SIGINT);Print_All_Data_LinkList(defaultinit, print, ClassicLinkList_OPEN);&#x2F;&#x2F; Push back a sumint adderarr[5] &#x3D; &#123; 101,102,103,104,105 &#125;;push_Back_BunchDataintoClassicLinkList(defaultinit, adderarr, Dyarr_SIGINT, 5);Print_All_Data_LinkList(defaultinit, print, ClassicLinkList_OPEN);&#x2F;&#x2F;Insert start:int insertionsig &#x3D; -100;&#x2F;&#x2F;to the head:Insert_into_AClassicLinkList(defaultinit, &amp;insertionsig, Dyarr_SIGINT, 0);Print_All_Data_LinkList(defaultinit, print, ClassicLinkList_OPEN);&#x2F;&#x2F;to other placeInsert_into_AClassicLinkList(defaultinit, &amp;insertionsig, Dyarr_SIGINT, 1);Print_All_Data_LinkList(defaultinit, print, ClassicLinkList_OPEN);&#x2F;&#x2F;for a bunch ...&#x2F;&#x2F;headint insertarr[5] &#x3D; &#123; -1,-2,-3,-4,-5 &#125;;Insert_A_Bunch_of_data_intoClassicLinkList(update_one, 0, insertarr, Dyarr_SIGINT, 5);Print_All_Data_LinkList(update_one, print, ClassicLinkList_OPEN);&#x2F;&#x2F;other placeInsert_A_Bunch_of_data_intoClassicLinkList(update_one, 1, insertarr, Dyarr_SIGINT, 5);Print_All_Data_LinkList(update_one, print, ClassicLinkList_OPEN);&#x2F;&#x2F;Erase eraseAElementfromDataList(copy_one, 0);Print_All_Data_LinkList(copy_one, print, ClassicLinkList_OPEN);eraseAElementfromDataList(copy_one, 1);Print_All_Data_LinkList(copy_one, print, ClassicLinkList_OPEN);&#x2F;&#x2F;Erase buncheraseAbunchData_inDataList(copy_one, 0, 2);Print_All_Data_LinkList(copy_one, print, ClassicLinkList_OPEN);&#x2F;&#x2F;make change:&#x2F;&#x2F;sigdoChangetoSpecificElementinLinkList(copy_one, 0, dochange);Print_All_Data_LinkList(copy_one, print, ClassicLinkList_OPEN);&#x2F;&#x2F;intervaldoChangetoTargetIntervalDatainLinkList(copy_one, 0, 2, dochange);Print_All_Data_LinkList(copy_one, print, ClassicLinkList_OPEN);&#x2F;&#x2F;alldoChangetoAllDatainLinkList(copy_one, dochange);Print_All_Data_LinkList(copy_one, print, ClassicLinkList_OPEN);&#x2F;&#x2F;check if inClassic_DataList* checkerlist &#x3D; UpdateStaticArray2ClassicLinkList(insertarr, Dyarr_SIGINT, 5);int wannafind &#x3D; -1;printf(&quot;So is it null?&quot;);if (!isEmptyClassicLinkList(checkerlist)) &#123;printf(&quot;\nNot null sir!\n&quot;);&#125;if (checkIsLocateinLinkList(checkerlist, &amp;wannafind, loc)) &#123;printf(&quot;yes, there is a num that is -1\n&quot;);&#125;printf(&quot;and it is on the place: %d\n&quot;, returnOutDatabyposinLinkList(checkerlist, &amp;wannafind, loc));int wannafind2 &#x3D; wannafind - 1;printf(&quot;and also there is -2 too, it is in: %d\n&quot;, returnOutDatabyposinLinkList(checkerlist, &amp;wannafind2, loc));printf(&quot;I can also make a change in this way directly:\n&quot;);doChangetoSpecificElementinLinkList(checkerlist, returnOutDatabyposinLinkList(checkerlist, &amp;wannafind2, loc), dochange);Print_All_Data_LinkList(checkerlist, print, ClassicLinkList_OPEN);&#x2F;&#x2F;find bunch Position_Stored_Dynamic_ArrayFordyarr* posarr &#x3D; Init_A_Postion_Stored_Dynamic_ArrayFordyarr();returnAbunchLocationsinLinkList(checkerlist, posarr, &amp;wannafind, loc);Show_All_Locations_In_PSDAfor_dyarr(posarr, PSDA_dyarr_OPEN);&#x2F;&#x2F;reverseReverseLinkList(checkerlist);Print_All_Data_LinkList(checkerlist, print, ClassicLinkList_OPEN);&#x2F;&#x2F;SortsortClassicLinkListinBubbleSort(checkerlist, comp);Print_All_Data_LinkList(checkerlist, print, ClassicLinkList_OPEN);&#x2F;&#x2F;DelclearAClassicLinkList(checkerlist);Print_All_Data_LinkList(checkerlist, print, ClassicLinkList_OPEN);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> MyTinyLibProject </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学教程 （7）</title>
      <link href="/2023/02/10/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E6%95%99%E7%A8%8B%EF%BC%887%EF%BC%89/"/>
      <url>/2023/02/10/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E6%95%99%E7%A8%8B%EF%BC%887%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="高等数学教程（14）"><a href="#高等数学教程（14）" class="headerlink" title="高等数学教程（14）"></a>高等数学教程（14）</h1><h2 id="一元向量值函数及其导数"><a href="#一元向量值函数及其导数" class="headerlink" title="一元向量值函数及其导数"></a>一元向量值函数及其导数</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><script type="math/tex; mode=display">\begin{equation}\left\{\begin{aligned}x & = & \varphi(t) \\y & = & \phi(t) \\z & = & \omega (t)\end{aligned}\right.\end{equation}</script><p>​        可以看到，我们对于空间点的坐标可以使用</p><script type="math/tex; mode=display">\vec{r}=\vec{x}i+\vec{y}j+\vec{z}k</script><p>​        这样的方式表达！</p><p>​        于是对于一个点，可以使用一个类似于函数的表达方式：</p><script type="math/tex; mode=display">\vec{f(t)}=f_1(t)\vec{x}+f_2(t)\vec{y}+f_3(t)\vec{z}</script><h3 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h3><p>定义：</p><p>当</p><script type="math/tex; mode=display">t\rightarrow t_0,f(t)\rightarrow r_0,\lim\limits_{t\rightarrow t_0}\vec{f(t)}=r_0</script><p>下，我们可以记作：</p><script type="math/tex; mode=display">\lim\limits_{t\rightarrow t_0}\vec{f(t)}=(\lim\limits_{t\rightarrow t_0}{f_1(t)},\lim\limits_{t\rightarrow t_0}{f_2(t)},\lim\limits_{t\rightarrow t_0}{f_3(t)})</script><h3 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h3><p>现在定义：</p><script type="math/tex; mode=display">\lim\limits_{\Delta t\rightarrow 0}\frac{\Delta r}{\Delta t}=\lim\limits_{\Delta t\rightarrow 0}\frac{f(t_0+\Delta{t})-f(t_0)}{\Delta t}</script><p>于是展开，可以得到：</p><script type="math/tex; mode=display">f'(t_0)=(f'_1(t_0),f'_2(t_0),f'_3(t_0))</script><h3 id="相关求导法则"><a href="#相关求导法则" class="headerlink" title="相关求导法则"></a>相关求导法则</h3><p>​        跟数量函数一致，我们来看：</p><p><img src="image-20230210170814278.png" alt="image-20230210170814278"></p><h3 id="空间曲线的切线与法平面"><a href="#空间曲线的切线与法平面" class="headerlink" title="空间曲线的切线与法平面"></a>空间曲线的切线与法平面</h3><p><img src="image-20230210170906185.png" alt="image-20230210170906185"></p><p>​        回到上面我们讲到的：一个空间曲线的切向量就是：</p><script type="math/tex; mode=display">T=(\varphi'(t_0),\phi'(t_0),\omega'(t_0))</script><p>​        于是切线方程就是：</p><script type="math/tex; mode=display">\frac{x-x_0}{\varphi'(t_0)}=\frac{y-y_0}{\phi'(t_0)}=\frac{z-z_0}{\omega'(t_0)}</script><p>​        法平面：</p><script type="math/tex; mode=display">(x-x_0){\varphi'(t_0)}+(y-y_0){\phi'(t_0)}+(z-z_0){\omega'(t_0)}=0</script><p>​        对于方程式形式的，还是跟上一节的方程组求导一致</p><p><img src="image-20230210171628902.png" alt="image-20230210171628902"></p><h3 id="空间曲面的切平面和法线"><a href="#空间曲面的切平面和法线" class="headerlink" title="空间曲面的切平面和法线"></a>空间曲面的切平面和法线</h3><p>1.$F(x,y,z)=0$</p><p>​        切平面：</p><script type="math/tex; mode=display">F_x'(x-x_0)+F_y'(y-y_0)+F_z'(z-z_0)=0</script><p>​        法线：</p><script type="math/tex; mode=display">\frac{x-x_0}{F'_x}=\frac{y-y_0}{F'_y}=\frac{z-z_0}{F'_z}</script><p>2.$z=f(x,y)$</p><p>​        挪个位置：$F(x,y,z)=f(x,y)-z$</p><p>​        切平面：</p><script type="math/tex; mode=display">F_x'(x-x_0)+F_y'(y-y_0)-(z-z_0)=0</script><p>​        法线：</p><script type="math/tex; mode=display">\frac{x-x_0}{F'_x}=\frac{y-y_0}{F'_y}=\frac{z-z_0}{-1}</script><h3 id="方向导数"><a href="#方向导数" class="headerlink" title="方向导数"></a>方向导数</h3><p>求方向导数，可以理解为曲面上的点$P(x_0,y_0)$出发的一条射线</p><p><img src="image-20230210172637380.png" alt="image-20230210172637380"></p><p>我们出发产生的射线方程：</p><script type="math/tex; mode=display">\begin{equation}\left\{\begin{aligned}x & = & x_0+t\cos\alpha \\y & = & y_0+t\cos\beta \\\end{aligned}\right.\end{equation}</script><p>这个时候：</p><script type="math/tex; mode=display">\lim\limits_{t\rightarrow 0^+}\frac{f(x_0+t\cos\alpha,y_0+t\cos\beta)-f(x_0,y_0)}{t}=\frac{\partial f}{\partial l}|_{(x_0,y_0)}</script><p>​        可以看作：<strong>F（x,y）在方向L上的偏导数！</strong>，方向导数这一节就是对偏导的推广！</p><p>​        但是，我们的方向导数是射线，是从一个方向逼近的，于是有：</p><pre class="line-numbers language-none"><code class="language-none">方向导数存在，但是偏导未必因此存在！想要成为充要条件，则需要正负两个方向导数相等<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20230210173343849.png" alt="image-20230210173343849"></p><p>​        定理：若函数$f(x,y)$在$(x_0,y_0)$可微，方向导数存在且$\frac{\partial f}{\partial l}|_{(x_0,y_0)}=f’_x\cos \alpha+f_y’\cos \beta $</p><h3 id="关系整理"><a href="#关系整理" class="headerlink" title="关系整理"></a>关系整理</h3><p><img src="image-20230210173813570.png" alt="image-20230210173813570"></p><h3 id="梯度"><a href="#梯度" class="headerlink" title="梯度"></a>梯度</h3><p>​        定义：</p><script type="math/tex; mode=display">\nabla f(x_0,y_0)=gradf(x_0,y_0)=(f'_x(x_0,y_0),f_y'(x_0,y_0))</script><p>​        为梯度，<strong>他是个向量！</strong></p><p>​        回到这里：</p><script type="math/tex; mode=display">\frac{\partial f}{\partial l}|_{(x_0,y_0)}=(f'_x(x_0,y_0),f_y'(x_0,y_0))\cdot(\cos \alpha,\cos \beta)=|gradf(x_0,y_0)|\cos \theta</script><p>​        1)当$\theta=0$,此时方向导数最大，于是</p><pre class="line-numbers language-none"><code class="language-none">梯度是在这一点方向导数取最大值的方向<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        2）当$\theta = \pi$,此时方向导数最小，为$|-gradf(x_0,y_0)|$</p><p>​        3)当$\theta = \frac{\pi}{2}$此时，方向导数为0，可以看作平行于等高线了！也可以理解为：在这个方向增长最快。</p><h3 id="极大值（极小值）"><a href="#极大值（极小值）" class="headerlink" title="极大值（极小值）"></a>极大值（极小值）</h3><p>定理一：极值必要条件：</p><p>$z=f(x,y)偏导，且(x_0,y_0)是极值点，则f’_x(x_0,y_0)=0,f’_y(x_0,y_0)=0$</p><p>驻点：$f’_x(x_0,y_0)=0,f’_y(x_0,y_0)=0$同时成立！</p><p>定理二：充分条件</p><p>$A=f’’_{xx}(x_0,y_0),B=f’’_{xy}(x_0,y_0),C=f’’_{yy}(x_0,y_0)$</p><p>则：</p><p>1）$AC&gt;B^2$:极值，且$A&gt;0是极小值，A&lt;0是极大值$</p><p>2）$AC&lt;B^2$:不是极值</p><p>3）$AC=B^2$:另作判断！</p><h3 id="条件极值"><a href="#条件极值" class="headerlink" title="条件极值"></a>条件极值</h3><p>​        什么叫条件极值，就是在一定约束之下函数的最大值，于是拉格朗日数乘就有：</p><script type="math/tex; mode=display">\begin{equation}\left\{\begin{aligned}f_x'+\lambda\varphi_x'=0 \\f_y'+\lambda\varphi_y'=0  \\\varphi(x_0,y_0)=0\end{aligned}\right.\end{equation}</script><p>​        实际上，我们常常直接构造拉格朗日函数：</p><script type="math/tex; mode=display">L(x,y)=f(x,y)+\lambda \varphi(x,y)</script><script type="math/tex; mode=display">\begin{equation}\left\{\begin{aligned}L_x'=0 \\L_y'=0  \\\end{aligned}\right.\end{equation}</script>]]></content>
      
      
      
        <tags>
            
            <tag> Math Works </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数基本教程（2）</title>
      <link href="/2023/02/09/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%9F%BA%E6%9C%AC%E6%95%99%E7%A8%8B%EF%BC%882%EF%BC%89/"/>
      <url>/2023/02/09/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%9F%BA%E6%9C%AC%E6%95%99%E7%A8%8B%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="线性代数（2）"><a href="#线性代数（2）" class="headerlink" title="线性代数（2）"></a>线性代数（2）</h1><h2 id="按行展开的行列式"><a href="#按行展开的行列式" class="headerlink" title="按行展开的行列式"></a>按行展开的行列式</h2><p>首先介绍余子式：</p><h3 id="余子式"><a href="#余子式" class="headerlink" title="余子式"></a>余子式</h3><p>什么叫余子式呢？就是针对一个元素去掉他所在的行它所在的列，剩下的行列式叫做余子式：如对下面的行列式去掉第三行第二列：</p><script type="math/tex; mode=display">\left | \begin{matrix} 1&1&0&3\\1&1&1&1\\2&2&3&4\\5&5&6&6\end{matrix} \right|</script><p>产生的余子式$M_{32}$是：</p><script type="math/tex; mode=display">\left | \begin{matrix} 1&0&3\\1&1&1\\5&6&6\end{matrix} \right|</script><p>派生的概念是代数余子式就是：$A_{ij}$是$(-1)^{i+j}M_{ij}$</p><p>于是</p><h3 id="行列式的按行或列展开"><a href="#行列式的按行或列展开" class="headerlink" title="行列式的按行或列展开"></a>行列式的按行或列展开</h3><p>定理：定义任意的行列式可以如下的计算</p><script type="math/tex; mode=display">D=\sum_{k=1}^na_{ik}A_{ik}</script><p>或者：</p><script type="math/tex; mode=display">D=\sum_{k=1}^na_{ki}A_{ki}</script><p>如：</p><script type="math/tex; mode=display">\left |\begin{matrix}1&1&2 \\0&1&0 \\2&3&5\end{matrix}\right |=\\0\times A_{21}\times(-1)^{2+1}+(-1)^{2+2}\times A_{22}\times1+0\times A_{23}\times(-1)^{2+3}</script><h3 id="异乘变零定理"><a href="#异乘变零定理" class="headerlink" title="异乘变零定理"></a>异乘变零定理</h3><p><strong>某行元素与另一行元素的代数余子式为0</strong></p><h3 id="拉普拉斯K阶子式"><a href="#拉普拉斯K阶子式" class="headerlink" title="拉普拉斯K阶子式"></a>拉普拉斯K阶子式</h3><p>对行列式去掉K行K列的式子还是余子式，去掉的部分叫K阶子式。（可以不做了解，应为后面学矩阵了秒懂）</p><h3 id="行列式的乘法"><a href="#行列式的乘法" class="headerlink" title="行列式的乘法"></a>行列式的乘法</h3><p>​        对于行列式的乘法：跟矩阵一致，我们是</p><script type="math/tex; mode=display">a_{ij}=A_{Row(i)}\times B_{Col(j)}</script><p>​        当然是同阶的</p><h3 id="行列式计算技巧"><a href="#行列式计算技巧" class="headerlink" title="行列式计算技巧"></a>行列式计算技巧</h3><h4 id="尽量制造行和便于提取：如对于"><a href="#尽量制造行和便于提取：如对于" class="headerlink" title="尽量制造行和便于提取：如对于"></a>尽量制造行和便于提取：如对于</h4><script type="math/tex; mode=display">\left |\begin{matrix}x&a&a&...&a\\a&x&a&...&a\\a&a&x&...&a\\...&...&...&...&...\\a&a&a&...&x\\\end{matrix}\right |</script><p>讲所有的列依次加到第一列，提取(x+(n-1)a)得到</p><script type="math/tex; mode=display">(x+(n-1)a)\left |\begin{matrix}1&0&0&...&0\\1&x-a&0&...&0\\1&1&x-a&...&0\\...&...&...&...&...\\1&1&1&...&x-a\\\end{matrix}\right |</script><h4 id="可以适当加边，便于计算"><a href="#可以适当加边，便于计算" class="headerlink" title="可以适当加边，便于计算"></a>可以适当加边，便于计算</h4><p>对于：</p><script type="math/tex; mode=display">\left |\begin{matrix}1+a_1&1&1&...&1\\1&1+a_2&1&...&1\\1&1&1+a_3&...&1\\...&...&...&...&...\\1&1&1&...&1+a_n\\\end{matrix}\right |</script><p>可以：</p><script type="math/tex; mode=display">\left |\begin{matrix}1&1&1&1&...&1\\0&1+a_1&1&1&...&1\\0&1&1+a_2&1&...&1\\0&1&1&1+a_3&...&1\\0&...&...&...&...&...\\0&1&1&1&...&1+a_n\\\end{matrix}\right |</script><p>这是因为代数余子式计算中只有第一行有效，展开后还是原来的样子，所以：第一行乘上-1加到其他行得到：</p><script type="math/tex; mode=display">\left |\begin{matrix}1&1&1&1&...&1\\-1&a_1&0&0&...&0\\-1&0&a_2&0&...&0\\-1&0&0&a_3&...&0\\-1&...&...&...&...&...\\-1&0&0&0&...&a_n\\\end{matrix}\right |</script><p>对于这样的行列式，叫三叉形行列式：我们是：依次从列，消掉第一列（第二列乘上$\frac{1}{a_1}$加到第一列…依次类推），得到</p><script type="math/tex; mode=display">\left |\begin{matrix}1+\sum_{i=1}^{n}\frac{1}{a_i}&1&1&1&...&1\\0&a_1&0&0&...&0\\0&0&a_2&0&...&0\\0&0&0&a_3&...&0\\0&...&...&...&...&...\\01&0&0&0&...&a_n\\\end{matrix}\right |</script><h3 id="范德蒙德行列式"><a href="#范德蒙德行列式" class="headerlink" title="范德蒙德行列式"></a>范德蒙德行列式</h3><p>特殊定义这个行列式</p><script type="math/tex; mode=display">\left | \begin{matrix}1&1&1&...&1 \\x_1&x_2&x_3&...&x_n \\x_1^2&x_2^2&x_3^2&...&x_n^2 \\...&...&...&...&...\\x_1^{n-2}&x_2^{n-2}&x_3^{n-2}&...&x_n^{n-2} \\x_1^{n-1}&x_2^{n-1}&x_3^{n-1}&...&x_n^{n-1} \\ \end{matrix} \right |</script><p>这个值是</p><script type="math/tex; mode=display">\Pi_{1\leq j <i \leq n}(x_i-x_j)</script><p>说白了就是，假设这是一个五阶行列式：</p><script type="math/tex; mode=display">D=(x_2-x_1)(x_3-x_1)(x_4-x_1)(x_5-x_1)\\(x_3-x_2)(x_4-x_2)(x_5-x_2)\\(x_4-x_3)(x_5-x_3)\\(x_5-x_4)</script><p>怎么来的？首先第一行乘上$-x_1$在这个基础上接着再做，行列式变成</p><script type="math/tex; mode=display">\left | \begin{matrix}1&1&1&...&1 \\0&x_2-x_1&x_3-x_1&...&x_n-x_1 \\0&x_2^2-x_1^2&x_3^2-x_1^2&...&x_n^2 -x_1^2\\...&...&...&...&...\\0&x_2^{n-2}-x_1^{n-2}&x_3^{n-2}-x_1^{n-2}&...&x_n^{n-2}-x_1^{n-2} \\0&x_2^{n-1}-x_1^{n-1}&x_3^{n-1}-x_1^{n-1}&...&x_n^{n-1}-x_1^{n-1} \\ \end{matrix} \right |</script><p>​        然后第一列第一行就可以消去了</p><script type="math/tex; mode=display">\left | \begin{matrix}x_2-x_1&x_3-x_1&...&x_n-x_1 \\x_2^2-x_1^2&x_3^2-x_1^2&...&x_n^2 -x_1^2\\...&...&...&...\\x_2^{n-2}-x_1^{n-2}&x_3^{n-2}-x_1^{n-2}&...&x_n^{n-2}-x_1^{n-2} \\x_2^{n-1}-x_1^{n-1}&x_3^{n-1}-x_1^{n-1}&...&x_n^{n-1}-x_1^{n-1} \\ \end{matrix} \right |</script><p>​        好好看每一个列，发现都有因子$(x_i-x_1)$提出来：</p><script type="math/tex; mode=display">(x_2-x_1)(x_3-x_1)...(x_n-x_1)\left | \begin{matrix}1&1&1&...&1 \\x_1&x_2&x_3&...&x_{n-1} \\x_1^2&x_2^2&x_3^2&...&x_{n-1}^2 \\...&...&...&...&...\\x_1^{n-2}&x_2^{n-2}&x_3^{n-2}&...&x_{n-1}^{n-2} \\x_1^{n-1}&x_2^{n-1}&x_3^{n-1}&...&x_{n-1}^{n-1} \\ \end{matrix} \right |</script><p>​        又出现了！又可以重复做！</p><h3 id="反对称行列式"><a href="#反对称行列式" class="headerlink" title="反对称行列式"></a>反对称行列式</h3><p>​        对于这样的行列式</p><script type="math/tex; mode=display">\left | \begin{matrix}0&a&b&c&...&h\\-a&0&d&e&...&w\\-b&-d&0&...&...&y\\-c&-e&...&0&...&z\\...&...&...&...&...&...\\-h&-w&-y&-z&...&0\end{matrix}\right |</script><p>​        1)主对角线全是0</p><p>​        2）上下位置对应成相反数</p><p><strong>于是，奇数阶：$D=0$</strong></p><h3 id="对称行列式"><a href="#对称行列式" class="headerlink" title="对称行列式"></a>对称行列式</h3><script type="math/tex; mode=display">\left | \begin{matrix}a&b&c&d&y&x\\b&e&f&h&f&i\\c&f&k&p&m&n\\d&h&p&q&r&s\\y&f&m&r&w&t\\x&i&n&s&t&u\end{matrix}\right |</script><p>​        1）主对角线无所谓2）上下元素对应相等</p><p>​        这样的行列式叫做对称行列式</p><h3 id="Crammer法则"><a href="#Crammer法则" class="headerlink" title="Crammer法则"></a>Crammer法则</h3><p>​        方程组的系数行列式即是行列式的每个元素由系数组成。</p><p>​        对于$x_j$,当$D\neq 0$,</p><script type="math/tex; mode=display">x_j=\frac{D_j}{D}</script><p>​        其中，$D_j$是等号右边的列替换第J列产生的新行列式</p><p><img src="image-20230209223519341.png" alt="image-20230209223519341"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Math Works </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率论与数理统计 （2）</title>
      <link href="/2023/02/09/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1-%EF%BC%882%EF%BC%89/"/>
      <url>/2023/02/09/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1-%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="概率论与数理统计（2）"><a href="#概率论与数理统计（2）" class="headerlink" title="概率论与数理统计（2）"></a>概率论与数理统计（2）</h1><h3 id="事件的概率"><a href="#事件的概率" class="headerlink" title="事件的概率"></a>事件的概率</h3><p>​        </p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>​        概率是衡量可能性大小的量，对于事件A,我们记：概率是$P(A)$</p><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><p>1）$P(\Omega)=1$</p><p>2）$P(\phi)=0$</p><p>3）$0\leq P(A)\leq 1$</p><h3 id="古典概率模型"><a href="#古典概率模型" class="headerlink" title="古典概率模型"></a>古典概率模型</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>​        一个概率事件可以被视作古典概率模型的条件如下：</p><p><strong>1）有限个样本点</strong></p><p><strong>2）所有的事件都是等可能性的</strong>！</p><p>​        于是，基于我们的直觉，我们可以构想出集合下样本点发生的概率是：</p><script type="math/tex; mode=display">P(A)=\frac{A事件的样本点}{\Omega中样本点的个数}</script><h4 id="记数："><a href="#记数：" class="headerlink" title="记数："></a>记数：</h4><p>​        首先引入我们高中排列组合的知识：</p><p>加法原理：几种方案（加法算）</p><p>乘法原理：几步走（乘法算）</p><h4 id="排列"><a href="#排列" class="headerlink" title="排列"></a>排列</h4><p>​        从N个不同的元素选出M个元素的排列</p><script type="math/tex; mode=display">P_N^M=n(n-1)(n-2)...(n-m+1)=\frac{n!}{(n-m)!}</script><h4 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h4><p>​        从N个元素中选出M个不同元素</p><script type="math/tex; mode=display">C_N^M=\frac{P_N^M}{m!}=\frac{n!}{(n-m)!m!}</script><h3 id="几何概型"><a href="#几何概型" class="headerlink" title="几何概型"></a>几何概型</h3><p>​        如果我们的样本点连续的密不可分：我们可以用面积，线段占比长度来衡量，我们就说这个是几何概型：</p><script type="math/tex; mode=display">P(A)=\frac{\mu(G)}{\mu(\Omega)}</script><p>​        举个例子：蒲丰投针问题</p><p><img src="image-20230209204850321.png" alt="image-20230209204850321"></p><p>​        求相交的概率:</p><p>​        注意到：</p><script type="math/tex; mode=display">\Omega = \{(\varphi,x)|0\leq\varphi\leq\pi,0\leq x\leq\frac{l}{2}\}</script><script type="math/tex; mode=display">G=\{(\varphi,x)|0\leq\varphi\leq\pi,0\leq x\leq\frac{l}{2}\sin\varphi\}</script><p>故：</p><script type="math/tex; mode=display">P(G)=\frac{\int_0^\pi\frac{l}{2}\sin\varphi d\varphi }{\pi \times \frac{d}{2}}</script><h3 id="频率与概率"><a href="#频率与概率" class="headerlink" title="频率与概率"></a>频率与概率</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><p>​        定义频率是N次实验里出现了M次事件，则频率为：</p><script type="math/tex; mode=display">\frac{m}{n}</script><h4 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h4><p>1）非负性：$0\leq\omega_n(A)\leq1$</p><p>2）  规范：$\omega_n(\emptyset)=0,\omega_n(\Omega)=1$</p><p>3）可加性：$A_1,A_2…A_m$不相容，则：$\omega_n(A_1+…A_m)=\omega_n(A_1)+…\omega_n(A_m)$</p><h3 id="公理化"><a href="#公理化" class="headerlink" title="公理化"></a>公理化</h3><p>​        我们有三条公理：</p><p>1.（非负性）$0\leq P(A)\leq 1$</p><p>2.（规范化）$P(\Omega)=1$</p><p>3.（完全可加）$A_1$,$A_2$…不相容：则$P(A_1+A_2+…)=P(A_1)+…$</p><p>​    由此推导性质</p><p>1）$P(\phi)=0$</p><p>推导：$\Omega=\Omega+\phi+\phi+…$</p><p>故：$P(\Omega)=P(\Omega)+P(\phi)+…$推导：$P(\phi)=0$</p><p>2)$P(\bar{A})=1-P(A)$</p><p>推导：$A \cap \bar A = \phi,A \cup \bar A = \Omega$</p><p>故：$P(\Omega)=P(A)+P(\bar A)=1$</p><p>3)对于完备事件组：$A_1,A_2,…A_n$,$\sum_{i=1}^nP_i=1$</p><p>4)$P(A-B)=P(A)-P(AB)$</p><p>5)$P(A+B)=P(A)+P(B)-P(AB)$</p><p> 推论：$P(A+B+C)=P(A)+P(B)+P(C)-P(AB)-P(BC)-P(AC)+P(ABC)$</p>]]></content>
      
      
      
        <tags>
            
            <tag> Math Works </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学教程 （6）</title>
      <link href="/2023/02/09/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E6%95%99%E7%A8%8B%EF%BC%886%EF%BC%89/"/>
      <url>/2023/02/09/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E6%95%99%E7%A8%8B%EF%BC%886%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="多元函数微分法"><a href="#多元函数微分法" class="headerlink" title="多元函数微分法"></a>多元函数微分法</h1><h3 id="平面点集"><a href="#平面点集" class="headerlink" title="平面点集"></a>平面点集</h3><p>​        下面我们要引入多元函数，这就要求我们需要有点集的概念：我们定义一些点，如果满足一些特有的性质，就称之为他们是一个点集：</p><script type="math/tex; mode=display">E=\{(x,y)|(x,y)有特定关系\}</script><p>​        我们举个例子：一些点再一个半径为R的圆上：</p><script type="math/tex; mode=display">E=\{(x,y)|x^2+y^2=R^2\}</script><p>​        由于在平面上更有扩展性，我们就需要引入跟一元函数一样的概念：领域，这一次指的是P周围的地方：记作</p><script type="math/tex; mode=display">\mathring U(P_0,\sigma)=\{P||PP_0|<\sigma\}</script><p>​        点有几种：在一个圈住的特定范围下：有外点（不属于），边界点（处于边界），内点（就属于里面）</p><p>​        对于这些集合：有开集，闭集（就是说白了：取不取等的问题），有有界集无界集的概念，这里不多做阐述。</p><h3 id="N维空间"><a href="#N维空间" class="headerlink" title="N维空间"></a>N维空间</h3><p>​        N维空间表示</p><script type="math/tex; mode=display">R^n=\{(x_1,x_2,...,x_n)|x_i \in R,i=1,2,3,..,n\}</script><p>​        说白了，就像二维空间只用两个分量表达就可以阐述完全一样。</p><h3 id="多元函数的极限"><a href="#多元函数的极限" class="headerlink" title="多元函数的极限"></a>多元函数的极限</h3><p>​        比较一下：我们的一元函数的极限是单一主元趋向一个值：$x\rightarrow x_0$,一元函数也是这样的逼近！（从左边逼近，从右边逼近）。</p><p>​        那么多元函数又如何？（多元函数就像是：z=x+2y这样的玩意），注意到这一次我们的点可以在平面上移动而不是在线上移动！</p><script type="math/tex; mode=display">(x,y)\rightarrow(x_0,y_0)</script><p>​        这样的逼近方式是任意方式逼近的，这就让我们：可以直线逼近，可以曲线逼近！</p><p>​        <img src="image-20230206111243619.png" alt="image-20230206111243619"></p><p>​        如此：如果就算这样我们的极限值还是都不变：那么我们说函数的极限存在</p><script type="math/tex; mode=display">\lim\limits_{(x,y)\rightarrow(x_0,y_0)}f(x,y)=A</script><p>​        举个例子：$f(x,y)=(x^2+y^2)\sin\frac{1}{x^2+y^2}$求解：</p><script type="math/tex; mode=display">\lim\limits_{(x,y)\rightarrow(0,0)}(x^2+y^2)\sin\frac{1}{x^2+y^2}</script><p>​        很容易看出：$\sin\frac{1}{x^2+y^2}$有界的，这样，函数极限怎么样都是0！</p><p>​        如果极限不满足任何方式逼近相等，那就不存在！</p><p>​        比如说：求解$\lim\limits_{(x,y)\rightarrow (x_0,y_0)}f(x,y)$</p><script type="math/tex; mode=display">\begin{equation}f(x,y)=\left\{    \begin{aligned}    \frac{xy}{x^2+y^2} \quad x^2+y^2\neq 0\\    0 \quad x^2+y^2=0\\    \end{aligned}    \right    .\end{equation}</script><p>​        只需要：$y=kx$逼近:</p><script type="math/tex; mode=display">\lim\limits_{(x,y)\rightarrow (x_0,y_0)}f(x,y)=\frac{k}{k^2+1}</script><p>​        而若是：$y=-kx$逼近：</p><script type="math/tex; mode=display">\lim\limits_{(x,y)\rightarrow (x_0,y_0)}f(x,y)=-\frac{k}{k^2+1}</script><p>​         这下显然不存在了！</p><h3 id="偏导数"><a href="#偏导数" class="headerlink" title="偏导数"></a>偏导数</h3><h4 id="基本定义"><a href="#基本定义" class="headerlink" title="基本定义"></a>基本定义</h4><p>​        在一元导数中，我们这样定义导数：</p><script type="math/tex; mode=display">1)x\rightarrow x_0 ,\lim\limits_{x\rightarrow x_0}\frac{f(x)-f(x_0)}{x-x_0}</script><script type="math/tex; mode=display">2)\Delta x\rightarrow 0 ,\lim\limits_{\Delta x\rightarrow 0}\frac{f(x_0+\Delta x)-f(x_0)}{\Delta x}</script><p>​        类似的，<strong>我们的多元函数不过就是多个主元一同影响函数值！</strong>这就是为什么我们的导数多了一个“偏”：如果说我们有一个函数$z=f(x,y)$，我们把目光聚焦在$x$上：我们就说$z$对$x$的偏导数就是这样定义的：</p><script type="math/tex; mode=display">\frac{\partial z}{\partial x}=\lim\limits_{\Delta x\rightarrow0}\frac{f(x_0+\Delta x,y_0)-f(x_0,y_0)}{\Delta x}</script><p>​        当然还有这个简单的写法：</p><p>1）$z_x’$                         2）$f’_x(x,y)$</p><p>​        试试看，对$y$的偏导又是如何？</p><script type="math/tex; mode=display">\frac{\partial z}{\partial y}=\lim\limits_{\Delta y\rightarrow0}\frac{f(x_0,y_0+\Delta y)-f(x_0,y_0)}{\Delta y}</script><p>​        实际上，我们直接其他变量视作常数就好了</p><p>1）$z=x^2+3xy+y^2$在（1,2）处求偏导:</p><script type="math/tex; mode=display">\frac{\partial z}{\partial x}=2x+3y,\frac{\partial z}{\partial y}=2y+3x</script><p>​        带入值就好了！</p><h4 id="几何含义"><a href="#几何含义" class="headerlink" title="几何含义"></a>几何含义</h4><p>​        说白了还是切线，不过是什么方向上的切线而已：过对应点切面产生的曲线的切线</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>​        对于一元函数来讲：可导一定连续！</p><p>​        对于二元函数来讲，可导不一定连续（因为此时退化为偏导，只是一个方向才是连续，其他的方式不一定！此时一个函数的连续指的是函数怎么逼近都是连续）</p><h4 id="高阶偏导"><a href="#高阶偏导" class="headerlink" title="高阶偏导"></a>高阶偏导</h4><p>​        因为主元具有多样性：在二阶偏导中，有了：</p><script type="math/tex; mode=display">\frac{\partial^2 z}{\partial x^2}=z'_{xx}=f''_{xx}</script><script type="math/tex; mode=display">\frac{\partial^2 z}{\partial x\partial y}=z'_{xy}=f''_{xy}</script><script type="math/tex; mode=display">\frac{\partial^2 z}{\partial y\partial x}=z'_{yx}=f''_{yx}</script><script type="math/tex; mode=display">\frac{\partial^2 z}{\partial y^2}=z'_{yy}=f''_{yy}</script><p>​        注意到：中间两个我们先后对函数的不同变量求导，故称之为混合偏导：<strong>当函数连续的时候：$z’’_{xy}=z’’_{yx}$</strong></p><h3 id="全微分"><a href="#全微分" class="headerlink" title="全微分"></a>全微分</h3><h4 id="可微的定义"><a href="#可微的定义" class="headerlink" title="可微的定义"></a>可微的定义</h4><p>​        还是跟微分很是相似：$\Delta z_x=f(x_0+\Delta x,y_0)-f(x_0,y_0)$是对X的偏增量，$\Delta z_y=f(x_0,y_0+\Delta y)-f(x_0,y_0)$是对Y的偏增量。现在，我们让两个都变：这就是全微分</p><script type="math/tex; mode=display">\Delta z=f(x_0+\Delta x,y_0+\Delta y)-f(x_0,y_0)</script><p>​        定义：如果这个$\Delta z=A\Delta x+B\Delta y+o(\rho)$其中A，B还是跟增量无关的一个函数，随后就会有：</p><script type="math/tex; mode=display">dz=A\Delta x+B\Delta y</script><h4 id="可微的必要条件"><a href="#可微的必要条件" class="headerlink" title="可微的必要条件"></a>可微的必要条件</h4><p>​        <strong>定理：若z=f(x,y)在点( x,y )处可微，则偏导数$f’_x(x,y),f’_y(x,y)$存在且：</strong></p><script type="math/tex; mode=display">dz=f'_x(x,y)\Delta x+f'_y(x,y)\Delta y</script><p>​        还是跟上一个一样：偏导数只是说明了一个方向上可微，其他的不一定。</p><h4 id="可微的充分条件"><a href="#可微的充分条件" class="headerlink" title="可微的充分条件"></a>可微的充分条件</h4><p>​        如果：$f(x,y)$在(x,y)的某一个领域内有连续的偏导数$f’_x(x,y),f’_y(x,y)$那就说明（x,y）是可微的：</p><script type="math/tex; mode=display">dz=d_xz+d_yz</script><h3 id="求导法则"><a href="#求导法则" class="headerlink" title="求导法则"></a>求导法则</h3><p>​        现在事情准备复杂起来！我们利用链式求导法则</p><p>​        情况1：$z=f(u,v),u=\phi(t),v=\varphi(t)$求导！</p><p>​        注意，跟复合类似，结合我们之前的固有经验：</p><script type="math/tex; mode=display">\frac{dz}{dt}=\frac{\partial z}{\partial u}\cdot\frac{du}{dt}+\frac{\partial z}{\partial v}\cdot\frac{dv}{dt}</script><p>​        </p><p><img src="image-20230209185128299.png" alt="image-20230209185128299"></p><p>​        情况2：$z=f(u,v),u=\phi(x,y),v=\varphi(x,y)$求导</p><script type="math/tex; mode=display">\frac{dz}{\partial x}=\frac{\partial z}{\partial u}\cdot\frac{du}{dx}+\frac{\partial z}{\partial v}\cdot\frac{dv}{dx}\\\frac{\partial z}{\partial y}=\frac{\partial z}{\partial u}\cdot\frac{du}{dx}+\frac{\partial z}{\partial v}\cdot\frac{dv}{dy}</script><p><img src="image-20230209185348990.png" alt="image-20230209185348990"></p><p>​        情况3：$z=f(u,v,w),u=\phi(x,y),v=\varphi(x,y),w=\omega(x,y)$</p><script type="math/tex; mode=display">\frac{dz}{\partial x}=\frac{\partial z}{\partial u}\cdot\frac{du}{dx}+\frac{\partial z}{\partial v}\cdot\frac{dv}{dx}+\frac{\partial z}{\partial w}\cdot\frac{dw}{dx}\\\frac{\partial z}{\partial y}=\frac{\partial z}{\partial u}\cdot\frac{du}{dx}+\frac{\partial z}{\partial v}\cdot\frac{dv}{dy}+\frac{\partial z}{\partial w}\cdot\frac{dw}{dy}</script><p><img src="image-20230209185641030.png" alt="image-20230209185641030"></p><p>​        情况4：$z=f(u,x,y),u=\varphi(x,y)$</p><script type="math/tex; mode=display">\frac{\partial z}{\partial x}=\frac{\partial z}{\partial u}\cdot\frac{\partial u}{\partial x}+\frac{\partial f}{\partial x}\\\frac{\partial z}{\partial y}=\frac{\partial z}{\partial u}\cdot\frac{\partial u}{\partial y}+\frac{\partial f}{\partial y}</script><p><img src="image-20230209185926111.png" alt="image-20230209185926111"></p><p>​        例子：$z=e^u \sin v , u=xy , v=x+y$</p><p>$解: \frac{\partial z}{\partial x}=e^u\cdot \sin v\cdot y+e^u\cos v=e^{xy}\sin(x+y)y+e^{xy}\cos(x+y)\\<br>\frac{\partial z}{\partial x}=e^u\cdot \sin v\cdot x+e^u\cos v=e^{xy}\sin(x+y)x+e^{xy}\cos(x+y)$</p><h3 id="隐函数的求导公式"><a href="#隐函数的求导公式" class="headerlink" title="隐函数的求导公式"></a>隐函数的求导公式</h3><p>​        对于$F(x,y)=0$这个方程：</p><script type="math/tex; mode=display">当:F(x_0,y_0)=0,F_y'(x_0,y_0)\neq 0 \\\frac{dy}{dx}=-\frac{F_x'}{F_y'}</script><p>​        对于 $F(x,y,z)=0,F’_z(x_0,y_0,z_0)\neq 0$</p><script type="math/tex; mode=display">\frac{\partial z}{\partial x}=-\frac{F_x'}{F'_z}\\\frac{\partial z}{\partial y}=-\frac{F_y'}{F'_z}</script><p>​        对于方程组的情况</p><script type="math/tex; mode=display">\begin{equation}\left\{\begin{aligned}F(x,y,u,v)& = & 0 \\G(x,y,u,v)& = & 0 \\\end{aligned}\right.\end{equation}</script><p>​            稍微复杂一点：</p><p>​        定义Jacobi行列式：</p><script type="math/tex; mode=display">J=\frac{\partial(F,G)}{\partial(u,v)}=\left | \begin{matrix}\frac{\partial F}{\partial u}  \frac{\partial F}{\partial v} \\ \frac{\partial G}{\partial u}\frac{\partial G}{\partial v}\end{matrix} \right |</script><script type="math/tex; mode=display">\frac{\partial u}{\partial x}=-\frac{1}{J}\frac{\partial(F,G)}{\partial(x,v)}=-\frac{\left | \begin{matrix}\frac{\partial F}{\partial x}  \frac{\partial F}{\partial v} \\ \frac{\partial G}{\partial x}\frac{\partial G}{\partial v}\end{matrix} \right |}{\left | \begin{matrix}\frac{\partial F}{\partial u}  \frac{\partial F}{\partial v} \\ \frac{\partial G}{\partial u}\frac{\partial G}{\partial v}\end{matrix} \right |}</script><p>​        其他类比</p><p>​        由线性代数里的克莱默法则推出。但是太难背了！我们可以直接对方程求导，然后解方程组就好了</p><p><img src="image-20230209195732899.png" alt="image-20230209195732899"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Math Works </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言常用函数（1）string.h系列</title>
      <link href="/2023/02/09/C%E8%AF%AD%E8%A8%80%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%EF%BC%881%EF%BC%89string-h%E7%B3%BB%E5%88%97/"/>
      <url>/2023/02/09/C%E8%AF%AD%E8%A8%80%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%EF%BC%881%EF%BC%89string-h%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="string-h常用API-一览"><a href="#string-h常用API-一览" class="headerlink" title="string.h常用API 一览"></a>string.h常用API 一览</h1><h2 id="string-h"><a href="#string-h" class="headerlink" title="string.h"></a>string.h</h2><p>​    </p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;string.h&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        这个东西，我想学习过C语言的都不陌生。这里我们拿出来一些常见的，有用的函数来仔细讲讲，仔细学学！</p><h3 id="strcpy-amp-amp-strcat"><a href="#strcpy-amp-amp-strcat" class="headerlink" title="strcpy&amp;&amp;strcat"></a>strcpy&amp;&amp;strcat</h3><p>​        我们首先来看看strcpy: 他就是 string copy的简写 而strcat可以看作string concatenates的缩写：这里先放一下官方对这两个函数的解释（水字数（划））</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;****strcat.c - contains strcat() and strcpy()**       Copyright (c) Microsoft Corporation. All rights reserved.**Purpose:*       Strcpy() copies one string onto another.&#x2F;&#x2F;拷贝字符串**       Strcat() concatenates (appends) a copy of the source string to the*       end of the destination string, returning the destination string.&#x2F;&#x2F;追加字符串********************************************************************************&#x2F;#include &lt;string.h&gt;&#x2F;&#x2F; 引入定义的头文件&#x2F;&#x2F;无需理睬这里#ifndef _MBSCAT    #pragma function(strcat, strcpy)#endif&#x2F;&#x2F;&#x2F;****char *strcat(dst, src) - concatenate (append) one string to another**Purpose:*       Concatenates src onto the end of dest.  Assumes enough*       space in dest.&#x2F;&#x2F;这个 Assumptions相当有趣，它忽视了字符串可能发生上溢的风险*&#x2F;&#x2F;转而交给专门检查这个并抛出相关错误的函数来干*Entry:*       char *dst - string to which &quot;src&quot; is to be appended*       const char *src - string to be appended to the end of &quot;dst&quot;**Exit:*       The address of &quot;dst&quot; &#x2F;&#x2F;返回被追加字符串的首地址，便于我们访问**Exceptions:********************************************************************************&#x2F;char * __cdecl strcat (        char * dst, &#x2F;&#x2F; 目标要被写入，就必须不加 const，否则会报错        const char * src &#x2F;&#x2F; 源头不能改，加 const        )&#123;    &#x2F;&#x2F; 先取到首地址，防止改动 dst 导致被追加字符串无法访问        char * cp &#x3D; dst;        while( *cp )                cp++;                   &#x2F;* find end of dst *&#x2F;        while((*cp++ &#x3D; *src++) !&#x3D; &#39;\0&#39;) ;       &#x2F;* Copy src to end of dst *&#x2F;        return( dst );                  &#x2F;* return dst *&#x2F;&#125;&#x2F;****char *strcpy(dst, src) - copy one string over another**Purpose:*       Copies the string src into the spot specified by*       dest; assumes enough room.**Entry:*       char * dst - string over which &quot;src&quot; is to be copied*       const char * src - string to be copied over &quot;dst&quot;**Exit:*       The address of &quot;dst&quot;**Exceptions:*******************************************************************************&#x2F;char * __cdecl strcpy(char * dst, const char * src)&#123;        char * cp &#x3D; dst;        while((*cp++ &#x3D; *src++) !&#x3D; &#39;\0&#39;)                ;               &#x2F;* Copy src over dst *&#x2F;        return( dst );&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        水完了，但是仔细看看，却发现信息量很大！我们首先从 直接拷贝 说起：</p><h4 id="strcpy-直接拷贝"><a href="#strcpy-直接拷贝" class="headerlink" title="strcpy 直接拷贝"></a>strcpy 直接拷贝</h4><p>​        strcpy函数是一个直接从资源（拷贝）字符串中拿取信息扔到另一个字符串里，从实现上我们一眼看出了这个函数<strong>会覆盖目的地字符串的信息</strong>! </p><p>​        问题来了，我们怎样理解这段代码？或者说：当我们也要自己实现一个搬运信息的函数的时候，怎样实现一个跟库里一样简洁的函数呢？</p><p>​        首先，我们的思路就是：</p><p>​        1）确定函数的参数列表，返回类型！ <strong>参数根据问题来看：从哪里拷贝？拷贝到哪里？</strong> 返回类型？好像一眨眼看，不需要返回什么（因为我们可以拿起目的地字符串指针），于是：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void myStrCpy(char* dest , char* src)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        接下来，就是拷贝工作了！为了访问数据， 在C语言中 ，除了使用下标访问，我们还可以使用指针 ：定义两个指针出来，开始拷贝！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">char* p_Dest &#x3D; dest ; &#x2F;&#x2F;我们当然可以这么做！数组名表示首元素地址！char* p_Src &#x3D; src ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        然后呢？我们开始拷贝：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">*p_Dest &#x3D; *p_Src ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        不对啊！拷贝完第一个，咱们还要拷贝下一个啊！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">p_Dest++;p_Src++ ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        然后重复工作！很明了了，我们使用while循环</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">while( &#x2F;* Still Unknown *&#x2F;)&#123;    *p_Dest &#x3D; *p_Src ; &#x2F;&#x2F;拷贝    p_Dest++; &#x2F;&#x2F;移动指针p_Src++ ; &#x2F;&#x2F;移动指针&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        怎么停下来？好说！ source拷完了停下来嘛！怎么看 source 拷没拷完？字符串终结的标志，是<code>\0</code> 那就简单了： Src指针走向 \0的时候，我就让 while 循环停下来嘛！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">while (p_Src !&#x3D; &#39;\0&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20230209163006541.png" alt="image-20230209163006541"></p><p>​        如上图所示，拷贝完，就移动指针到下一个！周而复始直到 lol拷贝完毕 p_Src 指向 ‘\0’结束拷贝！</p><p>​        就这样完事了？看看打印出来了什么东西？</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void myStrCpy(char* dest , char* src)&#123;    char* p_Dest &#x3D; dest ; &#x2F;&#x2F;我们当然可以这么做！数组名表示首元素地址！char* p_Src &#x3D; src ;    while( p_Src !&#x3D; &#39;\0&#39;)&#123;    *p_Dest &#x3D; *p_Src ; &#x2F;&#x2F;拷贝    p_Dest++; &#x2F;&#x2F;移动指针p_Src++ ; &#x2F;&#x2F;移动指针&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230209163254267.png" alt="image-20230209163254267"></p><p>​        挺符合逻辑，所以，敢这样就拍马屁走人了，那就很遗憾了：</p><p><img src="image-20230209163516376.png" alt="image-20230209163516376"></p><p>​        我们的函数，只要在这个环境下工作，马上就会出问题！你猜猜为什么呢？当然是没有’\0’啦！，因为我们的函数逻辑是遇到’\0’就停，‘\0’没有被拷贝就走了！自然我们的打印函数就要跑遍满内存去找你那\0!</p><p>​        我们手动放上一个斜杠0不就好了嘛？</p><p><img src="image-20230209163936912.png" alt="image-20230209163936912"></p><p>​        加上句话就好了！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">p_Dest &#x3D; &#39;\0&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        但是好啰嗦啊，可以自己看看：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void myStrCpy(char* dest , char* src)&#123;    char* p_Dest &#x3D; dest ; &#x2F;&#x2F;我们当然可以这么做！数组名表示首元素地址！char* p_Src &#x3D; src ;    while( p_Src !&#x3D; &#39;\0&#39;)&#123;    *p_Dest &#x3D; *p_Src ; &#x2F;&#x2F;拷贝    p_Dest++; &#x2F;&#x2F;移动指针p_Src++ ; &#x2F;&#x2F;移动指针&#125;    p_Dest &#x3D; &#39;\0&#39;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        开始化简，写高质量代码！</p><p>​        首先想一件事情： 我们有没有必要，整出来一个char<em> p_Src = src ？<strong>没有必要</strong>！因为我们在这里只是对他访问信息，<em>*不做改动</em></em>！马上，我们有两个点可以改动！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;1 原则1： 不改动的一律使用 const 修饰符提高程序安全&#x2F;&#x2F;2 原则2： 减少声明过多的累赘的变量！void myStrCpy(char* dest , const char* src) &#x2F;&#x2F; 1. Change 1&#123;     char* p_Dest &#x3D; dest ; &#x2F;&#x2F;我们当然可以这么做！数组名表示首元素地址！    while( *src !&#x3D; &#39;\0&#39;)&#123;    *p_Dest &#x3D; *p_Src ; &#x2F;&#x2F;拷贝    p_Dest++; &#x2F;&#x2F;移动指针&#125;    p_Dest &#x3D; &#39;\0&#39;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        同时，我们希望可以让程序有更好的扩展性，我们可以修改返回类型，使之可以产生链式编程的效果（在C++中重载 + 等运算符尤为常见的思想），就是返回本身：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">char* myStrCpy(char* dest , const char* src) &#x2F;&#x2F; 1. Change 1&#123;     char* p_Dest &#x3D; dest ; &#x2F;&#x2F;我们当然可以这么做！数组名表示首元素地址！    while( *src !&#x3D; &#39;\0&#39;)&#123;    *p_Dest &#x3D; *p_Src ; &#x2F;&#x2F;拷贝    p_Dest++; &#x2F;&#x2F;移动指针&#125;    p_Dest &#x3D; &#39;\0&#39;;    return dest ; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        到这里，作为一个良好的编程人已经可以高喊下班了，但是再看看 ，可不可以偷懒，让程序再简洁一些呢？当然可以！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">1.    while循环里使之终止的值为 零，包括：(int)0,&#39;\0&#39;,false , NULL((void*)0)2.表达式产出的结果可以直接放进while循环里做判断，基于此，我们可以化简程序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">char* myStrCpy(char* dest , const char* src)&#123;        char* p_Dest &#x3D; dest;        while(        (            *src++ &#x3D; *p_Dest++ &#x2F;&#x2F;各自赋值，然后指针移动        )         !&#x3D; &#39;\0&#39; &#x2F;&#x2F; 产生的值，就是赋予的东西跟 \0 比较，如果是我们就暂停         )        ; &#x2F;&#x2F; just copy    return dest ;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        现在我们的实现就跟库完全一致了！</p><h4 id="strcat-追加字符串"><a href="#strcat-追加字符串" class="headerlink" title="strcat 追加字符串"></a>strcat 追加字符串</h4><p>​        不同于直接拷贝，咱们这个是追加上去的，什么是追加？就是在屁股后面直接跟上字符串：比如说： str 追加一个 str——<code>&gt;</code> strstr 。我们已经讲过了最为基础的拷贝，具体有关拷贝和移动细节，不在过多的讲了。原型一样的：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">char* myStrCat(char* dest ,const char* src)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        思路是简单的，追加分成 1）追 2）加 两个部分！</p><p>​        先追：到目标地点字符串的最后面：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">char* p_Dest &#x3D; dest ;while( *p_Dest ) &#x2F;&#x2F;while循环里使之终止的值为 零，包括：(int)0,&#39;\0&#39;,false , NULL    p_Dest ++ ;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        再拷贝：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">while((            *src++ &#x3D; *p_Dest++ &#x2F;&#x2F;各自赋值，然后指针移动        )         !&#x3D; &#39;\0&#39; &#x2F;&#x2F; 产生的值，就是赋予的东西跟 \0 比较，如果是我们就暂停      )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        再返回：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">return dest;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        就是多了一个追加的过程！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">char* myStrCat(char* dest ,const char* src)&#123;    char* p_Dest &#x3D; dest ;    while( *p_Dest ) &#x2F;&#x2F;while循环里使之终止的值为 零，包括：(int)0,&#39;\0&#39;,false , NULL   p_Dest ++ ;        while((            *src++ &#x3D; *p_Dest++ &#x2F;&#x2F;各自赋值，然后指针移动         )          !&#x3D; &#39;\0&#39; &#x2F;&#x2F; 产生的值，就是赋予的东西跟 \0 比较，如果是我们就暂停      )      return dest;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="strcmp比较函数"><a href="#strcmp比较函数" class="headerlink" title="strcmp比较函数"></a>strcmp比较函数</h3><p>​        这个有意思，我们拿他来比较两个字符串 ， 在经典Windows ，Linux文件索引排序的时候，都是使用这样的strcmp决定谁先谁后，注意的是，我们比较的，是ASCII码值的大小，这跟char的特性密切相关（ASCII规定使用一字节二进制数表示一个字符）。Anyway , 看看C库开发者怎么说</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;****strcmp.c - routine to compare two strings (for equal, less, or greater)**       Copyright (c) Microsoft Corporation. All rights reserved.**Purpose:*       Compares two string, determining their ordinal order.********************************************************************************&#x2F;#include &lt;string.h&gt;#pragma function(strcmp)&#x2F;****strcmp - compare two strings, returning less than, equal to, or greater than**Purpose:*       STRCMP compares two strings and returns an integer*       to indicate whether the first is less than the second, the two are*       equal, or whether the first is greater than the second.**       Comparison is done byte by byte on an UNSIGNED basis, which is to*       say that Null (0) is less than any other character (1-255).**Entry:*       const char * src - string for left-hand side of comparison*       const char * dst - string for right-hand side of comparison**Exit:*       returns -1 if src &lt;  dst*       returns  0 if src &#x3D;&#x3D; dst*       returns +1 if src &gt;  dst**Exceptions:********************************************************************************&#x2F;int __cdecl strcmp (        const char * src,        const char * dst        )&#123;        int ret &#x3D; 0 ;        while((ret &#x3D; *(unsigned char *)src - *(unsigned char *)dst) &#x3D;&#x3D; 0 &amp;&amp; *dst)                &#123;                ++src, ++dst;                &#125;&#x2F;&#x2F; what is fxxking this ???        return ((-ret) &lt; 0) - (ret &lt; 0); &#x2F;&#x2F; (if positive) - (if negative) generates branchless code&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        我打赌你肯定看不懂了哈哈，没关系。我们先来理解原理！</p><p>​        上面我强调，我们比的，是一个字符一个字符的ASCII值。如果两个字符的ASCII值不一样，说明一个问题：这两个字符串不一样！那就好说了！如果两个字符串长度不一样，我们直接就认为两个字符串不相等（触犯了<em>str1 == </em>str2,因为‘\0’一定不等于另一个未完结字符串的内容）</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">while( *str1 &#x3D;&#x3D; *str2 &amp;&amp; &#x2F;* Must have other conditions...*&#x2F;)&#123;    str1++;    str2++;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        当然。。。截至判断必须要有：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">while( *str1 &#x3D;&#x3D; *str2 &amp;&amp; *str1 !&#x3D; &#39;\0&#39; &amp;&amp; *str2 !&#x3D; &#39;\0&#39;)&#123;    str1++;    str2++;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        返回什么？其实，标准库有两种返回！我们先来看第一种：</p><pre class="line-numbers language-none"><code class="language-none">ASCII小的返回-1 ， ASCII 完全一致的返回 0 ，大的返回 1！<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        那简单！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if( *str1 &lt; *str2) return -1;else if( *str1 &#x3D;&#x3D; *str2 )     return 0;else      return 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        不错，还有一种直接返回他们的差</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">return *str1 - *str2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        能不能骚一点？咱们的 <code>if-else if - else</code>写的太捞了！让我们一行代码搞定？可以！</p><p>​        首先来看一件事！这个差是怎样的，可以跟 0 比较！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int ret &#x3D; *str1 - *str2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        如果：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">ret &lt; 0 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        这个式子返回1，反之如果不成立，就返回0！</p><p>​        现在，我们这样来看！ ret要不小于0，要不大于0 要不等于0  -ret更是如此：如果我们的表达式产出的布尔值，无非就是这样的：</p><div class="table-container"><table><thead><tr><th>ret</th><th>&gt;0</th><th>=0</th><th>&lt;0</th></tr></thead><tbody><tr><td>-ret&lt;0</td><td>1</td><td>0</td><td>0</td></tr><tr><td>ret&lt;0</td><td>0</td><td>0</td><td>1</td></tr><tr><td></td><td></td><td></td></tr></tbody></table></div><p>​        很好！现在我们来看，如果把这两行的值相减！不久达到了我们的目的吗！</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">-</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        再把<code>int ret = *str1 - *str2</code>带入</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">return (-(*str1 - *str2) &lt; 0)- ((*str1 - *str2) &lt; 0);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        完事！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int myStrCmp(const char* str1, const char* str2) &#123;    while (*str1 !&#x3D; &#39;\0&#39; &amp;&amp; *str2 !&#x3D; &#39;\0&#39;&amp;&amp;*str1&#x3D;&#x3D;*str2) &#123;        str1++;        str2++;    &#125;    return (-(*str1 - *str2) &lt; 0)- ((*str1 - *str2) &lt; 0);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="memory-h"><a href="#memory-h" class="headerlink" title="memory.h"></a>memory.h</h3><p>注意，在这里我不打算放出源码，作为C语言里几乎可以说是最底层的头文件，不打算让你去看大量的汇编代码，那没意思！但是，我们可以了解一些常用的API</p><h4 id="memcpy"><a href="#memcpy" class="headerlink" title="memcpy"></a>memcpy</h4><p>​        memory copy的简写！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void* memcpy(void *dest, const void *src, size_t n) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        参数？作为直接操作内存块的函数，我们的接受类型必须是<code>void*</code>!同时，看const修饰的位置我们也知道，dest是写入内存的地方，另一个是资源区块!</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;this is a example shows that memcpy can copy things whatever it is!int main()&#123;    &#x2F;&#x2F;可以拷贝内置数据类型    int src1 &#x3D; 10;int* dest1 &#x3D; (int*)malloc(4);if (dest1 &#x3D;&#x3D; NULL) &#123;return;&#125;memcpy(dest1, &amp;src1, 4);printf(&quot;%d &quot;, *dest1);        &#x2F;&#x2F;可以拷贝自定义的内容typedef struct student_ &#123;int age;char* name;&#125;student;student s1;s1.age &#x3D; 18;s1.name &#x3D; &quot;charliechen&quot;;student* s_copy &#x3D; (student*)malloc(sizeof(student));memcpy(s_copy, &amp;s1, sizeof(student));printf(&quot;%d %s&quot;, s_copy-&gt;age, s_copy-&gt;name);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230209181211552.png" alt="image-20230209181211552"></p><h4 id="memmove"><a href="#memmove" class="headerlink" title="memmove"></a>memmove</h4><p>​        这个函数解决了资源与拷贝区重叠的问题：</p><p>​        对于memmove，即使内容有重叠，src的内容也可以正确地被拷贝到了dest指向的空间。</p><p><img src="1.png" alt="1"></p><p>​                                                                    内存重叠的拷贝</p><p>​        这种情况下，src的地址小于dest的地址，拷贝前3个字节没问题，但是拷贝第4，5个字节时，原有的内容已经被src拷贝过来的字符覆盖了，所以已经丢失原来src的内容，这很明显就是问题所在。所以，对于正常情况下，优先使用memmove防止出现未定义行为，其他的跟memcpy完全一致！</p>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C extension Learning （1） 位运算符，逻辑运算符和简单应用</title>
      <link href="/2023/02/09/C-extension-Learning-%EF%BC%881%EF%BC%89-%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%8C%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/"/>
      <url>/2023/02/09/C-extension-Learning-%EF%BC%881%EF%BC%89-%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%EF%BC%8C%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E7%AE%80%E5%8D%95%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言扩展1："><a href="#C语言扩展1：" class="headerlink" title="C语言扩展1："></a>C语言扩展1：</h1><h2 id="位运算符与逻辑运算符"><a href="#位运算符与逻辑运算符" class="headerlink" title="位运算符与逻辑运算符"></a>位运算符与逻辑运算符</h2><h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><h4 id="前导"><a href="#前导" class="headerlink" title="前导"></a>前导</h4><p>​        C语言中的位运算符有下面几个：</p><p>1）与 ： &amp;;</p><p>2）或：|；</p><p>3）异或： ^;</p><p>4）取反 ：~;</p><p>5）左移 :&lt;&lt; ;</p><p>6）右移： &gt;&gt; ;</p><p>​        范例：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;int main()&#123;    int a &#x3D; 0b1001; &#x2F;&#x2F; 二进制写法：十进制下是：9    int b &#x3D; 0b0011; &#x2F;&#x2F; 二进制写法：十进制下是：3    int and_res &#x3D; a &amp; b; &#x2F;&#x2F;与    int or_res &#x3D; a | b; &#x2F;&#x2F;或    int xor_res &#x3D; a^b; &#x2F;&#x2F;异或    int opp_res_a &#x3D; ~a; &#x2F;&#x2F;取反    int leftMoveRes &#x3D; a &lt;&lt; 1; &#x2F;&#x2F; 左移一位 得到的结果应当是 0b10010 (18)    int rightMovRes &#x3D; a &gt;&gt; 1; &#x2F;&#x2F; 右移一位 得到的结果应当是 0b00100 (4)  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        注意：这样的一些运算符只能用在整数上：比如说带符号或无符号的char,short,int与long类型上！不可以用在比如说浮点型和其他类型上：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int a &#x3D; 0b0011 &amp; 0b1100; &#x2F;&#x2F; Legaldouble d &#x3D; 10 ;double e &#x3D; d &amp; 0b1100 ; &#x2F;&#x2F; Sadly illegal <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="image-20230209120334081.png" alt="Clion下的报错"></p><p>​        再引入具体概念之前，请先让我们来看一个函数：</p><h3 id="Itoa函数"><a href="#Itoa函数" class="headerlink" title="Itoa函数"></a>Itoa函数</h3><p>​        我们知道，在C语言里，在 printf 中，只可打印八进制位( %o )，十进制位（ %d ）,和十六进制位（ %x ）。想要打印 二进制位 ，我们可以自己手搓一个，但是那没必要！我们可以导入库里的函数 itoa 函数 ： 他需要一个 char 的数组来存放结果 ：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;#include&lt;stdlib.h&gt;int main()&#123;    char result[100] &#x3D; &#123;0&#125;;    int d &#x3D; 10;    itoa(d , result , 2);&#x2F;&#x2F; itoa 函数参数列表：待转化数 ， 字符数组 ， 进制     printf(&quot;%s&quot;,result);&#x2F;&#x2F; 1010&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>     这样我们就很方便的查看结果了！</code></pre><h3 id="运算符详解"><a href="#运算符详解" class="headerlink" title="运算符详解"></a>运算符详解</h3><p>​        我们回想一下计算机科学里对按位与运算 &amp;，按位或运算 |，按位异或运算 ^，按位非（取反） ~，左移 &lt;&lt;，右移 &gt;&gt;里的概念。他们分别是：</p><h4 id="按位与运算-amp"><a href="#按位与运算-amp" class="headerlink" title="按位与运算 &amp;"></a>按位与运算 &amp;</h4><p>​        如果两个相应的二进制位都为1，则该位的结果值为1，否则为0。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">char result[40] &#x3D; &#123;0&#125;;int n1 , n2 ;n1 &#x3D; 0b0000; n2 &#x3D; 0b0001 ; &#x2F;&#x2F; 0000 &amp; 0001 -&gt; 0000itoa(n1 &amp; n2 , result , 2);printf(&quot;%s &quot;, result);n1 &#x3D; 0b0001; &#x2F;&#x2F; 0001 &amp; 0001 -&gt; 0001itoa(n1 &amp; n2 , result , 2);printf(&quot;%s &quot;, result);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230209133854965.png" alt="image-20230209133854965"></p><h4 id="按位或运算"><a href="#按位或运算" class="headerlink" title="按位或运算 |"></a>按位或运算 |</h4><p>如果两个相应的二进制位中只要有一个1，则该位的结果值为1，否则为0。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">char result[40] &#x3D; &#123;0&#125;;int n1 , n2 ;n1 &#x3D; 0b0000; n2 &#x3D; 0b0001 ; &#x2F;&#x2F; 0000 | 0001 -&gt; 0001itoa(n1 | n2 , result , 2);printf(&quot;%s &quot;, result);n2 &#x3D; 0b0000; &#x2F;&#x2F; 0000 | 0000 -&gt; 0001itoa(n1 | n2 , result , 2);printf(&quot;%s &quot;, result);n1 &#x3D; 0b0001;n2 &#x3D; 0b0001;itoa(n1 | n2 , result , 2);printf(&quot;%s &quot;, result);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230209134207600.png" alt="image-20230209134207600"></p><h4 id="按位异或运算"><a href="#按位异或运算" class="headerlink" title="按位异或运算 ^"></a>按位异或运算 ^</h4><p>如果两个相应的二进制位相同，则该位的结果值为0，否则为1。（但是最高位之外的0）</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">char result[40] &#x3D; &#123;0&#125;;int n1 , n2 ;int n1 &#x3D; 0b001100 , n2 &#x3D; 0b001111; &#x2F;&#x2F; 0b000011itoa(n1 ^ n2 , result , 10);printf(&quot;%s &quot;, result);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230209134501422.png" alt="image-20230209134501422"></p><h4 id="按位非（取反）"><a href="#按位非（取反）" class="headerlink" title="按位非（取反） ~"></a>按位非（取反） ~</h4><p><strong>~</strong> 是一元运算符，用来对二进制数按位取反，即将0变1，将1变0。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">char result[40] &#x3D; &#123;0&#125; ;int n1 &#x3D; 0b00001;&#x2F;&#x2F; 1111111111111111111...1110 int n2 &#x3D; ~n1;itoa(n2 , result , 2);printf(&quot;%s &quot;, result);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230209135537488.png" alt="image-20230209135537488"></p><h4 id="左移-lt-lt"><a href="#左移-lt-lt" class="headerlink" title="左移 &lt;&lt;"></a>左移 &lt;&lt;</h4><p>将一个数的各二进制位全部左移N位，右补0，即将一个数乘2^n;说白了</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">char result[40] &#x3D; &#123;0&#125; ;int n1 , n2 ;n1 &#x3D; 0b0001 ;n2 &#x3D; n1 &lt;&lt; 1 ; &#x2F;&#x2F; 左移 1 位itoa(n2,result,2);printf(&quot;%s &quot;,result);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230209140613467.png" alt="image-20230209140613467"></p><h4 id="右移-gt-gt"><a href="#右移-gt-gt" class="headerlink" title="右移 &gt;&gt;"></a>右移 &gt;&gt;</h4><p>将一个数的各二进制位全部右移N位，移到右端的低位被舍弃，即将一个整数型除2^n;</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">char result[40] &#x3D; &#123;0&#125; ;int n1 , n2 ;n1 &#x3D; 0b0010 ;n2 &#x3D; n1 &gt;&gt; 1; &#x2F;&#x2F; 右移 1 位itoa(n2,result,2);printf(&quot;%s &quot;,result);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230209140838447.png" alt="image-20230209140838447"></p><p>注意：<strong>位运算符的操作数必须是整数类型，并且遵循寻常算术转换！寻常算术转换</strong>：如果 <strong>某个操作符</strong> 的各个操作数属于 <strong>不同的类型</strong> ，那么除非其中一个操作数 <strong>转换</strong> 为另一个操作数的类型，否则操作就无法进行。下面的层次体系称为 <strong>寻常算术转换</strong>。</p><p><img src="93e0b9f7c5054bfea4d8523fe1e58a22.jpeg" alt="img"></p><p>如果某个操作数的类型在上面这个列表中 <strong>排名较低</strong>，那么首先要转换为 <strong>另外一个操作数</strong> 的类型后 <strong>执行运算</strong>。</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>​        三种运算符： 逻辑与:  &amp;&amp; 逻辑或 ： ||  逻辑非： ！</p><p>​        <code>&amp;&amp;</code>表示“与”的意思，需要两端的表达式的值都为true，该式的值才为true。<br>​        <code>||</code>表示“或”的意思，两端的表达式的值只要有一端为true，该式的值就为true。<br>​        <code>!</code>表示“非”的意思，将该式的真值换成相反的真值，即false和true互换。</p><p>​        <strong>使用&amp;&amp;时，如果左边false则右边不会执行，使用||时，如果左边true则右边不会执行</strong></p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int main()&#123;    int a &#x3D; 0;    a &amp;&amp; a++; &#x2F;&#x2F; a为0 ，是假，那就 a++不执行    printf(&quot;%d &quot;, a);&#x2F;&#x2F;所以 a 还是 0！&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        <img src="image-20230209142259608.png" alt="image-20230209142259608"></p><p>​        例子1 ：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; this is a test code of logical and , or as well as notint main()&#123;    int a &#x3D; -1, b &#x3D; 0 ;    if( a++ &amp;&amp; b++)&#123;        printf(&quot;%d %d&quot;,b , a);    &#125;    if( ++b &amp;&amp; ++a)&#123;         printf(&quot;%d %d&quot;, a , b);    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        先定义变量<code>a=-1，b=0</code>，然后进入第一个<code>if()</code>判断，<code>&amp;&amp;</code>左边的值是<code>-1</code>，右边的值为<code>0</code>，所以此<code>if()</code>下的语句不执行。（<code>++</code>在后，先执行后<code>++</code>）</p><p>​        但是由于<code>&amp;&amp;</code>左侧为true，所以<code>&amp;&amp;</code>右侧的b++也会得到执行，此行结束时，a的值为0，b的值为1。第二次if()，左边的值为2，右边的值为1，所以<code>if()</code>下的语句得到执行，输出a的值1，b的值2。</p><p>​        例题2：请在不允许使用 乘除法，if, for ,else while等条件判断与循环语句下计算</p><script type="math/tex; mode=display">1+2+3+4+...+n</script><p>的值（选自 Leetcode）(数据在 1 $\leq$ n $\leq$ 10000下)</p><p>​        显然，我们只可以使用递归来解决我们的问题（递归策略是值将一个大问题逐步转化成同性质但是规模更小的小问题上）。问题来了，递归需要出口，我们有什么办法让递归停止呢？请看C99下逻辑运算符的特性：</p><p>​        我们只需要设计程序：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int returnSum(int n)&#123;int flag &#x3D; n &amp;&amp; (n+returnSum(n-1)); &#x2F;&#x2F;  其实 flag没什么用，这里是为了程序的可读性    return n;&#125;&#x2F;&#x2F;testint main()&#123;    int n &#x3D; 0;    while(~scanf(&quot;%d&quot;,&amp;n))        &#x2F;&#x2F;PS ：因为 scanf读取结束或者遇到错误(读到EOF)可以返回EOF：-1，取反就是0        printf(&quot;%d\n&quot;,returnSum(n));&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言数据结构模拟（1）：动态数组API详解</title>
      <link href="/2023/02/07/C%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A8%A1%E6%8B%9F%EF%BC%881%EF%BC%89%EF%BC%9A%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84API%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/02/07/C%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A8%A1%E6%8B%9F%EF%BC%881%EF%BC%89%EF%BC%9A%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84API%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="动态数组——API思路详解"><a href="#动态数组——API思路详解" class="headerlink" title="动态数组——API思路详解"></a>动态数组——API思路详解</h1><p>​        写在前面：这里是动态数组API简介：版本是v1.0.0!这篇API博客我写了4个小时，匆匆忙忙。但却是我第一个过一万字的博客！</p><p>​        我第一次手搓大型的小项目，也是我第一次单个程序突破1000行！这个前言就算小小的纪念一下这个成就吧！</p><p>​        鄙人编程年龄仅仅就7个月，还是一枚小白，这个项目里面肯定还有许多不足！如果你对它感兴趣！可以到我的GitHub上下载，测试！如果发现了Bug，麻烦及时反馈给我！（如果还有解决方案我会直接磕头叫声Daddy（逃））</p><p>​                                                                                                                                                                                        —-2023/2.7/21：47</p><h3 id="动态数组入门"><a href="#动态数组入门" class="headerlink" title="动态数组入门"></a>动态数组入门</h3><p>​        首先，作为入门级别的数据结构，我们毫无疑问的：这个数据结构必须满足增删查改！其中，增加就必须要有一个一个增加的，还有直接加入一大群的，删除也是如此。此外，这个数组可以查询是否有目标元素存在，这就需要我们也写一些相关的函数来支持我们的操作！就是这些，我们还可以为了使我们的打印更加清晰，（有点难过的是：C语言必须多增加一个参数来存放它，使得看起来相当的拥挤），可以自定义打印方式。事实上，这就是我们C++里面的vector容器（我就是想要复刻API哈哈哈）</p><p>​        我们的数据结构首先已经被框死：他是一个数组，存储的是相同类型的元素：要不全是整形，要不全是字符，要不全是指针，要么就是同一个类型的结构体！于是，我们不妨这样设想：他必须还是数组，那就说明内存的物理结构还是连续的，但是又要不停的扩展或者伸缩！那就把我们的数组（严肃的讲是静态数组）做一些改动，使之可以自由扩展不就好了嘛？这就需要我们使用头文件,来引入malloc函数群就好了</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;&#x2F;&#x2F;IO流交互#include&lt;stdlib.h&gt;&#x2F;&#x2F;标准库：里面有我们想要的函数#include&lt;string.h&gt;&#x2F;&#x2F;memory函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>基于上面的思路，我们很快就搓出来一个这个玩意：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">int main()&#123;void* data &#x3D; NULL;    int current_size&#x3D;0;    &#x2F;&#x2F;...Do something and the size need to increase        data&#x3D;realloc(data,current_size+1);    current_size++;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        不错，这就是我们动态数组的雏形了！不过，这样散架着太捞了，后续也不好维护与处理。那很简单了：结构体用起来嘛！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct _DynamicArray_ &#123;&#x2F;&#x2F;_HHH_是为了后续智能提示不会产生冲突void* DataPiece; &#x2F;&#x2F;连续内存块size_t current_size; &#x2F;&#x2F;当前的大小如何！不过，使用size_t其实更是说明我们的程序变量是非负的而已！&#125;DynamicArray;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        好像也不太好，我们后续要知道，访问起来是void*！这个特殊的指针不能帮我们锁定目标，是一个未确定类型的指针，所以。。。我们不妨加上一个常量，在数据首次入动态数组的时候直接将这样的值初始化！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct _DynamicArray_ &#123;&#x2F;&#x2F;_HHH_是为了后续智能提示不会产生冲突void* DataPiece; &#x2F;&#x2F;连续内存块size_t current_size; &#x2F;&#x2F;当前的大小如何！不过，使用size_t其实更是说明我们的程序变量是非负的而已！size_t total_usable_size;&#x2F;&#x2F;用来调整数组的大小，同时又允许我们在一定范围内自由插入size_t Single_Data_size;&#x2F;&#x2F;相当于类型名了，这个数据在我们后面十分的重要&#125;DynamicArray;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        这样，我想我们的动态数组就具有了极强的通用性：可以像一般的数组那样存储任何数据！</p><h3 id="工厂函数与基本调整函数系列"><a href="#工厂函数与基本调整函数系列" class="headerlink" title="工厂函数与基本调整函数系列"></a>工厂函数与基本调整函数系列</h3><p>​        什么是工厂函数？就是产生对象并且返回它供我们程序员使用的函数，比如说，C语言的malloc函数就是一个代表性的工厂函数。他返回一个任意大小的堆空间：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">(void*)malloc(bit_malloc)&#x2F;&#x2F;开辟多少字节自己制定，是一个操作性很强的函数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        我们的函数就必须使用它来开辟我们的内存：但是，直接让用户制定是麻烦的，极易出错的，所以：</p><h4 id="默认工厂函数"><a href="#默认工厂函数" class="headerlink" title="默认工厂函数"></a>默认工厂函数</h4><p>​        我们首先需要一个可以产生一个这样的结构体并且还要返回它的函数，为了初始化这样的结构体，我们需要知道我们要开辟多少个元素，元素多大，否则我们不会开辟。函数的原型可以轻而易举的给出：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">DynamicArray* Init_A_DynamicArray(size_texpected_number, size_tdatasize);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        首先，作为动态数组，灵活性是重要的，用户（也就是咱们），往往压根就不知道我们会有多少个数据入列。于是，我们可能需要自己指定一个默认的大小，一旦我们的数据超过了指标，我们就马上调用一个自己手动写的函数，如你所见，就是这个功能的封装：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;...Do something and the size need to increase        data&#x3D;realloc(data,current_size+1);&#x2F;&#x2F; Adjustment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>来立马调用起来防止指针越界！我们稍后在调整函数里会再次阐述！回到初始化函数Init_A_DynamicArray上来！我们首先初始化一个结构体：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">DynamicArray* pro_usable_space &#x3D; (DynamicArray*)malloc(sizeof(DynamicArray))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        如果屏幕前的你有一定编程经验，马上就会意识到如果仅是止步如此会大错特错！因为我们的malloc函数一旦开辟失败就会返回一个NULL指针，如果我们不对它进行空判断就会闹出程序崩溃的笑话，这里我们看到，一般的教程是直接这么写的：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if(!pro_usable_space)&#123;  return;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        如果只是随意教教，这样写可以；工程开发中如此书写很不负责任！首先，我们的程序不可以直接return！后续我们的操作一旦再次拿起甚至时使用返回出去的NULL指针，马上又会闹起报错的笑话！既然如此，我们做一点报错友善处理！·</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if(pro_usable_space &#x3D;&#x3D; NULL)&#123;  printf(&quot;Sorry! Failed to malloc a new space! Program exits!&quot;);    exit(-1);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​         这样好些了！我们后续开发还会反复用到，何不直接使用宏定义直接节省反复车轮子的工作呢？还是相信智能提示的好！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE printf(&quot;Sorry! Failed to malloc a new space! Program exits!&quot;) &#x2F;&#x2F;宏定义的重要作用之一：代替代码块#define DynamicArray_ERROR_IN_MALLOCING_SPACE 1 &#x2F;&#x2F;编写异常程序可以这样写，使之错误码和错误信息完全对应起来&#x2F;&#x2F;  Do Something ...     if(pro_usable_space &#x3D;&#x3D; NULL) &#123;  SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);   &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​         随后顺手初始化，回到刚刚的问题，我们需要给数据结构一个默认的大小，我们不妨设置成5！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define Dyarr_DEFAULT_MALLOC 5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">pro_usable_space-&gt;DataPiece &#x3D; NULL;&#x2F;&#x2F;赋予空指针，防止成为野指针修改其他内存块pro_usable_space-&gt;Single_Data_size &#x3D; datasize;&#x2F;&#x2F;初始化单位元素大小if (expected_number &gt;&#x3D; Dyarr_DEFAULT_MALLOC)&#x2F;&#x2F;大于默认的就用户指定的那个大小pro_usable_space-&gt;total_usable_size &#x3D; expected_number;elsepro_usable_space-&gt;total_usable_size &#x3D; Dyarr_DEFAULT_MALLOC;&#x2F;&#x2F;顺手处理异常的数字大小pro_usable_space-&gt;current_size &#x3D; 0;&#x2F;&#x2F;当下就没有元素在，赋0！return pro_usable_space;&#x2F;&#x2F;返回产生的堆区开辟的结构体<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        有的时候我们可能需要直接拿起一个静态数组直接转化，很简单，我们可以这样写：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int main()&#123;int arr[10]&#x3D;&#123;1,2,3,4,5,6,7,8,9,10&#125;;    for(int i &#x3D; 0; i &lt; 10; i++)&#123;        &#x2F;&#x2F;插入    &#125;    &#x2F;&#x2F;...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        但这样我们需要反复调用函数，导致程序性能很差，我们为什么不直接提供一个接口，一边创造结构体一边入列呢？</p><h4 id="升级工厂函数"><a href="#升级工厂函数" class="headerlink" title="升级工厂函数"></a>升级工厂函数</h4><p>​        很简单明了，我们的函数的原型是很容易想到的：你这个数组：是什么？（Single_Data_size），有多少个元素？（current_size），在哪里（Datapiece）的问题！我们产生的结构体还是要返回给用户使用的！</p><p>​        所以，我们的参数需要：数组地址（在哪里），数组元素大小（是什么），数组元素个数（有几个）</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">DynamicArray* Updata_A_Static_Array_To_Dynamic_Array(void*data, size_tdatasize,size_tdatanum)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        注意，这个时候要多想！data会不会是空？我们是要看看的！类似的，我们再次构造一个错误码模块：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (!data)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        之后的流程相比就很简单了：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">DynamicArray* pro_usable_space &#x3D; MALLOCDYARR(DynamicArray, 1);if(!pro_usable_space)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;&#x2F;&#x2F;。。。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        Ok，到这里，我们要开始准备初始化了，不同于标准的，默认的工厂函数，我们这里直接就是有数据的！因此，需要直接开始拷贝！</p><p>​        <strong>注意：不建议直接把data的地址交给DataPiece直接托管！！！！！！！！！！！！之后的我们的操作可能会使数据抹除，但是DataPiece还记得，贸然的直接托管会导致非法访问内存！</strong></p><p>​        所以：我们单独为数据准备一块空间：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void* pro_usable_data &#x3D; malloc(datasize * datanum*1.5);&#x2F;&#x2F;预留一些空间if(!pro_usable_data)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        养成随手判断空的好习惯（乐）。</p><p>​        然后，拿出我们的memcpy，这是因为我们的数据可能啥都是，指定一个类型会使得我们的动态数组丧失通用性！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">memcpy(    pro_usable_data,     &#x2F;&#x2F;dst : 我们的预留空间    data,         &#x2F;&#x2F;rsc : 我们的来源：静态数组    datasize * datanum&#x2F;&#x2F;多大？很是显然！个数乘上大小      );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        然后初始化</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">pro_usable_space-&gt;DataPiece         &#x3D; pro_usable_data; &#x2F;&#x2F;将拷贝的空间交给dataPiece托管pro_usable_space-&gt;current_size      &#x3D; datanum;pro_usable_space-&gt;Single_Data_size  &#x3D; datasize;pro_usable_space-&gt;total_usable_size &#x3D; 1.5 * datanum;&#x2F;&#x2F;开辟多大就给多大return pro_usable_space;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="复制工厂函数"><a href="#复制工厂函数" class="headerlink" title="复制工厂函数"></a>复制工厂函数</h4><p>​            我们可以模仿C++ STL里面的复制构造：协同上面的升级函数一样，这里不过多的废话！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">DynamicArray* Init_A_DynamicArray_by_CopyADyarr(DynamicArray*dyarr_copied)&#123;&#x2F;&#x2F;检查来源是否合法    if (!dyarr_copied)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;             &#x2F;&#x2F;准备空间并检查DynamicArray* pro_usable_space &#x3D; MALLOCDYARR(DynamicArray, 1);if (!pro_usable_space)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;    void* pro_usable_data &#x3D; MALLOCDYARR(        char, &#x2F;&#x2F;一个字节单位        (dyarr_copied-&gt;Single_Data_size * dyarr_copied-&gt;current_size)&#x2F;&#x2F;多大？还是一样嘛！    );if(!pro_usable_space)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;    &#x2F;&#x2F;拷贝数据pro_usable_space-&gt;DataPiece &#x3D; pro_usable_data;memcpy(        pro_usable_space-&gt;DataPiece, &#x2F;&#x2F;dst : 我们的预留空间        dyarr_copied-&gt;DataPiece, &#x2F;&#x2F; rsc: 来源：显然是被拷贝的dataPiece        dyarr_copied-&gt;Single_Data_size * dyarr_copied-&gt;current_size    );    &#x2F;&#x2F;初始化与托管数据pro_usable_space-&gt;current_size &#x3D; dyarr_copied-&gt;current_size;pro_usable_space-&gt;Single_Data_size &#x3D; dyarr_copied-&gt;Single_Data_size;pro_usable_space-&gt;total_usable_size &#x3D; dyarr_copied-&gt;total_usable_size;return pro_usable_space;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        现在，我们的三个基本工厂函数已经做好：可以一览了</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;1 默认的工厂函数DynamicArray* Init_A_DynamicArray(size_texpected_number,size_tdatasize)&#123;DynamicArray* pro_usable_space &#x3D; MALLOCDYARR(DynamicArray, 1);if(!pro_usable_space)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;pro_usable_space-&gt;DataPiece &#x3D; NULL;pro_usable_space-&gt;Single_Data_size &#x3D; datasize;if (expected_number &gt;&#x3D; Dyarr_DEFAULT_MALLOC)pro_usable_space-&gt;total_usable_size &#x3D; expected_number;elsepro_usable_space-&gt;total_usable_size &#x3D; Dyarr_DEFAULT_MALLOC;pro_usable_space-&gt;current_size &#x3D; 0;return pro_usable_space;&#125;&#x2F;&#x2F;2.拷贝工厂函数DynamicArray* Init_A_DynamicArray_by_CopyADyarr(DynamicArray*dyarr_copied)&#123;if (!dyarr_copied)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;DynamicArray* pro_usable_space &#x3D; MALLOCDYARR(DynamicArray, 1);if (!pro_usable_space)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;void* pro_usable_data &#x3D; MALLOCDYARR(char, (dyarr_copied-&gt;Single_Data_size * dyarr_copied-&gt;current_size));if(!pro_usable_space)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;pro_usable_space-&gt;DataPiece &#x3D; pro_usable_data;memcpy(pro_usable_space-&gt;DataPiece, dyarr_copied-&gt;DataPiece, dyarr_copied-&gt;Single_Data_size * dyarr_copied-&gt;current_size);pro_usable_space-&gt;current_size &#x3D; dyarr_copied-&gt;current_size;pro_usable_space-&gt;Single_Data_size &#x3D; dyarr_copied-&gt;Single_Data_size;pro_usable_space-&gt;total_usable_size &#x3D; dyarr_copied-&gt;total_usable_size;return pro_usable_space;&#125;&#x2F;&#x2F;3.升级工厂函数DynamicArray* Updata_A_Static_Array_To_Dynamic_Array(void*data, size_tdatasize,size_tdatanum)&#123;if (!data)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;DynamicArray* pro_usable_space &#x3D; MALLOCDYARR(DynamicArray, 1);if(!pro_usable_space)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;void* pro_usable_data &#x3D; malloc(datasize * datanum*1.5);if(!pro_usable_data)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;memcpy(pro_usable_data, data, datasize * datanum);pro_usable_space-&gt;DataPiece &#x3D; pro_usable_data;pro_usable_space-&gt;current_size &#x3D; datanum;pro_usable_space-&gt;Single_Data_size &#x3D; datasize;pro_usable_space-&gt;total_usable_size &#x3D; 1.5 * datanum;return pro_usable_space;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        现在我们已经有了基本的工厂函数，已经有了一个可以可以操作的对象了！不过，我们还提到，动态数组必须有必要的调整函数，防止大量的插入导致空间不足或者是删除导致大量的空间浪费！</p><h4 id="基本调整函数"><a href="#基本调整函数" class="headerlink" title="基本调整函数"></a>基本调整函数</h4><p>​        调整大小，我们首先要拿到希望调整的动态数组，以及我们想要调成多大！函数的原型，显然易见：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void Resize_The_Dynamic_Array(DynamicArray*dyarr,size_twished_new_space_size)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        为了使程序更加健壮，我们还是返回一个NORMAL的FLAG值表示程序逻辑正常，从而更好的调整程序，这里，我先把enum列举列齐：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;Error Code Meaning&#x2F;&#x2F;Program Normally run till the end return NORMAL as 0&#x2F;&#x2F;When Error in mallocing Space the program return 1&#x2F;&#x2F;when inputing a NULL we returns -1&#x2F;&#x2F;when inputing a invalid input we returns -2&#x2F;&#x2F;Locations UnFind we returns -3 &#x2F;&#x2F;typedef enum _DynamicFunctionStatues_ &#123;DynamicArray_Normal &#x3D; 0,&#x2F;&#x2F;正常返回DynamicArray_ERROR_IN_MALLOCING_SPACE&#x3D;1,&#x2F;&#x2F;错误1：开辟空间失败DynamicArray_NULL_INPUT&#x3D;-1,&#x2F;&#x2F;错误-1：传入空值DynamicArray_Invalid_Input&#x3D;-2,&#x2F;&#x2F;错误-2： 传入不合法的值DynamicArray_UnFind&#x3D;-3, &#x2F;&#x2F;错误值-3 没有找到（后面没有使用，这里就算遗留了）DynamicArray_Invalid_Free&#x3D;-4&#x2F;&#x2F;错误值-4 不合法的释放，后面删减的时候会用到&#125;DynamicArrayFunctionStatues;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        以及错误提示宏：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define SHOW_ERROR_DynamicArray_NULL_INPUT printf(&quot;\nSorry! Your input NULL!\n&quot;)#define SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE printf(&quot;\nSorry!Failed to malloc space for your data\n&quot;)#define SHOW_ERROR_DynamicArray_Invalid_Input printf(&quot;\nYour input invalid, reject to run functions\n&quot;)#define SHOW_ERROR_DynamicArray_UnFind printf(&quot;\nPositions unfind!\n&quot;)#define SHOW_ERROR_DynamicArray_Invalid_Free printf(&quot;\nFree the invalid space,reject to run the functions\n&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        其他所有的空返回函数全部就会升级成状态标识函数：只需要我们返回的是：DynamicArrayFunctionStatues枚举下的值（有点伤心，如果是C++11以上，我们可以使用Enum 作用域这个概念了）就好了。函数就改成了：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">DynamicArrayFunctionStatues Resize_The_Dynamic_Array(DynamicArray*dyarr,size_twished_new_space_size)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        这样，我们的框架又可以搭建起来了：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">DynamicArrayFunctionStatues Resize_The_Dynamic_Array(DynamicArray*dyarr,size_twished_new_space_size)&#123;    &#x2F;&#x2F;经典检查if(!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;    ...&#x2F;&#x2F;Do something     return DynamicArray_Normal;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        对于调整函数，我们实际上就是在调整数组的堆空间，这下马上就知道函数的核心是什么了！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void* newspace &#x3D; realloc(dataPiece, new_size)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        不错，就是realloc函数！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;调整void* newspace &#x3D; realloc(dyarr-&gt;DataPiece, wished_new_space_size * (dyarr-&gt;Single_Data_size));&#x2F;&#x2F;检查空间是否合法if (newspace &#x3D;&#x3D; NULL)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​         然后就是托管，和调整结构体参数：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">dyarr-&gt;DataPiece &#x3D; newspace;&#x2F;&#x2F;空间托管dyarr-&gt;total_usable_size &#x3D; wished_new_space_size;&#x2F;&#x2F;调整usable space<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        别跑，还先别返回正常状态，我们想一个问题，万一，我们的函数当前数据大于了可用空间怎么办？既然是就想要这么多，我们何不妨：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (dyarr-&gt;current_size &gt; dyarr-&gt;total_usable_size)&#123;    dyarr-&gt;current_size &#x3D; dyarr-&gt;total_usable_size;&#x2F;&#x2F;调整至正好满溢的状态，后面的数据直接截断归还给操作系统&#125;&#x2F;&#x2F;Used when still unable to contain data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        活干完了，返回正常状态！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">return DynamicArray_Normal;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="总体一览工厂函数与基本调整函数："><a href="#总体一览工厂函数与基本调整函数：" class="headerlink" title="总体一览工厂函数与基本调整函数："></a>总体一览工厂函数与基本调整函数：</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">DynamicArrayFunctionStatues Resize_The_Dynamic_Array(DynamicArray*dyarr,size_twished_new_space_size)&#123;if(!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;void* newspace &#x3D; realloc(dyarr-&gt;DataPiece, wished_new_space_size * (dyarr-&gt;Single_Data_size));if (!newspace)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;dyarr-&gt;DataPiece &#x3D; newspace;dyarr-&gt;total_usable_size &#x3D; wished_new_space_size;if (dyarr-&gt;current_size &gt; dyarr-&gt;total_usable_size)dyarr-&gt;current_size &#x3D; dyarr-&gt;total_usable_size;&#x2F;&#x2F;Used when still unable to contain datareturn DynamicArray_Normal;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="增（加）函数一览"><a href="#增（加）函数一览" class="headerlink" title="增（加）函数一览"></a>增（加）函数一览</h3><p>​        终于，我们可以进行增删查改了！先来看增函数！</p><p>​        增加：一个数据？一堆数据？是往后面加，还是插入式的加？这就引出了四个基本函数：我们先来最简单的追加一个数据！</p><h4 id="追加单个"><a href="#追加单个" class="headerlink" title="追加单个"></a>追加单个</h4><p>​        我们仔细问问自己，追加的数据，有多大？玩意要满溢了，要不要调整？OK！我们一个一个按照程序的进行考虑！首先思考函数的原型：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">DynamicArrayFunctionStatues Push_Back_Into_A_Dynamic_Array(DynamicArray*dyarr,void*data,size_tdatasize);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        很容易想到吧！我们往哪里插入，插入什么！就是我们的参数列表吧！</p><p>​        好，检查来了：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (!dyarr &amp;&amp; !data)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        完事了？肯定没有！我们试想一下，用户可能在不知情的情况下，传入一个完全不是本类型的数据进来：怎么办？</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (sizeof(data) !&#x3D; dyarr-&gt;Single_Data_size) &#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        挺好，我们进一步想啊，数据进来了：万一溢出来，怎么办？</p><p>​        别怕，我们不是已经有了调整函数了嘛！调整一下就好了！（不过这里没有用，开销不必要）</p><p>​        现在，数据准备入列！我们准备一块空间：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void* Afteradd_piece &#x3D; realloc(    dyarr-&gt;DataPiece,     (dyarr-&gt;current_size + 1)*dyarr-&gt;Single_Data_size);if (!Afteradd_piece)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        入列咯！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;拷贝memcpy(       &#x2F;&#x2F;注意：我们插入到尾部：那就是第I-1的后面，(char*)Afteradd_piece + dyarr-&gt;current_size * dyarr-&gt;Single_Data_size, &#x2F;&#x2F;拷贝Data        data,        &#x2F;&#x2F;拷贝Single_Data_size大小，或者sizeof(data)，这个随意！dyarr-&gt;Single_Data_size);&#x2F;&#x2F;刷新结构体值dyarr-&gt;DataPiece &#x3D; Afteradd_piece;dyarr-&gt;current_size++;&#x2F;&#x2F;任务完成，返回状态Flagreturn DynamicArray_Normal;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="尾插多个数据函数1：尾插相同数据"><a href="#尾插多个数据函数1：尾插相同数据" class="headerlink" title="尾插多个数据函数1：尾插相同数据"></a>尾插多个数据函数1：尾插相同数据</h4><p>​        那插入一堆值，也是如此了！我们在尾插的时候，可以开发出来两个函数：一个是尾插一堆一样的值！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">DynamicArrayFunctionStatues Push_back_Same_data_Into_A_Dynamic_Array(DynamicArray*dyarr,void*data,size_tn_repeat,size_tdatasize)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        一个是尾插一个数组，有点像Update升级函数了：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">DynamicArrayFunctionStatues Push_Back_Some_data_Into_A_Dynamic_Array(DynamicArray*dyarr, void*data_array, size_tarray_num, size_tpos,size_tdata_inarray_size)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        一个个来！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;检查if (!dyarr &amp;&amp; !data)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (datasize !&#x3D; dyarr-&gt;Single_Data_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;if (dyarr-&gt;current_size &#x3D;&#x3D; dyarr-&gt;total_usable_size)    &#123;        &#x2F;&#x2F;先预备好空间，因为大量数据准备入场        Resize_The_Dynamic_Array(dyarr, 2 * dyarr-&gt;total_usable_size);    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        下面是扩展多大空间的问题：我们扩展是按照比例扩展的，那就需要计算比例：再传入调整函数！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int datarate &#x3D; datasize &#x2F; dyarr-&gt;total_usable_size;if (datarate &gt; 0)&#123;    Resize_The_Dynamic_Array(        dyarr,         (datarate + 1) * dyarr-&gt;total_usable_size    );&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        预留，托管和拷贝：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void* newspace &#x3D; realloc(    dyarr-&gt;DataPiece,     (dyarr-&gt;current_size + n_repeat) * dyarr-&gt;Single_Data_size);if (!newspace)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;for (int i &#x3D; 0; i &lt; n_repeat; i++)&#123;    &#x2F;&#x2F;逐个拷贝    memcpy(        &#x2F;&#x2F;插入到后面的第I+cur_size个位置上，第一个插入结束就要插入到后面一个(char*)newspace + (dyarr-&gt;current_size+i) * dyarr-&gt;Single_Data_size,data,dyarr-&gt;Single_Data_size);&#125;dyarr-&gt;DataPiece &#x3D; newspace;dyarr-&gt;current_size +&#x3D; n_repeat;return DynamicArray_Normal;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="尾插一个数组函数"><a href="#尾插一个数组函数" class="headerlink" title="尾插一个数组函数"></a>尾插一个数组函数</h4><p>​        而同类型的数组拷贝推入逻辑上是一样的：但是我们不得不遍历目标数组，再逐个插入</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">DynamicArrayFunctionStatues Push_Back_Some_data_Into_A_Dynamic_Array(DynamicArray*dyarr, void*data_array, size_tarray_num, size_tpos,size_tdata_inarray_size)&#123;if (!dyarr &amp;&amp; !data_array)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (pos&lt;0 || pos&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;if (data_inarray_size !&#x3D; dyarr-&gt;Single_Data_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;int DataRate &#x3D; array_num &#x2F; dyarr-&gt;total_usable_size;if (DataRate &gt; 0)&#123;        Resize_The_Dynamic_Array(            dyarr,             (DataRate + 1) * dyarr-&gt;total_usable_size        );    &#125;void* newspace &#x3D; realloc(        dyarr-&gt;DataPiece,         (dyarr-&gt;current_size + array_num) * dyarr-&gt;Single_Data_size    );if(!newspace)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;dyarr-&gt;DataPiece &#x3D; newspace;for (int i &#x3D; 0; i &lt; array_num; i++)memcpy(        &#x2F;&#x2F;插入到后面的第I+cur_size个位置上，第一个插入结束就要插入到后面一个(char*)dyarr-&gt;DataPiece + (pos + i) * dyarr-&gt;Single_Data_size,        &#x2F;&#x2F;这个是数组的，写成&amp;data_array[i]也是无伤大雅的(char*)data_array + i * (dyarr-&gt;Single_Data_size),        &#x2F;&#x2F;拷贝的大小dyarr-&gt;Single_Data_size);    &#x2F;&#x2F;调整大小dyarr-&gt;current_size +&#x3D; array_num;return DynamicArray_Normal;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        下面就是有点难度的插入增函数了：我们这样想，我们需要把一个元素插入到目标动态数组的pos位置上。那：使用memmove把想要插入的位置后面的所有数据挪动一个元素大小的位置，那么，目标位置就空出来了一个位置虚以待坐了！前面的工作不再多说了：</p><h4 id="插入一个元素函数"><a href="#插入一个元素函数" class="headerlink" title="插入一个元素函数"></a>插入一个元素函数</h4><p>​        函数的原型：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">DynamicArrayFunctionStatues Insert_Into_A_Dynamic_Array(DynamicArray*dyarr, void*data, size_tpos)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        检查：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#123;if (!dyarr &amp;&amp; !data)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (pos&lt;0 || pos&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;if (dyarr-&gt;current_size &#x3D;&#x3D; dyarr-&gt;total_usable_size)Resize_The_Dynamic_Array(dyarr, 2 * (dyarr-&gt;total_usable_size));void* Afteradd_piece&#x3D; realloc(dyarr-&gt;DataPiece, (dyarr-&gt;current_size + 1) * dyarr-&gt;Single_Data_size);if (!Afteradd_piece)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;&#x2F;&#x2F;。。。    return DynamicArray_Normal;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        OK，我们开始让后面的数据挪动他们的屁股！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">memcpy(    &#x2F;&#x2F;拷贝到pos+1位置处(char*)dyarr-&gt;DataPiece + (pos + 1) * dyarr-&gt;Single_Data_size,    &#x2F;&#x2F;从pos往后的数据(char*)dyarr-&gt;DataPiece + pos * dyarr-&gt;Single_Data_size,    &#x2F;&#x2F;大小计算是个数学问题：不过就是那种从i到j有几个数字的问题：j-i+1个！dyarr-&gt;Single_Data_size * (dyarr-&gt;current_size - pos + 1));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        然后把数据请进来：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">memmove((char*)dyarr-&gt;DataPiece + pos * dyarr-&gt;Single_Data_size, data, dyarr-&gt;Single_Data_size);dyarr-&gt;current_size++;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​         然后嘞：宣布我们干完活了！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">return DynamicArray_Normal;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="插入若干数据函数1：插入数组"><a href="#插入若干数据函数1：插入数组" class="headerlink" title="插入若干数据函数1：插入数组"></a>插入若干数据函数1：插入数组</h4><p>​        于是，插入一堆数据，还是一个原理的！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">DynamicArrayFunctionStatues Insert_Some_Data_Into_A_Dynamic_Array(DynamicArray*dyarr,size_tpos,void*data_array, size_tarray_num,size_tdata_inarray_size)&#123;if (!dyarr &amp;&amp; !data_array)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (pos&lt;0 || pos&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;if (!dyarr-&gt;current_size)&#123;Push_Back_Some_data_Into_A_Dynamic_Array(dyarr, data_array, array_num, pos,data_inarray_size);return DynamicArray_Normal;&#125;if (dyarr-&gt;current_size &#x3D;&#x3D; dyarr-&gt;total_usable_size)Resize_The_Dynamic_Array(dyarr, 2 * dyarr-&gt;total_usable_size);int DataRate &#x3D; array_num &#x2F; dyarr-&gt;total_usable_size;if (DataRate &gt; 0)Resize_The_Dynamic_Array(dyarr, (DataRate + 1) * dyarr-&gt;total_usable_size);void* Afteradd_piece &#x3D; realloc(dyarr-&gt;DataPiece, (dyarr-&gt;current_size + array_num) * dyarr-&gt;Single_Data_size);if (!Afteradd_piece)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;memmove(        &#x2F;&#x2F;预留array_num个位置(char*)dyarr-&gt;DataPiece + (pos + array_num) * dyarr-&gt;Single_Data_size,(char*)dyarr-&gt;DataPiece + pos * dyarr-&gt;Single_Data_size,dyarr-&gt;Single_Data_size*array_num);for (int i &#x3D; 0; i &lt; array_num; i++)memcpy(        &#x2F;&#x2F;从目标位往后拷贝(char*)dyarr-&gt;DataPiece + (pos + i) * dyarr-&gt;Single_Data_size,        &#x2F;&#x2F;这个是数组的，写成&amp;data_array[i]也是无伤大雅的(char*)data_array + i * (dyarr-&gt;Single_Data_size),dyarr-&gt;Single_Data_size);dyarr-&gt;current_size +&#x3D; array_num;return DynamicArray_Normal;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="插入若干数据：相同数据"><a href="#插入若干数据：相同数据" class="headerlink" title="插入若干数据：相同数据"></a>插入若干数据：相同数据</h4><p>​        还是一样，直接上代码：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;Insert back a lot of data that has a organization that has all the same data&#x2F;&#x2F;Use like this: &#x2F;&#x2F;insert_back_Same_data_Into_A_Dynamic_Array(dyarr,n_repeat,datasize,pos)&#x2F;&#x2F;DynamicArrayFunctionStatues insert_back_Same_data_Into_A_Dynamic_Array(DynamicArray*dyarr,void*data,size_tn_repeat,size_tdatasize,size_tpos)&#123;if (!dyarr &amp;&amp; !data)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (datasize !&#x3D; dyarr-&gt;Single_Data_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;if (dyarr-&gt;current_size &#x3D;&#x3D; dyarr-&gt;total_usable_size)Resize_The_Dynamic_Array(dyarr, 2 * dyarr-&gt;total_usable_size);int datarate &#x3D; datasize &#x2F; dyarr-&gt;total_usable_size;if (datarate &gt; 0)Resize_The_Dynamic_Array(dyarr, (datarate + 1) * dyarr-&gt;total_usable_size);void* newspace &#x3D; realloc(dyarr-&gt;DataPiece, (dyarr-&gt;current_size + n_repeat) * dyarr-&gt;Single_Data_size);if (!newspace)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;memmove((char*)dyarr-&gt;DataPiece + (pos + n_repeat) * dyarr-&gt;Single_Data_size,(char*)dyarr-&gt;DataPiece + pos * dyarr-&gt;Single_Data_size,dyarr-&gt;Single_Data_size * n_repeat);for (int i &#x3D; 0; i &lt; n_repeat; i++)memcpy((char*)newspace + (pos + i) * dyarr-&gt;Single_Data_size,data,dyarr-&gt;Single_Data_size);dyarr-&gt;DataPiece &#x3D; newspace;dyarr-&gt;current_size +&#x3D; n_repeat;return DynamicArray_Normal;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="拼接动态数组"><a href="#拼接动态数组" class="headerlink" title="拼接动态数组"></a>拼接动态数组</h4><p>​        欸嘿！我们可不可以拼接一下两个动态数组呢？可以啊！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">DynamicArrayFunctionStatues AppendByMergeDynamicArray(DynamicArray*dyarr_be_appended,DynamicArray*exp_append_array)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        这下很容易了：我们的dataPiece直接延后exp_append_array-&gt;current_size个，再拷贝就完事咯！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">DynamicArrayFunctionStatues AppendByMergeDynamicArray(DynamicArray*dyarr_be_appended,DynamicArray*exp_append_array)&#123;if (!dyarr_be_appended &amp;&amp; !exp_append_array)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;&#x2F;&#x2F;跟插入大量数据是一个道理的！int datarate &#x3D; exp_append_array-&gt;current_size &#x2F; dyarr_be_appended-&gt;total_usable_size;if (        dyarr_be_appended-&gt;current_size         &#x3D;&#x3D;         dyarr_be_appended-&gt;total_usable_size    )&#123;        Resize_The_Dynamic_Array(            dyarr_be_appended,             2 * dyarr_be_appended-&gt;total_usable_size        );    &#125;if (datarate &gt; 0)Resize_The_Dynamic_Array(dyarr_be_appended, (datarate + 1) * dyarr_be_appended-&gt;total_usable_size);void* AfterAppend &#x3D; realloc(dyarr_be_appended-&gt;DataPiece,        &#x2F;&#x2F;这一大长串就是两个动态数组一共的大小！        (dyarr_be_appended-&gt;current_size + exp_append_array-&gt;current_size) * dyarr_be_appended-&gt;Single_Data_size);if (!AfterAppend)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;dyarr_be_appended-&gt;DataPiece &#x3D; AfterAppend;memcpy(&#x2F;&#x2F;目标地：被追加的数组的尾部        (char*)dyarr_be_appended-&gt;DataPiece +         dyarr_be_appended-&gt;current_size * dyarr_be_appended-&gt;Single_Data_size,        &#x2F;&#x2F;源头：被拷贝的数组(char*)exp_append_array-&gt;DataPiece,        &#x2F;&#x2F;大小：被拷贝数组的大小exp_append_array-&gt;current_size * exp_append_array-&gt;Single_Data_size);    &#x2F;&#x2F;调整大小dyarr_be_appended-&gt;current_size +&#x3D; exp_append_array-&gt;current_size;return DynamicArray_Normal;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="一览增（加）函数"><a href="#一览增（加）函数" class="headerlink" title="一览增（加）函数"></a>一览增（加）函数</h4><p>OK，我们再一览我们的成果就好了：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;Push back a data into the Dynamic Array&#x2F;&#x2F;Use like this: Push_Back_Into_A_Dynamic_Array(dyarr,data)&#x2F;&#x2F;DynamicArrayFunctionStatues Push_Back_Into_A_Dynamic_Array(DynamicArray*dyarr, void*data,size_tdatasize)&#123;if (!dyarr &amp;&amp; !data)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (datasize !&#x3D; dyarr-&gt;Single_Data_size) &#123;printf(&quot;%d &quot;, sizeof(data));SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;if (dyarr-&gt;current_size &#x3D;&#x3D; dyarr-&gt;total_usable_size)Resize_The_Dynamic_Array(dyarr, 1.3 * (dyarr-&gt;total_usable_size));void* Afteradd_piece &#x3D; realloc(dyarr-&gt;DataPiece, (dyarr-&gt;current_size + 1)*dyarr-&gt;Single_Data_size);if (!Afteradd_piece)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;memcpy((char*)Afteradd_piece + dyarr-&gt;current_size * dyarr-&gt;Single_Data_size, data, dyarr-&gt;Single_Data_size);dyarr-&gt;DataPiece &#x3D; Afteradd_piece;dyarr-&gt;current_size++;return DynamicArray_Normal;&#125;&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;Push back a lot of data that has a organization that has all the same data&#x2F;&#x2F;Use like this: &#x2F;&#x2F;Push_back_Same_data_Into_A_Dynamic_Array(dyarr,data,the_time_data_repeated,sizeof(data))&#x2F;&#x2F;DynamicArrayFunctionStatues Push_back_Same_data_Into_A_Dynamic_Array(DynamicArray*dyarr,void*data,size_tn_repeat,size_tdatasize)&#123;if (!dyarr &amp;&amp; !data)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (datasize !&#x3D; dyarr-&gt;Single_Data_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;if (dyarr-&gt;current_size &#x3D;&#x3D; dyarr-&gt;total_usable_size)Resize_The_Dynamic_Array(dyarr, 2 * dyarr-&gt;total_usable_size);int datarate &#x3D; datasize &#x2F; dyarr-&gt;total_usable_size;if (datarate &gt; 0)Resize_The_Dynamic_Array(dyarr, (datarate + 1) * dyarr-&gt;total_usable_size);void* newspace &#x3D; realloc(dyarr-&gt;DataPiece, (dyarr-&gt;current_size + n_repeat) * dyarr-&gt;Single_Data_size);if (!newspace)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;for (int i &#x3D; 0; i &lt; n_repeat; i++)memcpy((char*)newspace + (dyarr-&gt;current_size+i) * dyarr-&gt;Single_Data_size,data,dyarr-&gt;Single_Data_size);dyarr-&gt;DataPiece &#x3D; newspace;dyarr-&gt;current_size +&#x3D; n_repeat;return DynamicArray_Normal;&#125;&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;Push back a lot of data that has a organization that has a organiztion with static array&#x2F;&#x2F;Use like this: &#x2F;&#x2F;Push_back_Same_data_Into_A_Dynamic_Array(&#x2F;&#x2F;dyarr,&#x2F;&#x2F;data,&#x2F;&#x2F;how_many_data_are_there_in_static_array,&#x2F;&#x2F;sizeof(data))&#x2F;&#x2F;DynamicArrayFunctionStatues Push_Back_Some_data_Into_A_Dynamic_Array(DynamicArray*dyarr, void*data_array, size_tarray_num, size_tpos,size_tdata_inarray_size)&#123;if (!dyarr &amp;&amp; !data_array)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (pos&lt;0 || pos&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;if (data_inarray_size !&#x3D; dyarr-&gt;Single_Data_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;int DataRate &#x3D; array_num &#x2F; dyarr-&gt;total_usable_size;if (DataRate &gt; 0)Resize_The_Dynamic_Array(dyarr, (DataRate + 1) * dyarr-&gt;total_usable_size);void* newspace &#x3D; realloc(dyarr-&gt;DataPiece, (dyarr-&gt;current_size + array_num) * dyarr-&gt;Single_Data_size);if(!newspace)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;dyarr-&gt;DataPiece &#x3D; newspace;for (int i &#x3D; 0; i &lt; array_num; i++)memcpy((char*)dyarr-&gt;DataPiece + (pos + i) * dyarr-&gt;Single_Data_size,(char*)data_array + i * (dyarr-&gt;Single_Data_size),dyarr-&gt;Single_Data_size);dyarr-&gt;current_size +&#x3D; array_num;return DynamicArray_Normal;&#125;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Insert back a data &#x2F;&#x2F; use like this: &#x2F;&#x2F; Insert_Into_A_Dynamic_Array(&#x2F;&#x2F; dyarr, &#x2F;&#x2F; data, &#x2F;&#x2F; where_to_insert,&#x2F;&#x2F;DynamicArrayFunctionStatues Insert_Into_A_Dynamic_Array(DynamicArray*dyarr, void*data, size_tpos)&#123;if (!dyarr &amp;&amp; !data)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (pos&lt;0 || pos&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;if (dyarr-&gt;current_size &#x3D;&#x3D; dyarr-&gt;total_usable_size)Resize_The_Dynamic_Array(dyarr, 2 * (dyarr-&gt;total_usable_size));void* Afteradd_piece&#x3D; realloc(dyarr-&gt;DataPiece, (dyarr-&gt;current_size + 1) * dyarr-&gt;Single_Data_size);if (!Afteradd_piece)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;memcpy((char*)dyarr-&gt;DataPiece + (pos + 1) * dyarr-&gt;Single_Data_size,(char*)dyarr-&gt;DataPiece + pos * dyarr-&gt;Single_Data_size,dyarr-&gt;Single_Data_size*(dyarr-&gt;current_size-pos+1));memmove((char*)dyarr-&gt;DataPiece + pos * dyarr-&gt;Single_Data_size, data, dyarr-&gt;Single_Data_size);dyarr-&gt;current_size++;return DynamicArray_Normal;&#125;&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;Insert back a lot of data that has a organization that has all the same data&#x2F;&#x2F;Use like this: &#x2F;&#x2F;insert_back_Same_data_Into_A_Dynamic_Array(dyarr,n_repeat,datasize,pos)&#x2F;&#x2F;DynamicArrayFunctionStatues insert_back_Same_data_Into_A_Dynamic_Array(DynamicArray*dyarr,void*data,size_tn_repeat,size_tdatasize,size_tpos)&#123;if (!dyarr &amp;&amp; !data)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (datasize !&#x3D; dyarr-&gt;Single_Data_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;if (dyarr-&gt;current_size &#x3D;&#x3D; dyarr-&gt;total_usable_size)Resize_The_Dynamic_Array(dyarr, 2 * dyarr-&gt;total_usable_size);int datarate &#x3D; datasize &#x2F; dyarr-&gt;total_usable_size;if (datarate &gt; 0)Resize_The_Dynamic_Array(dyarr, (datarate + 1) * dyarr-&gt;total_usable_size);void* newspace &#x3D; realloc(dyarr-&gt;DataPiece, (dyarr-&gt;current_size + n_repeat) * dyarr-&gt;Single_Data_size);if (!newspace)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;memmove((char*)dyarr-&gt;DataPiece + (pos + n_repeat) * dyarr-&gt;Single_Data_size,(char*)dyarr-&gt;DataPiece + pos * dyarr-&gt;Single_Data_size,dyarr-&gt;Single_Data_size * n_repeat);for (int i &#x3D; 0; i &lt; n_repeat; i++)memcpy((char*)newspace + (pos + i) * dyarr-&gt;Single_Data_size,data,dyarr-&gt;Single_Data_size);dyarr-&gt;DataPiece &#x3D; newspace;dyarr-&gt;current_size +&#x3D; n_repeat;return DynamicArray_Normal;&#125;&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;Insert back some data that organized in static array&#x2F;&#x2F;use like this: Insert_Into_A_Dynamic_Array(&#x2F;&#x2F; dyarr, &#x2F;&#x2F; where_to_insert, &#x2F;&#x2F; data, &#x2F;&#x2F; how_many_data_are_there_in_static_array,&#x2F;&#x2F; sizeof(data)&#x2F;&#x2F;)&#x2F;&#x2F;DynamicArrayFunctionStatues Insert_Some_Data_Into_A_Dynamic_Array(DynamicArray*dyarr,size_tpos,void*data_array, size_tarray_num,size_tdata_inarray_size)&#123;if (!dyarr &amp;&amp; !data_array)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (pos&lt;0 || pos&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;if (!dyarr-&gt;current_size)&#123;Push_Back_Some_data_Into_A_Dynamic_Array(dyarr, data_array, array_num, pos,data_inarray_size);return DynamicArray_Normal;&#125;if (dyarr-&gt;current_size &#x3D;&#x3D; dyarr-&gt;total_usable_size)Resize_The_Dynamic_Array(dyarr, 2 * dyarr-&gt;total_usable_size);int DataRate &#x3D; array_num &#x2F; dyarr-&gt;total_usable_size;if (DataRate &gt; 0)Resize_The_Dynamic_Array(dyarr, (DataRate + 1) * dyarr-&gt;total_usable_size);void* Afteradd_piece &#x3D; realloc(dyarr-&gt;DataPiece, (dyarr-&gt;current_size + array_num) * dyarr-&gt;Single_Data_size);if (!Afteradd_piece)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;memmove((char*)dyarr-&gt;DataPiece + (pos + array_num) * dyarr-&gt;Single_Data_size,(char*)dyarr-&gt;DataPiece + pos * dyarr-&gt;Single_Data_size,dyarr-&gt;Single_Data_size*array_num);for (int i &#x3D; 0; i &lt; array_num; i++)memcpy((char*)dyarr-&gt;DataPiece + (pos + i) * dyarr-&gt;Single_Data_size,(char*)data_array + i * (dyarr-&gt;Single_Data_size),dyarr-&gt;Single_Data_size);dyarr-&gt;current_size +&#x3D; array_num;return DynamicArray_Normal;&#125;&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;Append another dynamic Array&#x2F;&#x2F; use like this:&#x2F;&#x2F; AppendByMergeDynamicArray(dyarr_be_appended, exp_append_array)&#x2F;&#x2F;DynamicArrayFunctionStatues AppendByMergeDynamicArray(DynamicArray*dyarr_be_appended,DynamicArray*exp_append_array)&#123;if (!dyarr_be_appended &amp;&amp; !exp_append_array)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;int datarate &#x3D; exp_append_array-&gt;current_size &#x2F; dyarr_be_appended-&gt;total_usable_size;if (dyarr_be_appended-&gt;current_size &#x3D;&#x3D; dyarr_be_appended-&gt;total_usable_size)Resize_The_Dynamic_Array(dyarr_be_appended, 2 * dyarr_be_appended-&gt;total_usable_size);if (datarate &gt; 0)Resize_The_Dynamic_Array(dyarr_be_appended, (datarate + 1) * dyarr_be_appended-&gt;total_usable_size);void* AfterAppend &#x3D; realloc(dyarr_be_appended-&gt;DataPiece,(dyarr_be_appended-&gt;current_size + exp_append_array-&gt;current_size) * dyarr_be_appended-&gt;Single_Data_size);if (!AfterAppend)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;dyarr_be_appended-&gt;DataPiece &#x3D; AfterAppend;memcpy((char*)dyarr_be_appended-&gt;DataPiece + dyarr_be_appended-&gt;current_size * dyarr_be_appended-&gt;Single_Data_size,(char*)exp_append_array-&gt;DataPiece,exp_append_array-&gt;current_size * exp_append_array-&gt;Single_Data_size);dyarr_be_appended-&gt;current_size +&#x3D; exp_append_array-&gt;current_size;return DynamicArray_Normal;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删减函数"><a href="#删减函数" class="headerlink" title="删减函数"></a>删减函数</h3><p>​        就像人生需要做减法一样，我们也要给我们的数据结构提供删减操作！</p><h4 id="尾删除函数（删减一个）"><a href="#尾删除函数（删减一个）" class="headerlink" title="尾删除函数（删减一个）"></a>尾删除函数（删减一个）</h4><p>​        不删减多个，不水代码！</p><p>​        很简单，我们只需要size—就好了！之后再次增加的时候会直接覆盖，同时，若是删减过多可以在后续直接调用Resize函数！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually erase the final element!&#x2F;&#x2F; use like this:&#x2F;&#x2F; Pop_Out_From_A_Dynamic_Array(dyarr)&#x2F;&#x2F;DynamicArrayFunctionStatues Pop_Out_From_A_Dynamic_Array(DynamicArray*dyarr)&#123;if(!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;dyarr-&gt;current_size--;return DynamicArray_Normal;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="直接清除函数（直接清空）"><a href="#直接清除函数（直接清空）" class="headerlink" title="直接清除函数（直接清空）"></a>直接清除函数（直接清空）</h4><p>​        一个思路，但是，这次由于是清空，我们直接free掉数据！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">DynamicArrayFunctionStatues Clear_A_Dynamic_Array(DynamicArray*dyarr)&#123;if (!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;dyarr-&gt;current_size &#x3D; 0;if (!dyarr-&gt;DataPiece)&#123;SHOW_ERROR_DynamicArray_Invalid_Free;printf(&quot;VOID DATA SHOULDN&#39;T BE FREE!&quot;);exit(DynamicArray_Invalid_Free);&#125;    &#x2F;&#x2F;预留一个位置，便于后期操作！void* pro_usable_space&#x3D; realloc(dyarr-&gt;DataPiece, dyarr-&gt;Single_Data_size);if (!pro_usable_space)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;dyarr-&gt;DataPiece&#x3D;pro_usable_space;dyarr-&gt;total_usable_size &#x3D; 1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除一个数据（指定一个位置）"><a href="#删除一个数据（指定一个位置）" class="headerlink" title="删除一个数据（指定一个位置）"></a>删除一个数据（指定一个位置）</h4><p>​        我们怎么删除数组里的一个数据呢？只需要回顾到Insert函数的操作，我们反过来，让pos后面的数据往前移动一个！不久把数据盖上了嘛！随后size—就是我们想要的结果！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually erase a specific data by pos&#x2F;&#x2F; use like this&#x2F;&#x2F; Delete_A_Specific_Data_From_the_DynamicArray(dyarr,  pos)&#x2F;&#x2F;DynamicArrayFunctionStatues Delete_A_Specific_Data_From_the_DynamicArray(DynamicArray*dyarr, size_tpos)&#123;    &#x2F;&#x2F;检查if(!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (pos &lt; 0 || pos&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;    &#x2F;&#x2F;直接拷贝覆盖跑路！memcpy((char*)dyarr-&gt;DataPiece+pos*dyarr-&gt;Single_Data_size,(char*)dyarr-&gt;DataPiece+(pos+1)*dyarr-&gt;Single_Data_size,dyarr-&gt;Single_Data_size*(dyarr-&gt;current_size-pos-1));    &#x2F;&#x2F;size--，防止访问到奇怪的数据！dyarr-&gt;current_size--;return DynamicArray_Normal;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除一些数据"><a href="#删除一些数据" class="headerlink" title="删除一些数据"></a>删除一些数据</h4><p>​        这个难度稍大一点：关键在于，如果我们删除了大量的数据，我们需要调用Resize函数来释放多余的空间，这样可以优化内存占用！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually erase some specific data by pos&#x2F;&#x2F; use like this&#x2F;&#x2F; Delete_A_Specific_Data_From_the_DynamicArray(dyarr, beginpos, endpos)&#x2F;&#x2F;DynamicArrayFunctionStatues Delete_Some_Specific_Data_From_the_DynamicArray(DynamicArray*dyarr, size_tBeginpos, size_tEndpos)&#123;if (!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (Beginpos &lt; 0 || Beginpos&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;if (Endpos &lt; 0 || Endpos&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;memcpy((char*)dyarr-&gt;DataPiece + Beginpos * dyarr-&gt;Single_Data_size,(char*)dyarr-&gt;DataPiece + (Endpos + 1) * dyarr-&gt;Single_Data_size,dyarr-&gt;Single_Data_size * (dyarr-&gt;current_size - Endpos + 1));dyarr-&gt;current_size -&#x3D; Endpos - Beginpos + 1;    &#x2F;&#x2F;开始调整大小！if (dyarr-&gt;current_size &lt;&#x3D; dyarr-&gt;total_usable_size &#x2F; 4 &amp;&amp; dyarr-&gt;total_usable_size &gt; 5)&#123;Resize_The_Dynamic_Array(dyarr, dyarr-&gt;total_usable_size &#x2F; 2);dyarr-&gt;total_usable_size &#x2F;&#x3D; 2;&#125;return DynamicArray_Normal;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="直接删掉整个动态数组的函数："><a href="#直接删掉整个动态数组的函数：" class="headerlink" title="直接删掉整个动态数组的函数："></a>直接删掉整个动态数组的函数：</h4><p>​        注意：我们先释放数据，再释放本身！不然会造成内存泄漏！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">DynamicArrayFunctionStatues Destroy_A_Dynamic_Array(DynamicArray*dyarr)&#123;if (!dyarr)&#123;SHOW_ERROR_DynamicArray_Invalid_Free;exit(DynamicArray_Invalid_Free);&#125;free(dyarr-&gt;DataPiece);free(dyarr);return DynamicArray_Normal;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="一览删除函数："><a href="#一览删除函数：" class="headerlink" title="一览删除函数："></a>一览删除函数：</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually erase the final element!&#x2F;&#x2F; use like this:&#x2F;&#x2F; Pop_Out_From_A_Dynamic_Array(dyarr)&#x2F;&#x2F;DynamicArrayFunctionStatues Pop_Out_From_A_Dynamic_Array(DynamicArray*dyarr)&#123;if(!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;dyarr-&gt;current_size--;return DynamicArray_Normal;&#125;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually erase all elements!&#x2F;&#x2F; use like this:&#x2F;&#x2F; Clear_A_Dynamic_Array(dyarr)&#x2F;&#x2F;DynamicArrayFunctionStatues Clear_A_Dynamic_Array(DynamicArray*dyarr)&#123;if (!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;dyarr-&gt;current_size &#x3D; 0;if (!dyarr-&gt;DataPiece)&#123;SHOW_ERROR_DynamicArray_Invalid_Free;printf(&quot;VOID DATA SHOULDN&#39;T BE FREE!&quot;);exit(DynamicArray_Invalid_Free);&#125;void* pro_usable_space&#x3D; realloc(dyarr-&gt;DataPiece, dyarr-&gt;Single_Data_size);if (!pro_usable_space)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;dyarr-&gt;DataPiece&#x3D;pro_usable_space;dyarr-&gt;total_usable_size &#x3D; 1;&#125;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually erase all elements! and unable to be used again!&#x2F;&#x2F; use like this:&#x2F;&#x2F; Destroy_A_Dynamic_Array(dyarr)&#x2F;&#x2F;DynamicArrayFunctionStatues Destroy_A_Dynamic_Array(DynamicArray*dyarr)&#123;if (!dyarr)&#123;SHOW_ERROR_DynamicArray_Invalid_Free;exit(DynamicArray_Invalid_Free);&#125;free(dyarr-&gt;DataPiece);free(dyarr);return DynamicArray_Normal;&#125;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually erase a specific data by pos&#x2F;&#x2F; use like this&#x2F;&#x2F; Delete_A_Specific_Data_From_the_DynamicArray(dyarr,  pos)&#x2F;&#x2F;DynamicArrayFunctionStatues Delete_A_Specific_Data_From_the_DynamicArray(DynamicArray*dyarr, size_tpos)&#123;if(!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (pos &lt; 0 || pos&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;memcpy((char*)dyarr-&gt;DataPiece+pos*dyarr-&gt;Single_Data_size,(char*)dyarr-&gt;DataPiece+(pos+1)*dyarr-&gt;Single_Data_size,dyarr-&gt;Single_Data_size*(dyarr-&gt;current_size-pos-1));dyarr-&gt;current_size--;return DynamicArray_Normal;&#125;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually erase some specific data by pos&#x2F;&#x2F; use like this&#x2F;&#x2F; Delete_A_Specific_Data_From_the_DynamicArray(dyarr, beginpos, endpos)&#x2F;&#x2F;DynamicArrayFunctionStatues Delete_Some_Specific_Data_From_the_DynamicArray(DynamicArray*dyarr, size_tBeginpos, size_tEndpos)&#123;if (!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (Beginpos &lt; 0 || Beginpos&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;if (Endpos &lt; 0 || Endpos&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;memcpy((char*)dyarr-&gt;DataPiece + Beginpos * dyarr-&gt;Single_Data_size,(char*)dyarr-&gt;DataPiece + (Endpos + 1) * dyarr-&gt;Single_Data_size,dyarr-&gt;Single_Data_size * (dyarr-&gt;current_size - Endpos + 1));dyarr-&gt;current_size -&#x3D; Endpos - Beginpos + 1;if (dyarr-&gt;current_size &lt;&#x3D; dyarr-&gt;total_usable_size &#x2F; 4 &amp;&amp; dyarr-&gt;total_usable_size &gt; 5)&#123;Resize_The_Dynamic_Array(dyarr, dyarr-&gt;total_usable_size &#x2F; 2);dyarr-&gt;total_usable_size &#x2F;&#x3D; 2;&#125;return DynamicArray_Normal;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打印内容与处理其内数据函数系列"><a href="#打印内容与处理其内数据函数系列" class="headerlink" title="打印内容与处理其内数据函数系列"></a>打印内容与处理其内数据函数系列</h3><h4 id="打印操作"><a href="#打印操作" class="headerlink" title="打印操作"></a>打印操作</h4><p>​        打印数据是我们常用的与数据交互的操作，我们正是需要这个东西来看看我们的数据如何：注意到，我们打印的可能不是整数，可能不是字符，而是任何东西！那么，我们所作的，只是提供一个函数接口！至于怎么打印，让用户自己看着办！为了方便打字，为了防止用户花式整出来奇形八怪的Print接口，我们统一 一个！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef void(* MyPrint )(void*)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        这个是函数指针别名的经典写法，如果你不熟悉，可以从这里看：比若说，我要指定一个类型，给他起个别名便于我们后续写程序提醒与应用（工程上常常这么做！提醒自己这个是干嘛的的）</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef int MyInt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        这就是说：MyInt是我自己起的一个类型，但是本质上就是Int！它可以跟int 起到完全一致的效果！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int main()&#123;    int a &#x3D; 1;    MyInt b &#x3D; 1;&#x2F;&#x2F; Legal!&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        而这个：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef void(* MyPrint )(void*);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        就是一个函数指针（说白了，就是一个接受一个任意数据啥都不返回的函数！）的别名，这样写，你可能会更有感觉：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef void(*)(void*) MyPrint ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        于是，我们的打印函数就有了点可行的想法了！</p><h4 id="打印一个数据（指定位置）"><a href="#打印一个数据（指定位置）" class="headerlink" title="打印一个数据（指定位置）"></a>打印一个数据（指定位置）</h4><p>​        这个函数可以和后面的返回位置的查找函数搭配使用！我们的这个函数打印动态数组里的一个元素！函数肯定的：需要一个动态数组！需要位置！需要打印方式！原型直接出来了：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">DynamicArrayFunctionStatues Print_Specific_Data_In_A_Dynamic_Array(DynamicArray*dyarr, MyPrint&#x2F;*就是函数指针，说白了就是打印方式传进来*&#x2F;user_print, size_tpos) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        还是检查：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#123;if (!dyarr &amp;&amp; !user_print)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (pos &lt; 0 || pos&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;    ...        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        为了让打印好看点，我们加入表示语句：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">printf(&quot;\nSpecific Data is Shown:\n&quot;);...&#x2F;&#x2F;here we printprintf(&quot;\nSpecific Data Finished Showing!\n&quot;);return DynamicArray_Normal;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        对于函数的调用，我们使用（）调用！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">user_print(    (char*)(dyarr-&gt;DataPiece) + pos * (dyarr-&gt;Single_Data_size));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        为什么这样写？注意，我们必须转化void* 为具体的指针来对指针进行加减操作！否则不合法！，而操作程度最小的指针就是char指针！于是，我们使用：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">(char*)(dyarr-&gt;DataPiece) + pos * (dyarr-&gt;Single_Data_size)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>定位到我们想要打印到的位置！之后解引用的方式（决定访问步长，这是指针的一个应用本质）是由用户决定的！</p><p>​        看看成品：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually Print a specific data&#x2F;&#x2F; use like this&#x2F;&#x2F;Print_Specific_Data_In_A_Dynamic_Array(dyarr, user_print, pos)&#x2F;&#x2F;DynamicArrayFunctionStatues Print_Specific_Data_In_A_Dynamic_Array(DynamicArray*dyarr, MyPrintuser_print, size_tpos) &#123;if (!dyarr &amp;&amp; !user_print)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (pos &lt; 0 || pos&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;printf(&quot;\nSpecific Data is Shown:\n&quot;);user_print((char*)(dyarr-&gt;DataPiece) + pos * (dyarr-&gt;Single_Data_size));printf(&quot;\nSpecific Data Finished Showing!\n&quot;);return DynamicArray_Normal;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="打印所有数据"><a href="#打印所有数据" class="headerlink" title="打印所有数据"></a>打印所有数据</h4><p>​        我说停！先别开工！我们引入一个enum，让用户传入一个参数来决定要不要更好的打印我们的数据！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;A switch that used in better Print in Dynamic Array!&#x2F;&#x2F;Often use OPEN to beautify the control table&#x2F;&#x2F;typedef enum _BetterPrintSwitch_for_dyarr_ &#123;Dyarr_OPEN &#x3D; 1,Dyarr_CLOSE &#x3D; 0&#125;BetterPrintSwitch_for_dyarr;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        之后？就是遍历咯！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually Print All data&#x2F;&#x2F; use like this&#x2F;&#x2F; Print_ALL_Data_In_A_Dynamic_Array(dyarr,user_print_funtional_pointer, Dyarr_OPEN or Dyarr_ClOSE)&#x2F;&#x2F;DynamicArrayFunctionStatues Print_ALL_Data_In_A_Dynamic_Array(DynamicArray*dyarr,MyPrintuser_print,BetterPrintSwitch_for_dyarrwhether_better_print)&#123;if (!dyarr &amp;&amp; !user_print)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;    &#x2F;&#x2F;要不要更好的打印？if(whether_better_print&#x3D;&#x3D;Dyarr_OPEN)&#123;printf(&quot;\nStart Printing\n&quot;);&#125;    &#x2F;&#x2F;遍历！for (int i &#x3D; 0; i &lt; dyarr-&gt;current_size; i++)&#123;        &#x2F;&#x2F;函数名跟数组名一样！本质上还是指针，所以，无所谓解不解引用(*user_print)(            &#x2F;&#x2F;打印第I个            (char*)(dyarr-&gt;DataPiece) + i * (dyarr-&gt;Single_Data_size)        );&#125;if (whether_better_print &#x3D;&#x3D; Dyarr_OPEN)&#123;printf(&quot;\nFinish Printing\n&quot;);&#125;return DynamicArray_Normal;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="处理数据（单个多个）"><a href="#处理数据（单个多个）" class="headerlink" title="处理数据（单个多个）"></a>处理数据（单个多个）</h4><p>​        仿照Print思路，这一次，我们使用Do_Specific_Change函数指针！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef void*(*Do_Specific_Change)(void*);&#x2F;&#x2F;返回void也行，主要考虑扩展接口的问题，后续可能自己定义函数要继续操作<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        这次不在多说！一样的：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually make some change in all data&#x2F;&#x2F; use like this&#x2F;&#x2F; Do_Specific_Change_To_All_Data(dyarr, user_print, pos)&#x2F;&#x2F;DynamicArrayFunctionStatues Do_Specific_Change_To_All_Data(DynamicArray*dyarr, Do_Specific_Changeuser_change) &#123;if (!dyarr &amp;&amp; !user_change)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;for (int i &#x3D; 0; i &lt; dyarr-&gt;current_size; i++)user_change(        &#x2F;&#x2F;处理第I个数据        (char*)(dyarr-&gt;DataPiece) + i * (dyarr-&gt;Single_Data_size)    );return DynamicArray_Normal;&#125;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually make some change in a specific data&#x2F;&#x2F; use like this&#x2F;&#x2F; Do_Specific_Change_To_All_Data(dyarr, user_print, pos)&#x2F;&#x2F;DynamicArrayFunctionStatues Do_Specific_Change_To_Specific_Data(DynamicArray*dyarr, Do_Specific_Changeuser_change, size_tpos)&#123;if (!dyarr &amp;&amp; !user_change)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (pos &lt; 0 || pos&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;user_change((char*)(dyarr-&gt;DataPiece) + pos * (dyarr-&gt;Single_Data_size));return DynamicArray_Normal;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="打印内容与处理其内数据函数系列一览"><a href="#打印内容与处理其内数据函数系列一览" class="headerlink" title="打印内容与处理其内数据函数系列一览"></a>打印内容与处理其内数据函数系列一览</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually Print a specific data&#x2F;&#x2F; use like this&#x2F;&#x2F;Print_Specific_Data_In_A_Dynamic_Array(dyarr, user_print, pos)&#x2F;&#x2F;DynamicArrayFunctionStatues Print_Specific_Data_In_A_Dynamic_Array(DynamicArray*dyarr, MyPrintuser_print, size_tpos) &#123;if (!dyarr &amp;&amp; !user_print)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (pos &lt; 0 || pos&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;printf(&quot;\nSpecific Data is Shown:\n&quot;);user_print((char*)(dyarr-&gt;DataPiece) + pos * (dyarr-&gt;Single_Data_size));printf(&quot;\nSpecific Data Finished Showing!\n&quot;);return DynamicArray_Normal;&#125;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually Print All data&#x2F;&#x2F; use like this&#x2F;&#x2F; Print_ALL_Data_In_A_Dynamic_Array(dyarr,user_print_funtional_pointer, Dyarr_OPEN or Dyarr_ClOSE)&#x2F;&#x2F;DynamicArrayFunctionStatues Print_ALL_Data_In_A_Dynamic_Array(DynamicArray*dyarr,MyPrintuser_print,BetterPrintSwitch_for_dyarrwhether_better_print)&#123;if (!dyarr &amp;&amp; !user_print)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;    &#x2F;&#x2F;要不要更好的打印？if(whether_better_print&#x3D;&#x3D;Dyarr_OPEN)&#123;printf(&quot;\nStart Printing\n&quot;);&#125;    &#x2F;&#x2F;遍历！for (int i &#x3D; 0; i &lt; dyarr-&gt;current_size; i++)&#123;        &#x2F;&#x2F;函数名跟数组名一样！本质上还是指针，所以，无所谓解不解引用(*user_print)(            &#x2F;&#x2F;打印第I个            (char*)(dyarr-&gt;DataPiece) + i * (dyarr-&gt;Single_Data_size)        );&#125;if (whether_better_print &#x3D;&#x3D; Dyarr_OPEN)&#123;printf(&quot;\nFinish Printing\n&quot;);&#125;return DynamicArray_Normal;&#125;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually make some change in all data&#x2F;&#x2F; use like this&#x2F;&#x2F; Do_Specific_Change_To_All_Data(dyarr, user_print, pos)&#x2F;&#x2F;DynamicArrayFunctionStatues Do_Specific_Change_To_All_Data(DynamicArray*dyarr, Do_Specific_Changeuser_change) &#123;if (!dyarr &amp;&amp; !user_change)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;for (int i &#x3D; 0; i &lt; dyarr-&gt;current_size; i++)user_change(        &#x2F;&#x2F;处理第I个数据        (char*)(dyarr-&gt;DataPiece) + i * (dyarr-&gt;Single_Data_size)    );return DynamicArray_Normal;&#125;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually make some change in a specific data&#x2F;&#x2F; use like this&#x2F;&#x2F; Do_Specific_Change_To_All_Data(dyarr, user_print, pos)&#x2F;&#x2F;DynamicArrayFunctionStatues Do_Specific_Change_To_Specific_Data(DynamicArray*dyarr, Do_Specific_Changeuser_change, size_tpos)&#123;if (!dyarr &amp;&amp; !user_change)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (pos &lt; 0 || pos&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;user_change((char*)(dyarr-&gt;DataPiece) + pos * (dyarr-&gt;Single_Data_size));return DynamicArray_Normal;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询状况与数据函数一览"><a href="#查询状况与数据函数一览" class="headerlink" title="查询状况与数据函数一览"></a>查询状况与数据函数一览</h3><h4 id="查询动态数组是否为空函数"><a href="#查询动态数组是否为空函数" class="headerlink" title="查询动态数组是否为空函数"></a>查询动态数组是否为空函数</h4><p>​        呃，最简单了哈哈：不过注意，在C89的时候还没有布尔类型！我们需要自己手搓一个：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;Mybool defined&#x2F;&#x2F;typedef enum _bool_ &#123;True &#x3D; 1,False &#x3D; 0&#125;Bool;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        用起来咯！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; this is used in judging whether the dynamic array is empty&#x2F;&#x2F; use like this:&#x2F;&#x2F; isEmpty_InDynamicArray(dyarr)&#x2F;&#x2F;Bool isEmpty_InDynamicArray(DynamicArray*dyarr) &#123;if (!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (dyarr-&gt;current_size&#x3D;&#x3D;0)return True;return False;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查询特定元素是否存在"><a href="#查询特定元素是否存在" class="headerlink" title="查询特定元素是否存在"></a>查询特定元素是否存在</h4><p>​        咳咳，难度来了：对于任意的数据，我们怎么知道他们符不符合要求：相等呢？嘛！这个简单，用户决定嘛！</p><p>​        还是一样，我们统一一个函数指针：其返回值类型是专门用来标记是否存在的：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef unsigned int Is_Used_Compared_Int;&#x2F;&#x2F;返回类型<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef Is_Used_Compared_Int(*LocateFunc)(void*, void*);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        这下函数原型好说了！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">DynamicArrayFunctionStatues isLocateinDyarr(DynamicArray* dyarr,void*data,LocateFuncuser_func)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        老老老样子，判判判判断！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (!user_func)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (!data)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>遍历一下咯！不过为了提高程序可阅读性质：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;this type of int is specifically used in Returning Find Or Unfind.&#x2F;&#x2F;Recommmend to be used as a nickname:)&#x2F;&#x2F;Can use Find or Unfind to return the result&#x2F;&#x2F;typedef enum _DynamicArray_isFind_ &#123;Find&#x3D; 1,Unfind&#x3D; -1&#125;DynamicArray_isFind;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">for (int i &#x3D; 0; i &lt; dyarr-&gt;current_size; i++)&#123;if (user_func(        &#x2F;&#x2F;check the Ith one        (char*)dyarr-&gt;DataPiece +        i * dyarr-&gt;Single_Data_size,         data    )&#x2F;&#x2F;if found return Find)&#123;return Find;&#125;&#125;return Unfind;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="返回第一次遇到的位置"><a href="#返回第一次遇到的位置" class="headerlink" title="返回第一次遇到的位置"></a>返回第一次遇到的位置</h4><p>​        跟上面很类似捏：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">DynamicArrayFunctionStatues returnAElembyPos_inDyarr(DynamicArray*dyarr, void*data, LocateFuncuser_func) &#123;if (!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (!user_func)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (!data)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;for (int i &#x3D; 0; i &lt; dyarr-&gt;current_size; i++)&#123;if ( &#x2F;&#x2F;check the Ith one            user_func            (            (char*)dyarr-&gt;DataPiece + i * dyarr-&gt;Single_Data_size,            data            )        )&#123;&#x2F;&#x2F; if found return i(the position)return i;&#125;&#125;return Unfind;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="存储位置的动态数组及其API"><a href="#存储位置的动态数组及其API" class="headerlink" title="存储位置的动态数组及其API"></a>存储位置的动态数组及其API</h4><p>​        这个是为了下面做铺垫！原理一致，只展现API！</p><h6 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h6><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct _Dyarrposarr_ &#123;int* posSpace;size_t pos_size;&#125;Position_Stored_Dynamic_ArrayFordyarr;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="更好的打印开关枚举定义："><a href="#更好的打印开关枚举定义：" class="headerlink" title="更好的打印开关枚举定义："></a>更好的打印开关枚举定义：</h6><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;Want a better Print to beutify your control table? try this one&#x2F;&#x2F;typedef enum _BetterPrintSwitch_for_pos_dyarr_ &#123;PSDA_dyarr_OPEN &#x3D; 1,PSDA_dyarr_CLOSE &#x3D; 0&#125;BetterPrintSwitch_for_pos_dyarr;&#x2F;&#x2F;can use this type when indicating the type&#x2F;&#x2F;typedef unsigned int BetterPrintfor_PosDyarr;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="API-1：创造一个存储位置的动态数组"><a href="#API-1：创造一个存储位置的动态数组" class="headerlink" title="API 1：创造一个存储位置的动态数组"></a>API 1：创造一个存储位置的动态数组</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;About Position_Stored_Dynamic_Array_Func&#x2F;&#x2F;Create A Position_Stored_Dynamic_Array! Can init it in this way:&#x2F;&#x2F;&gt;&gt;Position_Stored_Dynamic_ArrayFordyarr* Name&#x3D;Init_A_Postion_Stored_Dynamic_ArrayFordyarr();&#x2F;&#x2F;Position_Stored_Dynamic_ArrayFordyarr* Init_A_Postion_Stored_Dynamic_ArrayFordyarr()&#123;Position_Stored_Dynamic_ArrayFordyarr* pro_usable_space         &#x3D;         MALLOCDYARR(Position_Stored_Dynamic_ArrayFordyarr, 1);if (!pro_usable_space)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;  pro_usable_space-&gt;posSpace &#x3D; NULL;pro_usable_space-&gt;pos_size &#x3D; 0;return pro_usable_space;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="API-2：打印所有的位置："><a href="#API-2：打印所有的位置：" class="headerlink" title="API 2：打印所有的位置："></a>API 2：打印所有的位置：</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;About Positions_Stored_Dynamic_Array&#x2F;&#x2F;this function is aimed to output a series of locations that is stored in the pos&#x2F;&#x2F;&#x2F;&#x2F;Use PSDA_dyarr_OPEN to have a better shown ,else use PSDA_dyarr_CLOSE&#x2F;&#x2F;DynamicArrayFunctionStatues Show_All_Locations_In_PSDAfor_dyarr(Position_Stored_Dynamic_ArrayFordyarr*posarr,BetterPrintfor_PosDyarr   Whether_Better_Print)&#123;if (!posarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (Whether_Better_Print &#x3D;&#x3D; PSDA_dyarr_OPEN)printf(&quot;\nPositions are shown! :\n&quot;);for (int i &#x3D; 0; i &lt; posarr-&gt;pos_size; i++)printf(&quot;%u &quot;, posarr-&gt;posSpace[i]);if (Whether_Better_Print &#x3D;&#x3D; PSDA_dyarr_OPEN)printf(&quot;\nFinish Printing!\n&quot;);return DynamicArray_Normal;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="API-3：推入一个位置"><a href="#API-3：推入一个位置" class="headerlink" title="API 3：推入一个位置"></a>API 3：推入一个位置</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;About Positions_Stored_Dynamic_Array&#x2F;&#x2F;this function is aimed to push back a position into the Position_Stored_Dynamic_ArrayFordyarr&#x2F;&#x2F;DynamicArrayFunctionStatues Push_back_a_locations_in_PSDA_dyarr(Position_Stored_Dynamic_ArrayFordyarr*posarr, intpos_acquired)&#123;int* pro_usable_space &#x3D; (int*)realloc(posarr-&gt;posSpace, sizeof(int) * (posarr-&gt;pos_size + 1));if (!pro_usable_space)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;posarr-&gt;posSpace &#x3D; pro_usable_space;posarr-&gt;posSpace[posarr-&gt;pos_size] &#x3D; pos_acquired;posarr-&gt;pos_size++;return DynamicArray_Normal;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="API4：统计个数"><a href="#API4：统计个数" class="headerlink" title="API4：统计个数"></a>API4：统计个数</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;About Positions_Stored_Dynamic_Array&#x2F;&#x2F;this function is aimed to return the number of locations&#x2F;&#x2F;Use PSDA_dyarr_OPEN to have a better shown ,else use PSDA_dyarr_CLOSE&#x2F;&#x2F;size_t Get_pos_size_From_PSDA_for_dyarr(Position_Stored_Dynamic_ArrayFordyarr*posarr,BetterPrintfor_PosDyarrWhether_Shown_Print )&#123;if (!posarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (Whether_Shown_Print &#x3D;&#x3D; PSDA_dyarr_OPEN)printf(&quot;\nCurrent targeted data&#39;s total num is:%u!\n&quot;,posarr-&gt;pos_size);return posarr-&gt;pos_size;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="API-5：销毁一个存储位置的动态数组"><a href="#API-5：销毁一个存储位置的动态数组" class="headerlink" title="API 5：销毁一个存储位置的动态数组"></a>API 5：销毁一个存储位置的动态数组</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;About Positions_Stored_Dynamic_Array&#x2F;&#x2F;Erase a dynamic Array when donot using it!&#x2F;&#x2F;DynamicArrayFunctionStatues DesTroy_A_PSDA_for_dyarr(Position_Stored_Dynamic_ArrayFordyarr*pointer_to_wishedfreeposarr)&#123;if (!pointer_to_wishedfreeposarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_Invalid_Free);&#125;free(pointer_to_wishedfreeposarr-&gt;posSpace);free(pointer_to_wishedfreeposarr);pointer_to_wishedfreeposarr &#x3D; NULL;return DynamicArray_Normal;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="API-6：返回指定位置的标记位置"><a href="#API-6：返回指定位置的标记位置" class="headerlink" title="API 6：返回指定位置的标记位置"></a>API 6：返回指定位置的标记位置</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;About Positions_Stored_Dynamic_Array&#x2F;&#x2F;return a pos that is targeted!&#x2F;&#x2F;DynamicArrayFunctionStatues getPosbyPosinPSDA(Position_Stored_Dynamic_ArrayFordyarr*getter,size_t pos) &#123;if (!getter) &#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_Invalid_Free);&#125;if (pos &gt; getter-&gt;pos_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;for (int i &#x3D; 0; i &lt; pos; i++)return (char*)getter-&gt;posSpace + i * sizeof(size_t);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        这些API很简单，我不阐述原理了！</p><h4 id="返回多个位置函数"><a href="#返回多个位置函数" class="headerlink" title="返回多个位置函数"></a>返回多个位置函数</h4><p>​        返回一个简单，返回多个怎么办？存储位置的动态数组嘛！不过，这个是只记载位置的：那就好说了！</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">Position_Stored_Dynamic_ArrayFordyarr* returnABunchofData_inDyarr(DynamicArray*dyarr, Position_Stored_Dynamic_ArrayFordyarr*posArr, void*data, LocateFuncuser_func)&#123;if (!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (!user_func)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (!data)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;for (int i &#x3D; 0; i &lt; dyarr-&gt;current_size; i++)&#123;for (int i &#x3D; 0; i &lt; dyarr-&gt;current_size; i++)&#123;if (                (*user_func)(                    data,                     (char*)dyarr-&gt;DataPiece + i * dyarr-&gt;Single_Data_size)            )&#123;                &#x2F;&#x2F;类似于return i，这次往PSDA里return！Push_back_a_locations_in_PSDA_dyarr(posArr，i)&#125;&#125;if (posArr-&gt;pos_size!&#x3D;0)return posArr;return Unfind;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="交换于排序函数系列"><a href="#交换于排序函数系列" class="headerlink" title="交换于排序函数系列"></a>交换于排序函数系列</h3><p>​        我们的排序只涉及冒泡排序！</p><h4 id="交换函数"><a href="#交换函数" class="headerlink" title="交换函数"></a>交换函数</h4><p>​        回忆一下基本的交换方法：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void swapInt(int* e1, int*e2)&#123;    int temp &#x3D; *e1 ;    *e1 &#x3D; *e2;    *e2 &#x3D; temp;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        基于此：我们还是一样的仿照设计出函数原型：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">DynamicArrayFunctionStatues swapData_in_DynamicArray(DynamicArray*dyarr, size_tpos1, size_tpos2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>检查：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">if (!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (pos1&lt;0 || pos1&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;if (pos2&lt;0 || pos2&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这一次，我们的交换使用memcpy（memmove都可以）(为了演示我交叉使用了)</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;准备空间char* swapbit &#x3D; (char*)malloc(dyarr-&gt;Single_Data_size);if(!swapbit)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;&#x2F;&#x2F; int temp &#x3D; *e1 ;memcpy(swapbit,(char*)dyarr-&gt;DataPiece + pos1 * dyarr-&gt;Single_Data_size,dyarr-&gt;Single_Data_size);&#x2F;&#x2F;*e1 &#x3D; *e2;memmove((char*)dyarr-&gt;DataPiece + pos1 * dyarr-&gt;Single_Data_size,(char*)dyarr-&gt;DataPiece + pos2 * dyarr-&gt;Single_Data_size,dyarr-&gt;Single_Data_size);&#x2F;&#x2F; *e2 &#x3D; temp;memcpy((char*)dyarr-&gt;DataPiece + pos2 * dyarr-&gt;Single_Data_size,swapbit,dyarr-&gt;Single_Data_size);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        别忘了释放空间：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">free(swapbit);return DynamicArray_Normal;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>整合看看：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; this is used in swap data&#x2F;&#x2F; use like this:&#x2F;&#x2F; swapData_in_DynamicArray(dyarr,pos1,pos2)&#x2F;&#x2F;DynamicArrayFunctionStatues swapData_in_DynamicArray(DynamicArray*dyarr, size_tpos1, size_tpos2)&#123;if (!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (pos1&lt;0 || pos1&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;if (pos2&lt;0 || pos2&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;char* swapbit &#x3D; (char*)malloc(dyarr-&gt;Single_Data_size);if(!swapbit)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;memcpy(swapbit,(char*)dyarr-&gt;DataPiece + pos1 * dyarr-&gt;Single_Data_size,dyarr-&gt;Single_Data_size);memmove((char*)dyarr-&gt;DataPiece + pos1 * dyarr-&gt;Single_Data_size,(char*)dyarr-&gt;DataPiece + pos2 * dyarr-&gt;Single_Data_size,dyarr-&gt;Single_Data_size);memcpy((char*)dyarr-&gt;DataPiece + pos2 * dyarr-&gt;Single_Data_size,swapbit,dyarr-&gt;Single_Data_size);free(swapbit);return DynamicArray_Normal;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="冒泡排序交换函数："><a href="#冒泡排序交换函数：" class="headerlink" title="冒泡排序交换函数："></a>冒泡排序交换函数：</h4><p>​        仿照经典冒泡排序。。。</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">void bubbleSort(int* arr, int arr_size)&#123;    if(arr&#x3D;&#x3D;NULL)&#123;        return;    &#125;           if(arr_size&lt;&#x3D;1)&#123;        return;    &#125;        for(int i&#x3D;0; i&lt;arr_size-1; i++)    &#123;        for(int j &#x3D; 0;j&lt;arr_size-i-1; j++)        &#123;            if(arr[j]&gt; arr[j+1])            &#123;                swap(arr[j],arr[j+1]);&#x2F;&#x2F;swap不实现了，上面就有            &#125;        &#125;    &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; sadly that is bubblesort :(&#x2F;&#x2F; I haven&#39;t make it in quicksort as it was toooooooooooooooooooooo tiring lol&#x2F;&#x2F; use like this:&#x2F;&#x2F; sort_In_Dynamic_Array(dyarr,comparision_funcuntional_pointer)&#x2F;&#x2F;DynamicArrayFunctionStatues sort_In_Dynamic_Array(DynamicArray*dyarr,CompareFunccompfunc) &#123;    &#x2F;&#x2F;检查if (!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (!compfunc)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;for (int i &#x3D; 0; i &lt; dyarr-&gt;current_size-1; i++)&#123;for (int j &#x3D; 0; j &lt; dyarr-&gt;current_size - i-1; j++)&#123;if (&#x2F;&#x2F;if(arr[j]&gt; arr[j+1])compfunc                ((char*)dyarr-&gt;DataPiece + j * dyarr-&gt;Single_Data_size,(char*)dyarr-&gt;DataPiece + (j + 1) * dyarr-&gt;Single_Data_size))                &#x2F;&#x2F;swap(arr[j],arr[j+1])swapData_in_DynamicArray(dyarr, j, j + 1);&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="交换于排序函数系列一览"><a href="#交换于排序函数系列一览" class="headerlink" title="交换于排序函数系列一览"></a>交换于排序函数系列一览</h4><p>OK，集合一下</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; this is used in swap data&#x2F;&#x2F; use like this:&#x2F;&#x2F; swapData_in_DynamicArray(dyarr,pos1,pos2)&#x2F;&#x2F;DynamicArrayFunctionStatues swapData_in_DynamicArray(DynamicArray*dyarr, size_tpos1, size_tpos2)&#123;if (!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (pos1&lt;0 || pos1&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;if (pos2&lt;0 || pos2&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;char* swapbit &#x3D; (char*)malloc(dyarr-&gt;Single_Data_size);if(!swapbit)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;memcpy(swapbit,(char*)dyarr-&gt;DataPiece + pos1 * dyarr-&gt;Single_Data_size,dyarr-&gt;Single_Data_size);memmove((char*)dyarr-&gt;DataPiece + pos1 * dyarr-&gt;Single_Data_size,(char*)dyarr-&gt;DataPiece + pos2 * dyarr-&gt;Single_Data_size,dyarr-&gt;Single_Data_size);memcpy((char*)dyarr-&gt;DataPiece + pos2 * dyarr-&gt;Single_Data_size,swapbit,dyarr-&gt;Single_Data_size);free(swapbit);return DynamicArray_Normal;&#125;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; sadly that is bubblesort :(&#x2F;&#x2F; I haven&#39;t make it in quicksort as it was toooooooooooooooooooooo tiring lol&#x2F;&#x2F; use like this:&#x2F;&#x2F; sort_In_Dynamic_Array(dyarr,comparision_funcuntional_pointer)&#x2F;&#x2F;DynamicArrayFunctionStatues sort_In_Dynamic_Array(DynamicArray*dyarr,CompareFunccompfunc) &#123;if (!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (!compfunc)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;for (int i &#x3D; 0; i &lt; dyarr-&gt;current_size-1; i++)&#123;for (int j &#x3D; 0; j &lt; dyarr-&gt;current_size - i-1; j++)&#123;if (compfunc((char*)dyarr-&gt;DataPiece + j * dyarr-&gt;Single_Data_size,(char*)dyarr-&gt;DataPiece + (j + 1) * dyarr-&gt;Single_Data_size))swapData_in_DynamicArray(dyarr, j, j + 1);&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试一下子咯！"><a href="#测试一下子咯！" class="headerlink" title="测试一下子咯！"></a>测试一下子咯！</h3><p>测试代码：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define _CRT_SECURE_NO_WARNINGS 1#include&quot;standard_dynamic_array.h&quot;MyPrint print(int* e1) &#123;printf(&quot;%d &quot;, *e1);&#125;Do_Specific_Change dochange(int* e1) &#123;*e1 &#x3D; *e1 + 1;&#125;LocateFunc loc(int* e1, int* e2) &#123;if (*e1 &#x3D;&#x3D; *e2) &#123;return Find;&#125;return Unfind;&#125;int main()&#123;int data1 &#x3D; 10;    &#x2F;&#x2F;test InitingDynamicArray* testDyarr1 &#x3D; Init_A_DynamicArray(10, Dyarr_SIGINT);    &#x2F;&#x2F;test a Sigdata pushed:Push_Back_Into_A_Dynamic_Array(testDyarr1, &amp;data1);Print_ALL_Data_In_A_Dynamic_Array(testDyarr1, print, Dyarr_OPEN);    &#x2F;&#x2F;test pushing the same dataPush_back_Same_data_Into_A_Dynamic_Array(testDyarr1, &amp;data1, 10, Dyarr_SIGINT);Print_ALL_Data_In_A_Dynamic_Array(testDyarr1, print, Dyarr_OPEN);    &#x2F;&#x2F;Test ClearingClear_A_Dynamic_Array(testDyarr1);Print_ALL_Data_In_A_Dynamic_Array(testDyarr1, print, Dyarr_OPEN);    &#x2F;&#x2F;test updateint data2[10] &#x3D; &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;DynamicArray* test2&#x3D;Updata_A_Static_Array_To_Dynamic_Array(data2, Dyarr_SIGINT, 10);Print_ALL_Data_In_A_Dynamic_Array(test2, print, Dyarr_OPEN);    &#x2F;&#x2F;test copy:DynamicArray* copyone &#x3D; Init_A_DynamicArray_by_CopyADyarr(test2);Print_ALL_Data_In_A_Dynamic_Array(copyone, print, Dyarr_OPEN);    &#x2F;&#x2F;test insertprintf(&quot;before:&quot;);Print_ALL_Data_In_A_Dynamic_Array(copyone, print, Dyarr_OPEN);Insert_Into_A_Dynamic_Array(copyone, &amp;data1, 1);printf(&quot;after:&quot;);Print_ALL_Data_In_A_Dynamic_Array(copyone, print, Dyarr_OPEN);    &#x2F;&#x2F;test insert bunchprintf(&quot;before:&quot;);Print_ALL_Data_In_A_Dynamic_Array(copyone, print, Dyarr_OPEN);Insert_Some_Data_Into_A_Dynamic_Array(copyone, 1, data2, 10, Dyarr_SIGINT);printf(&quot;after:&quot;);Print_ALL_Data_In_A_Dynamic_Array(copyone, print, Dyarr_OPEN);    &#x2F;&#x2F;test Erasing sigoneprintf(&quot;before:&quot;);Print_ALL_Data_In_A_Dynamic_Array(copyone, print, Dyarr_OPEN);Delete_A_Specific_Data_From_the_DynamicArray(copyone, 1);printf(&quot;after:&quot;);Print_ALL_Data_In_A_Dynamic_Array(copyone, print, Dyarr_OPEN);    &#x2F;&#x2F;test Erasing bunch oneprintf(&quot;before:&quot;);Print_ALL_Data_In_A_Dynamic_Array(copyone, print, Dyarr_OPEN);Delete_Some_Specific_Data_From_the_DynamicArray(copyone,1,10);printf(&quot;after:&quot;);Print_ALL_Data_In_A_Dynamic_Array(copyone, print, Dyarr_OPEN);    &#x2F;&#x2F;test Do changeprintf(&quot;before:&quot;);Print_ALL_Data_In_A_Dynamic_Array(copyone, print, Dyarr_OPEN);Do_Specific_Change_To_Specific_Data(copyone,dochange,1);printf(&quot;after:&quot;);Print_ALL_Data_In_A_Dynamic_Array(copyone, print, Dyarr_OPEN);printf(&quot;before:&quot;);Print_ALL_Data_In_A_Dynamic_Array(copyone, print, Dyarr_OPEN);Do_Specific_Change_To_All_Data(copyone, dochange);printf(&quot;after:&quot;);Print_ALL_Data_In_A_Dynamic_Array(copyone, print, Dyarr_OPEN);    &#x2F;&#x2F;test location:DynamicArray* test3 &#x3D; Updata_A_Static_Array_To_Dynamic_Array(data2, Dyarr_SIGINT, 10);if (isLocateinDyarr(test3, &amp;data2[2], loc)) &#123;printf(&quot;\nI have found it!\n&quot;);&#125;int where &#x3D; returnAElembyPos_inDyarr(test3, &amp;data2[2], loc);printf(&quot;\nIn dyarr the %d place\n&quot;, where);    &#x2F;&#x2F;test Position Stored Dynamic Array and returnBunchClear_A_Dynamic_Array(test3);Push_back_Same_data_Into_A_Dynamic_Array(test3, &amp;data2[2], 10, Dyarr_SIGINT);Position_Stored_Dynamic_ArrayFordyarr* p1 &#x3D; Init_A_Postion_Stored_Dynamic_ArrayFordyarr();returnABunchofData_inDyarr(test3, p1, &amp;data2[2], loc);Print_ALL_Data_In_A_Dynamic_Array(test3, print, Dyarr_OPEN);Show_All_Locations_In_PSDAfor_dyarr(p1, PSDA_dyarr_OPEN);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看看效果：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">4Start Printing10Finish PrintingStart Printing10 10 10 10 10 10 10 10 10 10 10Finish PrintingStart PrintingFinish PrintingStart Printing1 2 3 4 5 6 7 8 9 10Finish PrintingStart Printing1 2 3 4 5 6 7 8 9 10Finish Printingbefore:Start Printing1 2 3 4 5 6 7 8 9 10Finish Printingafter:Start Printing1 10 2 3 4 5 6 7 8 9 10Finish Printingbefore:Start Printing1 10 2 3 4 5 6 7 8 9 10Finish Printingafter:Start Printing1 1 2 3 4 5 6 7 8 9 10 10 2 3 4 5 6 7 8 9 10Finish Printingbefore:Start Printing1 1 2 3 4 5 6 7 8 9 10 10 2 3 4 5 6 7 8 9 10Finish Printingafter:Start Printing1 2 3 4 5 6 7 8 9 10 10 2 3 4 5 6 7 8 9 10Finish Printingbefore:Start Printing1 2 3 4 5 6 7 8 9 10 10 2 3 4 5 6 7 8 9 10Finish Printingafter:Start Printing1 2 3 4 5 6 7 8 9 10Finish Printingbefore:Start Printing1 2 3 4 5 6 7 8 9 10Finish Printingafter:Start Printing1 3 3 4 5 6 7 8 9 10Finish Printingbefore:Start Printing1 3 3 4 5 6 7 8 9 10Finish Printingafter:Start Printing2 4 4 5 6 7 8 9 10 11Finish PrintingI have found it!In dyarr the 2 placeStart Printing3 3 3 3 3 3 3 3 3 3Finish PrintingPositions are shown! :0 1 2 3 4 5 6 7 8 9Finish Printing!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230207221151700.png" alt="image-20230207221151700"></p>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> MyTinyLibProject </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言数据结构模拟：动态数组（1）头文件+源代码+测试</title>
      <link href="/2023/02/07/C%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A8%A1%E6%8B%9F%EF%BC%9A%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%EF%BC%881%EF%BC%89%E5%A4%B4%E6%96%87%E4%BB%B6-%E6%BA%90%E4%BB%A3%E7%A0%81-%E6%B5%8B%E8%AF%95/"/>
      <url>/2023/02/07/C%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A8%A1%E6%8B%9F%EF%BC%9A%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84%EF%BC%881%EF%BC%89%E5%A4%B4%E6%96%87%E4%BB%B6-%E6%BA%90%E4%BB%A3%E7%A0%81-%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="动态数组（1）源代码阅读-注释"><a href="#动态数组（1）源代码阅读-注释" class="headerlink" title="动态数组（1）源代码阅读+注释"></a>动态数组（1）源代码阅读+注释</h1><h4 id="开个大坑先：后续会补上关于动态数组的API实现的文章和详解，可以先看看源代码（干了很久（大哭））"><a href="#开个大坑先：后续会补上关于动态数组的API实现的文章和详解，可以先看看源代码（干了很久（大哭））" class="headerlink" title="开个大坑先：后续会补上关于动态数组的API实现的文章和详解，可以先看看源代码（干了很久（大哭））"></a>开个大坑先：后续会补上关于动态数组的API实现的文章和详解，可以先看看源代码（干了很久（大哭））</h4><p>​        请注意：使用和调用环境为C语言环境，不！要！用！在！CPP文件里！函数指针返回逻辑不一样lol</p><p>​        下载源文件和MD文件（有代码高亮）可以去我的GitHub上下载！</p><h5 id="头文件一览："><a href="#头文件一览：" class="headerlink" title="头文件一览："></a>头文件一览：</h5><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define _CRT_SECURE_NO_WARNINGS 1#defineOPENUPPOSARR 1#define OPENUPDEFAULTSIZE 1#defineQUICKMALLOC 1&#x2F;&#x2F;(General Version)#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;string.h&gt;&#x2F;&#x2F;Error Code Meaning&#x2F;&#x2F;Program Normally run till the end return NORMAL as 0&#x2F;&#x2F;When Error in mallocing Space the program return 1&#x2F;&#x2F;when inputing a NULL we returns -1&#x2F;&#x2F;when inputing a invalid input we returns -2&#x2F;&#x2F;Locations UnFind we returns -3 &#x2F;&#x2F;typedef enum _DynamicFunctionStatues_ &#123;DynamicArray_Normal &#x3D; 0,DynamicArray_ERROR_IN_MALLOCING_SPACE &#x3D; 1,DynamicArray_NULL_INPUT &#x3D; -1,DynamicArray_Invalid_Input &#x3D; -2,DynamicArray_UnFind &#x3D; -3,DynamicArray_Invalid_Free &#x3D; -4&#125;DynamicArrayFunctionStatues;&#x2F;&#x2F;Mybool defined&#x2F;&#x2F;typedef enum _bool_ &#123;True &#x3D; 1,False &#x3D; 0&#125;Bool;#define SHOW_ERROR_DynamicArray_NULL_INPUT printf(&quot;\nSorry! Your input NULL!\n&quot;)#define SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE printf(&quot;\nSorry!Failed to malloc space for your data\n&quot;)#define SHOW_ERROR_DynamicArray_Invalid_Input printf(&quot;\nYour input invalid, reject to run functions\n&quot;)#define SHOW_ERROR_DynamicArray_UnFind printf(&quot;\nPositions unfind!\n&quot;)#define SHOW_ERROR_DynamicArray_Invalid_Free printf(&quot;\nFree the invalid space,reject to run the functions\n&quot;)&#x2F;&#x2F;this type of int is specifically used in Returning Find Or Unfind.&#x2F;&#x2F;Recommmend to be used as a nickname:)&#x2F;&#x2F;Can use Find or Unfind to return the result&#x2F;&#x2F;typedef enum _DynamicArray_isFind_ &#123;Find &#x3D; 1,Unfind &#x3D; 0&#125;DynamicArray_isFind;&#x2F;&#x2F;A switch that used in better Print in Dynamic Array!&#x2F;&#x2F;Often use OPEN to beautify the control table&#x2F;&#x2F;typedef enum _BetterPrintSwitch_for_dyarr_ &#123;Dyarr_OPEN &#x3D; 1,Dyarr_CLOSE &#x3D; 0&#125;BetterPrintSwitch_for_dyarr;&#x2F;&#x2F;Main Definitions about DynamicArray&#x2F;&#x2F;When Programing , not recommend to Change the data directly! &#x2F;&#x2F;typedef struct _DynamicArray_ &#123;void* DataPiece;size_t current_size;size_t total_usable_size;size_t Single_Data_size;&#125;DynamicArray;&#x2F;&#x2F;--------------------------------Default_size_Type--------------------------------------------&#x2F;&#x2F;These abstractions are used to reduce the input&#x2F;&#x2F;used as Dyarr_Default_TYPE(type_number) to replace the code:sizeof(Typename)*type_number#if OPENUPDEFAULTSIZE&#x2F;&#x2F;Single Type size&#x2F;&#x2F;#define Dyarr_SIGINT sizeof(int)#define Dyarr_SIGCHAR sizeof(char)#define Dyarr_SIGFLOAT sizeof(float)#define Dyarr_SIGDOUBLE sizeof(double)#define Dyarr_SIG(dataType) sizeof(dataType)&#x2F;&#x2F;Mutiply type size&#x2F;&#x2F;#define Dyarr_INT_SIZE(X) sizeof(int)*X#define Dyarr_CHAR_SIZE(X) sizeof(char)*X#define Dyarr_FLOAT_SIZE(X) sizeof(float)*X#define Dyarr_DOUBLE_SIZE(X) sizeof(double)*X#define Dyarr_TYPE_SIZE(dataType,X) sizeof(dataType)*X#endif&#x2F;&#x2F;-------------------------------------------QuickMalloc----------------------------------------&#x2F;&#x2F;As the name goes lol&#x2F;&#x2F;#if QUICKMALLOC #define Dyarr_DEFAULT_MALLOC 5#define MALLOCDYARR(datatype,data_num) (datatype*)malloc(sizeof(datatype)*data_num)#endif&#x2F;&#x2F;----------------------------------------STD_FUNC_AND_INT_TYPE----------------------------------&#x2F;&#x2F; Return type of compared functions&#x2F;&#x2F;typedef unsigned int Is_Used_Compared_Int;&#x2F;&#x2F; the pointer type of Print !&#x2F;&#x2F; When Printing , type :&#x2F;&#x2F; MyPrint user_print_function_name(datatype* e1, datatype* e2)&#x2F;&#x2F; &#123;&#x2F;&#x2F;print in your way for your data!&#x2F;&#x2F; &#125;&#x2F;&#x2F;typedef void(*MyPrint)(void*);&#x2F;&#x2F; the pointer type of Making change for the data that has been locates in the Dynamic Array!&#x2F;&#x2F; When want to make some change, type like this:&#x2F;&#x2F; Do_Specific_Change user_dochange_function_name(datatype* e1, datatype* e2)&#x2F;&#x2F;&#123;&#x2F;&#x2F;do some change here for your data!&#x2F;&#x2F;&#125;&#x2F;&#x2F;typedef void* (*Do_Specific_Change)(void*);&#x2F;&#x2F; the pointer type of using when comparing for your data&#x2F;&#x2F; When want to make a comparisons, type like this:&#x2F;&#x2F; CompareFunc user_comp_function_name(datatype* e1, datatype* e2)&#x2F;&#x2F;&#123;&#x2F;&#x2F;return &#x2F;&#x2F;the wishing compare!&#x2F;&#x2F;&#x2F;&#x2F;&#125;&#x2F;&#x2F;typedef Is_Used_Compared_Int(*CompareFunc)(void*, void*);&#x2F;&#x2F; the pointer type of using when checking iflocated for your data&#x2F;&#x2F; When want to make a comparisons, type like this:&#x2F;&#x2F; LocateFunc user_loc_function_name(datatype* e1, datatype* e2)&#x2F;&#x2F;&#123;&#x2F;&#x2F;return data1&#x3D;&#x3D;data2(define by yourself! if complicated, just return Find or unfind to show whether is found)&#x2F;&#x2F;&#125;&#x2F;&#x2F;typedef Is_Used_Compared_Int(*LocateFunc)(void*, void*);&#x2F;&#x2F;-----------------------Position_Stored_Dynamic_Array_For_Dyarr---------------------------------#if OPENUPPOSARR&#x2F;&#x2F;Main data structure!&#x2F;&#x2F;Used in returning multitude locations&#x2F;&#x2F;typedef struct _Dyarrposarr_ &#123;int* posSpace;size_t pos_size;&#125;Position_Stored_Dynamic_ArrayFordyarr;&#x2F;&#x2F;Want a better Print to beutify your control table? try this one&#x2F;&#x2F;typedef enum _BetterPrintSwitch_for_pos_dyarr_ &#123;PSDA_dyarr_OPEN &#x3D; 1,PSDA_dyarr_CLOSE &#x3D; 0&#125;BetterPrintSwitch_for_pos_dyarr;&#x2F;&#x2F;can use this type when indicating the type&#x2F;&#x2F;typedef unsigned int BetterPrintfor_PosDyarr;&#x2F;&#x2F;About Position_Stored_Dynamic_Array_Func&#x2F;&#x2F;Create A Position_Stored_Dynamic_Array! Can init it in this way:&#x2F;&#x2F;&gt;&gt;Position_Stored_Dynamic_ArrayFordyarr* Name&#x3D;Init_A_Postion_Stored_Dynamic_ArrayFordyarr();&#x2F;&#x2F;Position_Stored_Dynamic_ArrayFordyarr* Init_A_Postion_Stored_Dynamic_ArrayFordyarr();&#x2F;&#x2F;About Positions_Stored_Dynamic_Array&#x2F;&#x2F;this function is aimed to output a series of locations that is stored in the pos&#x2F;&#x2F;&#x2F;&#x2F;Use PSDA_dyarr_OPEN to have a better shown ,else use PSDA_dyarr_CLOSE&#x2F;&#x2F;DynamicArrayFunctionStatues Show_All_Locations_In_PSDAfor_dyarr(Position_Stored_Dynamic_ArrayFordyarr* posarr,BetterPrintfor_PosDyarrWhether_Better_Print);&#x2F;&#x2F;About Positions_Stored_Dynamic_Array&#x2F;&#x2F;this function is aimed to push back a position into the Position_Stored_Dynamic_ArrayFordyarr&#x2F;&#x2F;DynamicArrayFunctionStatues Push_back_a_locations_in_PSDA_dyarr(Position_Stored_Dynamic_ArrayFordyarr* posarr,intpos_acquired);&#x2F;&#x2F;About Positions_Stored_Dynamic_Array&#x2F;&#x2F;this function is aimed to return the number of locations&#x2F;&#x2F;Use PSDA_dyarr_OPEN to have a better shown ,else use PSDA_dyarr_CLOSE&#x2F;&#x2F;size_t Get_pos_size_From_PSDA_for_dyarr(Position_Stored_Dynamic_ArrayFordyarr* posarr,BetterPrintfor_PosDyarrWhether_Shown_Print);&#x2F;&#x2F;About Positions_Stored_Dynamic_Array&#x2F;&#x2F;Erase a dynamic Array when donot using it!&#x2F;&#x2F;DynamicArrayFunctionStatues DesTroy_A_PSDA_for_dyarr(Position_Stored_Dynamic_ArrayFordyarr* pointer_to_wishedfreeposarr);&#x2F;&#x2F;About Positions_Stored_Dynamic_Array&#x2F;&#x2F;return a pos that is targeted!&#x2F;&#x2F;void* getPosbyPosinPSDA(Position_Stored_Dynamic_ArrayFordyarr* getter,size_tpos);#endif&#x2F;&#x2F;----------------------------------DynamicArray----------------------------------------------------------------------&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;A Properway to init a default and empty Dynamic Array&#x2F;&#x2F;Use like this: DynamicArray* Dyarr &#x3D; Init_A_DynamicArray(expected_number, datasize)&#x2F;&#x2F;DynamicArray* Init_A_DynamicArray(size_texpected_number,size_tdatasize);&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;Copied up a Dyarr!&#x2F;&#x2F;Use like this: DynamicArray* copied_one &#x3D; Init_A_DynamicArray_by_CopyADyarr(be_copied)&#x2F;&#x2F;DynamicArray* Init_A_DynamicArray_by_CopyADyarr(DynamicArray* dyarr_copied);&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;An update! used to transform a static array to DynamicArray&#x2F;&#x2F;use like this:  &#x2F;&#x2F;DynamicArray* update_arr &#x3D; Updata_A_Static_Array_To_Dynamic_Array(&#x2F;&#x2F;static arr,&#x2F;&#x2F;sizeof(data),&#x2F;&#x2F;how_many_data_are_there_in_the_static_array)&#x2F;&#x2F;DynamicArray* Updata_A_Static_Array_To_Dynamic_Array(void* data,size_tdatasize,size_tdatanum);&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;Push back a data into the Dynamic Array&#x2F;&#x2F;Use like this: Push_Back_Into_A_Dynamic_Array(dyarr,data)&#x2F;&#x2F;DynamicArrayFunctionStatues Push_Back_Into_A_Dynamic_Array(DynamicArray*dyarr,void*data,size_tdatasize);&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;Push back a lot of data that has a organization that has all the same data&#x2F;&#x2F;Use like this: &#x2F;&#x2F;Push_back_Same_data_Into_A_Dynamic_Array(dyarr,data,the_time_data_repeated,sizeof(data))&#x2F;&#x2F;DynamicArrayFunctionStatues Push_back_Same_data_Into_A_Dynamic_Array(DynamicArray* dyarr,void* data,size_tn_repeat,size_tdatasize);&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;Push back a lot of data that has a organization that has a organiztion with static array&#x2F;&#x2F;Use like this: &#x2F;&#x2F;Push_back_Same_data_Into_A_Dynamic_Array(&#x2F;&#x2F;dyarr,&#x2F;&#x2F;data,&#x2F;&#x2F;how_many_data_are_there_in_static_array,&#x2F;&#x2F;sizeof(data))&#x2F;&#x2F;DynamicArrayFunctionStatues Push_Back_Some_data_Into_A_Dynamic_Array(DynamicArray* dyarr,void* data_array,size_tarray_num,size_tpos,size_tdata_inarray_size);&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;Reshape the dynamic array&#x2F;&#x2F;NOT ROCOMMEND TO USE UNLESS YOU ARE CONCIOUS OF WHAT YOU ARE DOING&#x2F;&#x2F;DynamicArrayFunctionStatues Resize_The_Dynamic_Array(DynamicArray* dyarr,size_twished_new_space_size);&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Insert back a data &#x2F;&#x2F; use like this: &#x2F;&#x2F; Insert_Into_A_Dynamic_Array(&#x2F;&#x2F; dyarr, &#x2F;&#x2F; data, &#x2F;&#x2F; where_to_insert,&#x2F;&#x2F;DynamicArrayFunctionStatues Insert_Into_A_Dynamic_Array(DynamicArray* dyarr,void* data,size_tpos);&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;Insert back a lot of data that has a organization that has all the same data&#x2F;&#x2F;Use like this: &#x2F;&#x2F;insert_back_Same_data_Into_A_Dynamic_Array(dyarr,n_repeat,datasize,pos)&#x2F;&#x2F;DynamicArrayFunctionStatues insert_back_Same_data_Into_A_Dynamic_Array(DynamicArray* dyarr,void* data,size_tn_repeat,size_tdatasize,size_tpos);&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;Insert back some data that organized in static array&#x2F;&#x2F;use like this: Insert_Into_A_Dynamic_Array(&#x2F;&#x2F; dyarr, &#x2F;&#x2F; where_to_insert, &#x2F;&#x2F; data, &#x2F;&#x2F; how_many_data_are_there_in_static_array,&#x2F;&#x2F; sizeof(data)&#x2F;&#x2F;)&#x2F;&#x2F;DynamicArrayFunctionStatues Insert_Some_Data_Into_A_Dynamic_Array(DynamicArray* dyarr,size_tpos,void* data_array,size_tarray_num,size_tdata_inarray_size);&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;Append another dynamic Array&#x2F;&#x2F; use like this:&#x2F;&#x2F; AppendByMergeDynamicArray(dyarr_be_appended, exp_append_array)&#x2F;&#x2F;DynamicArrayFunctionStatues AppendByMergeDynamicArray(DynamicArray* dyarr_be_appended,DynamicArray* exp_append_array);&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;Gain a copy of targeted array from the dynamic array&#x2F;&#x2F;use like this&#x2F;&#x2F; type* datawanna &#x3D; Copy_A_Specific_DataFrom_A_Dynamic_Array_bypos(dyarr, datawanna, sizeof(datawanna))&#x2F;&#x2F;void* Copy_A_Specific_DataFrom_A_Dynamic_Array_bypos(DynamicArray* dyarr,size_tpos,void* container,size_tcontainer_size);&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually erase the final element!&#x2F;&#x2F; use like this:&#x2F;&#x2F; Pop_Out_From_A_Dynamic_Array(dyarr)&#x2F;&#x2F;DynamicArrayFunctionStatues Pop_Out_From_A_Dynamic_Array(DynamicArray* dyarr);&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually erase the final element!&#x2F;&#x2F; use like this:&#x2F;&#x2F; Pop_Out_From_A_Dynamic_Array(dyarr)&#x2F;&#x2F;DynamicArrayFunctionStatues Pop_Out_From_A_Dynamic_Array(DynamicArray* dyarr);&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually erase all elements!&#x2F;&#x2F; use like this:&#x2F;&#x2F; Clear_A_Dynamic_Array(dyarr)&#x2F;&#x2F;DynamicArrayFunctionStatues Clear_A_Dynamic_Array(DynamicArray* dyarr);&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually erase all elements! and unable to be used again!&#x2F;&#x2F; use like this:&#x2F;&#x2F; Destroy_A_Dynamic_Array(dyarr)&#x2F;&#x2F;DynamicArrayFunctionStatues Destroy_A_Dynamic_Array(DynamicArray* dyarr);&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually Print All data&#x2F;&#x2F; use like this&#x2F;&#x2F; Print_ALL_Data_In_A_Dynamic_Array(dyarr,user_print_funtional_pointer, Dyarr_OPEN or Dyarr_ClOSE)&#x2F;&#x2F;DynamicArrayFunctionStatues Print_ALL_Data_In_A_Dynamic_Array(DynamicArray* dyarr,MyPrintuser_print,BetterPrintSwitch_for_dyarr whether_better_print);&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually Print a specific data&#x2F;&#x2F; use like this&#x2F;&#x2F;Print_Specific_Data_In_A_Dynamic_Array(dyarr, user_print, pos)&#x2F;&#x2F;DynamicArrayFunctionStatues Print_Specific_Data_In_A_Dynamic_Array(DynamicArray* dyarr,MyPrintuser_print,size_tpos);&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually make some change in all data&#x2F;&#x2F; use like this&#x2F;&#x2F; Do_Specific_Change_To_All_Data(dyarr, user_print, pos)&#x2F;&#x2F;DynamicArrayFunctionStatues Do_Specific_Change_To_All_Data(DynamicArray* dyarr,Do_Specific_Changeuser_change);&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually make some change in a specific data&#x2F;&#x2F; use like this&#x2F;&#x2F; Do_Specific_Change_To_All_Data(dyarr, user_print, pos)&#x2F;&#x2F;DynamicArrayFunctionStatues Do_Specific_Change_To_Specific_Data(DynamicArray* dyarr,Do_Specific_Changeuser_change,size_tpos);&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually erase a specific data by pos&#x2F;&#x2F; use like this&#x2F;&#x2F; Delete_A_Specific_Data_From_the_DynamicArray(dyarr,  pos)&#x2F;&#x2F;DynamicArrayFunctionStatues Delete_A_Specific_Data_From_the_DynamicArray(DynamicArray* dyarr,size_tpos);&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually erase some specific data by pos&#x2F;&#x2F; use like this&#x2F;&#x2F; Delete_A_Specific_Data_From_the_DynamicArray(dyarr, beginpos, endpos)&#x2F;&#x2F;DynamicArrayFunctionStatues Delete_Some_Specific_Data_From_the_DynamicArray(DynamicArray* dyarr,size_tBeginpos,size_tEndpos);&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually erase a specific data by pos&#x2F;&#x2F; use like this&#x2F;&#x2F; Delete_A_Specific_Data_From_the_DynamicArray(dyarr,  pos)&#x2F;&#x2F;DynamicArrayFunctionStatues reverse_Data_In_DynamicArray(DynamicArray* dyarr);&#x2F;&#x2F;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; this is used in judging whether the dynamic array is empty&#x2F;&#x2F; use like this:&#x2F;&#x2F; isEmpty_InDynamicArray(dyarr)&#x2F;&#x2F;Bool isEmpty_InDynamicArray(DynamicArray* dyarr);&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; this is used in swap data&#x2F;&#x2F; use like this:&#x2F;&#x2F; swapData_in_DynamicArray(dyarr,pos1,pos2)&#x2F;&#x2F;DynamicArrayFunctionStatues swapData_in_DynamicArray(DynamicArray* dyarr,size_tpos1,size_tpos2);&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; sadly that is bubblesort :(&#x2F;&#x2F; I haven&#39;t make it in quicksort as it was toooooooooooooooooooooo tiring lol&#x2F;&#x2F; use like this:&#x2F;&#x2F; sort_In_Dynamic_Array(dyarr,comparision_funcuntional_pointer)&#x2F;&#x2F;DynamicArrayFunctionStatues sort_In_Dynamic_Array(DynamicArray* dyarr,CompareFunccompfunc);&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; check if located in the dynamic array&#x2F;&#x2F; use like this:&#x2F;&#x2F; isLocateinDyarr(dyarr, data, comparision_funcuntional_pointer)&#x2F;&#x2F;DynamicArrayFunctionStatues isLocateinDyarr(DynamicArray* dyarr,void* data,LocateFuncuser_func);&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; return the position of data that is targeted &#x2F;&#x2F; use like this:&#x2F;&#x2F; returnAElembyPos_inDyarr(dyarr, data, comparision_funcuntional_pointer)&#x2F;&#x2F;DynamicArrayFunctionStatues returnAElembyPos_inDyarr(DynamicArray* dyarr,void* data,LocateFuncuser_func);&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Using the function when Posarr is enable to use!&#x2F;&#x2F; return a bunch of position of data that is targeted &#x2F;&#x2F; use like this:&#x2F;&#x2F; Position_Stored_Dynamic_ArrayFordyarr* pos &#x3D;r eturnAElembyPos_inDyarr(dyarr, posArr,data, comparision_funcuntional_pointer)&#x2F;&#x2F;#if OPENUPPOSARRPosition_Stored_Dynamic_ArrayFordyarr* returnABunchofData_inDyarr(DynamicArray* dyarr,Position_Stored_Dynamic_ArrayFordyarr* posArr,void* data,LocateFuncuser_func);#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.源文件：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define _CRT_SECURE_NO_WARNINGS 1#defineOPENUPPOSARR 1#define OPENUPDEFAULTSIZE 1#defineQUICKMALLOC 1&#x2F;&#x2F;(General Version)&#x2F;&#x2F;#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;string.h&gt;&#x2F;&#x2F;Error Code Meaning&#x2F;&#x2F;Program Normally run till the end return NORMAL as 0&#x2F;&#x2F;When Error in mallocing Space the program return 1&#x2F;&#x2F;when inputing a NULL we returns -1&#x2F;&#x2F;when inputing a invalid input we returns -2&#x2F;&#x2F;Locations UnFind we returns -3 &#x2F;&#x2F;typedef enum _DynamicFunctionStatues_ &#123;DynamicArray_Normal &#x3D; 0,DynamicArray_ERROR_IN_MALLOCING_SPACE&#x3D;1,DynamicArray_NULL_INPUT&#x3D;-1,DynamicArray_Invalid_Input&#x3D;-2,DynamicArray_UnFind&#x3D;-3,DynamicArray_Invalid_Free&#x3D;-4&#125;DynamicArrayFunctionStatues;&#x2F;&#x2F;Mybool defined&#x2F;&#x2F;typedef enum _bool_ &#123;True &#x3D; 1,False &#x3D; 0&#125;Bool;#define SHOW_ERROR_DynamicArray_NULL_INPUT printf(&quot;\nSorry! Your input NULL!\n&quot;)#define SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE printf(&quot;\nSorry!Failed to malloc space for your data\n&quot;)#define SHOW_ERROR_DynamicArray_Invalid_Input printf(&quot;\nYour input invalid, reject to run functions\n&quot;)#define SHOW_ERROR_DynamicArray_UnFind printf(&quot;\nPositions unfind!\n&quot;)#define SHOW_ERROR_DynamicArray_Invalid_Free printf(&quot;\nFree the invalid space,reject to run the functions\n&quot;)&#x2F;&#x2F;this type of int is specifically used in Returning Find Or Unfind.&#x2F;&#x2F;Recommmend to be used as a nickname:)&#x2F;&#x2F;Can use Find or Unfind to return the result&#x2F;&#x2F;typedef enum _DynamicArray_isFind_ &#123;Find&#x3D;1,Unfind&#x3D;-1&#125;DynamicArray_isFind;&#x2F;&#x2F;A switch that used in better Print in Dynamic Array!&#x2F;&#x2F;Often use OPEN to beautify the control table&#x2F;&#x2F;typedef enum _BetterPrintSwitch_for_dyarr_ &#123;Dyarr_OPEN &#x3D; 1,Dyarr_CLOSE &#x3D; 0&#125;BetterPrintSwitch_for_dyarr;&#x2F;&#x2F;Main Definitions about DynamicArray&#x2F;&#x2F;When Programing , not recommend to Change the data directly! &#x2F;&#x2F;typedef struct _DynamicArray_ &#123;void* DataPiece;size_t current_size;size_t total_usable_size;size_t Single_Data_size;&#125;DynamicArray;&#x2F;&#x2F;--------------------------------Default_size_Type--------------------------------------------&#x2F;&#x2F;These abstractions are used to reduce the input&#x2F;&#x2F;used as Dyarr_Default_TYPE(type_number) to replace the code:sizeof(Typename)*type_number#if OPENUPDEFAULTSIZE&#x2F;&#x2F;Single Type size&#x2F;&#x2F;#define Dyarr_SIGINT sizeof(int)#define Dyarr_SIGCHAR sizeof(char)#define Dyarr_SIGFLOAT sizeof(float)#define Dyarr_SIGDOUBLE sizeof(double)#define Dyarr_SIG(dataType) sizeof(dataType)&#x2F;&#x2F;Mutiply type size&#x2F;&#x2F;#define Dyarr_INT_SIZE(X) sizeof(int)*X#define Dyarr_CHAR_SIZE(X) sizeof(char)*X#define Dyarr_FLOAT_SIZE(X) sizeof(float)*X#define Dyarr_DOUBLE_SIZE(X) sizeof(double)*X#define Dyarr_TYPE_SIZE(dataType,X) sizeof(dataType)*X#endif&#x2F;&#x2F;-------------------------------------------QuickMalloc----------------------------------------&#x2F;&#x2F;As the name goes lol&#x2F;&#x2F;#if QUICKMALLOC #define Dyarr_DEFAULT_MALLOC 5#define MALLOCDYARR(datatype,data_num) (datatype*)malloc(sizeof(datatype)*data_num)#endif&#x2F;&#x2F;----------------------------------------STD_FUNC_AND_INT_TYPE----------------------------------&#x2F;&#x2F; Return type of compared functions&#x2F;&#x2F;typedef unsigned int Is_Used_Compared_Int;&#x2F;&#x2F; the pointer type of Print !&#x2F;&#x2F; When Printing , type :&#x2F;&#x2F; MyPrint user_print_function_name(datatype* e1, datatype* e2)&#x2F;&#x2F; &#123;&#x2F;&#x2F;print in your way for your data!&#x2F;&#x2F; &#125;&#x2F;&#x2F;typedef void(*MyPrint)(void*);&#x2F;&#x2F; the pointer type of Making change for the data that has been locates in the Dynamic Array!&#x2F;&#x2F; When want to make some change, type like this:&#x2F;&#x2F; Do_Specific_Change user_dochange_function_name(datatype* e1, datatype* e2)&#x2F;&#x2F;&#123;&#x2F;&#x2F;do some change here for your data!&#x2F;&#x2F;&#125;&#x2F;&#x2F;typedef void*(*Do_Specific_Change)(void*);&#x2F;&#x2F; the pointer type of using when comparing for your data&#x2F;&#x2F; When want to make a comparisons, type like this:&#x2F;&#x2F; CompareFunc user_comp_function_name(datatype* e1, datatype* e2)&#x2F;&#x2F;&#123;&#x2F;&#x2F;return &#x2F;&#x2F;the wishing compare!&#x2F;&#x2F;&#x2F;&#x2F;&#125;&#x2F;&#x2F;typedef Is_Used_Compared_Int(*CompareFunc)(void*,void*);&#x2F;&#x2F; the pointer type of using when checking iflocated for your data&#x2F;&#x2F; When want to make a comparisons, type like this:&#x2F;&#x2F; LocateFunc user_loc_function_name(datatype* e1, datatype* e2)&#x2F;&#x2F;&#123;&#x2F;&#x2F;return data1&#x3D;&#x3D;data2(define by yourself! if complicated, just return Find or unfind to show whether is found)&#x2F;&#x2F;&#125;&#x2F;&#x2F;typedef Is_Used_Compared_Int(*LocateFunc)(void*, void*);&#x2F;&#x2F;-----------------------Position_Stored_Dynamic_Array_For_Dyarr---------------------------------#if OPENUPPOSARR&#x2F;&#x2F;Main data structure!&#x2F;&#x2F;Used in returning multitude locations&#x2F;&#x2F;typedef struct _Dyarrposarr_ &#123;int* posSpace;size_t pos_size;&#125;Position_Stored_Dynamic_ArrayFordyarr;&#x2F;&#x2F;Want a better Print to beutify your control table? try this one&#x2F;&#x2F;typedef enum _BetterPrintSwitch_for_pos_dyarr_ &#123;PSDA_dyarr_OPEN &#x3D; 1,PSDA_dyarr_CLOSE &#x3D; 0&#125;BetterPrintSwitch_for_pos_dyarr;&#x2F;&#x2F;can use this type when indicating the type&#x2F;&#x2F;typedef unsigned int BetterPrintfor_PosDyarr;&#x2F;&#x2F;About Position_Stored_Dynamic_Array_Func&#x2F;&#x2F;Create A Position_Stored_Dynamic_Array! Can init it in this way:&#x2F;&#x2F;&gt;&gt;Position_Stored_Dynamic_ArrayFordyarr* Name&#x3D;Init_A_Postion_Stored_Dynamic_ArrayFordyarr();&#x2F;&#x2F;Position_Stored_Dynamic_ArrayFordyarr* Init_A_Postion_Stored_Dynamic_ArrayFordyarr()&#123;Position_Stored_Dynamic_ArrayFordyarr* pro_usable_space &#x3D; MALLOCDYARR(Position_Stored_Dynamic_ArrayFordyarr, 1);if (!pro_usable_space)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;  pro_usable_space-&gt;posSpace &#x3D; NULL;pro_usable_space-&gt;pos_size &#x3D; 0;return pro_usable_space;&#125;&#x2F;&#x2F;About Positions_Stored_Dynamic_Array&#x2F;&#x2F;this function is aimed to output a series of locations that is stored in the pos&#x2F;&#x2F;&#x2F;&#x2F;Use PSDA_dyarr_OPEN to have a better shown ,else use PSDA_dyarr_CLOSE&#x2F;&#x2F;DynamicArrayFunctionStatues Show_All_Locations_In_PSDAfor_dyarr(Position_Stored_Dynamic_ArrayFordyarr*posarr,BetterPrintfor_PosDyarrWhether_Better_Print)&#123;if (!posarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (Whether_Better_Print &#x3D;&#x3D; PSDA_dyarr_OPEN)printf(&quot;\nPositions are shown! :\n&quot;);for (int i &#x3D; 0; i &lt; posarr-&gt;pos_size; i++)printf(&quot;%u &quot;, posarr-&gt;posSpace[i]);if (Whether_Better_Print &#x3D;&#x3D; PSDA_dyarr_OPEN)printf(&quot;\nFinish Printing!\n&quot;);return DynamicArray_Normal;&#125;&#x2F;&#x2F;About Positions_Stored_Dynamic_Array&#x2F;&#x2F;this function is aimed to push back a position into the Position_Stored_Dynamic_ArrayFordyarr&#x2F;&#x2F;DynamicArrayFunctionStatues Push_back_a_locations_in_PSDA_dyarr(Position_Stored_Dynamic_ArrayFordyarr*posarr, intpos_acquired)&#123;int* pro_usable_space &#x3D; (int*)realloc(posarr-&gt;posSpace, sizeof(int) * (posarr-&gt;pos_size + 1));if (!pro_usable_space)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;posarr-&gt;posSpace &#x3D; pro_usable_space;posarr-&gt;posSpace[posarr-&gt;pos_size] &#x3D; pos_acquired;posarr-&gt;pos_size++;return DynamicArray_Normal;&#125;&#x2F;&#x2F;About Positions_Stored_Dynamic_Array&#x2F;&#x2F;this function is aimed to return the number of locations&#x2F;&#x2F;Use PSDA_dyarr_OPEN to have a better shown ,else use PSDA_dyarr_CLOSE&#x2F;&#x2F;size_t Get_pos_size_From_PSDA_for_dyarr(Position_Stored_Dynamic_ArrayFordyarr*posarr,BetterPrintfor_PosDyarrWhether_Shown_Print )&#123;if (!posarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (Whether_Shown_Print &#x3D;&#x3D; PSDA_dyarr_OPEN)printf(&quot;\nCurrent targeted data&#39;s total num is:%u!\n&quot;,posarr-&gt;pos_size);return posarr-&gt;pos_size;&#125;&#x2F;&#x2F;About Positions_Stored_Dynamic_Array&#x2F;&#x2F;Erase a dynamic Array when donot using it!&#x2F;&#x2F;DynamicArrayFunctionStatues DesTroy_A_PSDA_for_dyarr(Position_Stored_Dynamic_ArrayFordyarr*pointer_to_wishedfreeposarr)&#123;if (!pointer_to_wishedfreeposarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_Invalid_Free);&#125;free(pointer_to_wishedfreeposarr-&gt;posSpace);free(pointer_to_wishedfreeposarr);pointer_to_wishedfreeposarr &#x3D; NULL;return DynamicArray_Normal;&#125;&#x2F;&#x2F;About Positions_Stored_Dynamic_Array&#x2F;&#x2F;return a pos that is targeted!&#x2F;&#x2F;void* getPosbyPosinPSDA(Position_Stored_Dynamic_ArrayFordyarr*getter,size_tpos) &#123;if (!getter) &#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_Invalid_Free);&#125;if (pos &gt; getter-&gt;pos_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;for (int i &#x3D; 0; i &lt; pos; i++)return (char*)getter-&gt;posSpace + i * sizeof(size_t);&#125;#endif&#x2F;&#x2F;----------------------------------DynamicArray----------------------------------------------------------------------&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;A Properway to init a default and empty Dynamic Array&#x2F;&#x2F;Use like this: DynamicArray* Dyarr &#x3D; Init_A_DynamicArray(expected_number, datasize)&#x2F;&#x2F;DynamicArray* Init_A_DynamicArray(size_texpected_number,size_tdatasize)&#123;DynamicArray* pro_usable_space &#x3D; MALLOCDYARR(DynamicArray, 1);if(!pro_usable_space)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;pro_usable_space-&gt;DataPiece &#x3D; NULL;pro_usable_space-&gt;Single_Data_size &#x3D; datasize;if (expected_number &gt;&#x3D; Dyarr_DEFAULT_MALLOC)pro_usable_space-&gt;total_usable_size &#x3D; expected_number;elsepro_usable_space-&gt;total_usable_size &#x3D; Dyarr_DEFAULT_MALLOC;pro_usable_space-&gt;current_size &#x3D; 0;return pro_usable_space;&#125;&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;Copied up a Dyarr!&#x2F;&#x2F;Use like this: DynamicArray* copied_one &#x3D; Init_A_DynamicArray_by_CopyADyarr(be_copied)&#x2F;&#x2F;DynamicArray* Init_A_DynamicArray_by_CopyADyarr(DynamicArray*dyarr_copied)&#123;if (!dyarr_copied)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;DynamicArray* pro_usable_space &#x3D; MALLOCDYARR(DynamicArray, 1);if (!pro_usable_space)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;void* pro_usable_data &#x3D; MALLOCDYARR(char, (dyarr_copied-&gt;Single_Data_size * dyarr_copied-&gt;current_size));if(!pro_usable_space)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;pro_usable_space-&gt;DataPiece &#x3D; pro_usable_data;memcpy(pro_usable_space-&gt;DataPiece, dyarr_copied-&gt;DataPiece, dyarr_copied-&gt;Single_Data_size * dyarr_copied-&gt;current_size);pro_usable_space-&gt;current_size &#x3D; dyarr_copied-&gt;current_size;pro_usable_space-&gt;Single_Data_size &#x3D; dyarr_copied-&gt;Single_Data_size;pro_usable_space-&gt;total_usable_size &#x3D; dyarr_copied-&gt;total_usable_size;return pro_usable_space;&#125;&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;An update! used to transform a static array to DynamicArray&#x2F;&#x2F;use like this:  &#x2F;&#x2F;DynamicArray* update_arr &#x3D; Updata_A_Static_Array_To_Dynamic_Array(&#x2F;&#x2F;static arr,&#x2F;&#x2F;sizeof(data),&#x2F;&#x2F;how_many_data_are_there_in_the_static_array)&#x2F;&#x2F;DynamicArray* Updata_A_Static_Array_To_Dynamic_Array(void*data, size_tdatasize,size_tdatanum)&#123;if (!data)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;DynamicArray* pro_usable_space &#x3D; MALLOCDYARR(DynamicArray, 1);if(!pro_usable_space)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;void* pro_usable_data &#x3D; malloc(datasize * datanum*1.5);if(!pro_usable_data)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;memcpy(pro_usable_data, data, datasize * datanum);pro_usable_space-&gt;DataPiece &#x3D; pro_usable_data;pro_usable_space-&gt;current_size &#x3D; datanum;pro_usable_space-&gt;Single_Data_size &#x3D; datasize;pro_usable_space-&gt;total_usable_size &#x3D; 1.5 * datanum;return pro_usable_space;&#125;&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;Push back a data into the Dynamic Array&#x2F;&#x2F;Use like this: Push_Back_Into_A_Dynamic_Array(dyarr,data)&#x2F;&#x2F;DynamicArrayFunctionStatues Push_Back_Into_A_Dynamic_Array(DynamicArray*dyarr, void*data,size_tdatasize)&#123;if (!dyarr &amp;&amp; !data)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (datasize !&#x3D; dyarr-&gt;Single_Data_size) &#123;printf(&quot;%d &quot;, sizeof(data));SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;if (dyarr-&gt;current_size &#x3D;&#x3D; dyarr-&gt;total_usable_size)Resize_The_Dynamic_Array(dyarr, 1.3 * (dyarr-&gt;total_usable_size));void* Afteradd_piece &#x3D; realloc(dyarr-&gt;DataPiece, (dyarr-&gt;current_size + 1)*dyarr-&gt;Single_Data_size);if (!Afteradd_piece)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;memcpy((char*)Afteradd_piece + dyarr-&gt;current_size * dyarr-&gt;Single_Data_size, data, dyarr-&gt;Single_Data_size);dyarr-&gt;DataPiece &#x3D; Afteradd_piece;dyarr-&gt;current_size++;return DynamicArray_Normal;&#125;&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;Push back a lot of data that has a organization that has all the same data&#x2F;&#x2F;Use like this: &#x2F;&#x2F;Push_back_Same_data_Into_A_Dynamic_Array(dyarr,data,the_time_data_repeated,sizeof(data))&#x2F;&#x2F;DynamicArrayFunctionStatues Push_back_Same_data_Into_A_Dynamic_Array(DynamicArray*dyarr,void*data,size_tn_repeat,size_tdatasize)&#123;if (!dyarr &amp;&amp; !data)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (datasize !&#x3D; dyarr-&gt;Single_Data_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;if (dyarr-&gt;current_size &#x3D;&#x3D; dyarr-&gt;total_usable_size)Resize_The_Dynamic_Array(dyarr, 2 * dyarr-&gt;total_usable_size);int datarate &#x3D; datasize &#x2F; dyarr-&gt;total_usable_size;if (datarate &gt; 0)Resize_The_Dynamic_Array(dyarr, (datarate + 1) * dyarr-&gt;total_usable_size);void* newspace &#x3D; realloc(dyarr-&gt;DataPiece, (dyarr-&gt;current_size + n_repeat) * dyarr-&gt;Single_Data_size);if (!newspace)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;for (int i &#x3D; 0; i &lt; n_repeat; i++)memcpy((char*)newspace + (dyarr-&gt;current_size+i) * dyarr-&gt;Single_Data_size,data,dyarr-&gt;Single_Data_size);dyarr-&gt;DataPiece &#x3D; newspace;dyarr-&gt;current_size +&#x3D; n_repeat;return DynamicArray_Normal;&#125;&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;Push back a lot of data that has a organization that has a organiztion with static array&#x2F;&#x2F;Use like this: &#x2F;&#x2F;Push_back_Same_data_Into_A_Dynamic_Array(&#x2F;&#x2F;dyarr,&#x2F;&#x2F;data,&#x2F;&#x2F;how_many_data_are_there_in_static_array,&#x2F;&#x2F;sizeof(data))&#x2F;&#x2F;DynamicArrayFunctionStatues Push_Back_Some_data_Into_A_Dynamic_Array(DynamicArray*dyarr, void*data_array, size_tarray_num, size_tpos,size_tdata_inarray_size)&#123;if (!dyarr &amp;&amp; !data_array)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (pos&lt;0 || pos&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;if (data_inarray_size !&#x3D; dyarr-&gt;Single_Data_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;int DataRate &#x3D; array_num &#x2F; dyarr-&gt;total_usable_size;if (DataRate &gt; 0)Resize_The_Dynamic_Array(dyarr, (DataRate + 1) * dyarr-&gt;total_usable_size);void* newspace &#x3D; realloc(dyarr-&gt;DataPiece, (dyarr-&gt;current_size + array_num) * dyarr-&gt;Single_Data_size);if(!newspace)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;dyarr-&gt;DataPiece &#x3D; newspace;for (int i &#x3D; 0; i &lt; array_num; i++)memcpy((char*)dyarr-&gt;DataPiece + (pos + i) * dyarr-&gt;Single_Data_size,(char*)data_array + i * (dyarr-&gt;Single_Data_size),dyarr-&gt;Single_Data_size);dyarr-&gt;current_size +&#x3D; array_num;return DynamicArray_Normal;&#125;&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;Reshape the dynamic array&#x2F;&#x2F;NOT ROCOMMEND TO USE UNLESS YOU ARE CONCIOUS OF WHAT YOU ARE DOING&#x2F;&#x2F;DynamicArrayFunctionStatues Resize_The_Dynamic_Array(DynamicArray*dyarr,size_twished_new_space_size)&#123;if(!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;void* newspace &#x3D; realloc(dyarr-&gt;DataPiece, wished_new_space_size * (dyarr-&gt;Single_Data_size));if (!newspace)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;dyarr-&gt;DataPiece &#x3D; newspace;dyarr-&gt;total_usable_size &#x3D; wished_new_space_size;if (dyarr-&gt;current_size &gt; dyarr-&gt;total_usable_size)dyarr-&gt;current_size &#x3D; dyarr-&gt;total_usable_size;&#x2F;&#x2F;Used when still unable to contain datareturn DynamicArray_Normal;&#125;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Insert back a data &#x2F;&#x2F; use like this: &#x2F;&#x2F; Insert_Into_A_Dynamic_Array(&#x2F;&#x2F; dyarr, &#x2F;&#x2F; data, &#x2F;&#x2F; where_to_insert,&#x2F;&#x2F;DynamicArrayFunctionStatues Insert_Into_A_Dynamic_Array(DynamicArray*dyarr, void*data, size_tpos)&#123;if (!dyarr &amp;&amp; !data)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (pos&lt;0 || pos&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;if (dyarr-&gt;current_size &#x3D;&#x3D; dyarr-&gt;total_usable_size)Resize_The_Dynamic_Array(dyarr, 2 * (dyarr-&gt;total_usable_size));void* Afteradd_piece&#x3D; realloc(dyarr-&gt;DataPiece, (dyarr-&gt;current_size + 1) * dyarr-&gt;Single_Data_size);if (!Afteradd_piece)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;memcpy((char*)dyarr-&gt;DataPiece + (pos + 1) * dyarr-&gt;Single_Data_size,(char*)dyarr-&gt;DataPiece + pos * dyarr-&gt;Single_Data_size,dyarr-&gt;Single_Data_size*(dyarr-&gt;current_size-pos+1));memmove((char*)dyarr-&gt;DataPiece + pos * dyarr-&gt;Single_Data_size, data, dyarr-&gt;Single_Data_size);dyarr-&gt;current_size++;return DynamicArray_Normal;&#125;&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;Insert back a lot of data that has a organization that has all the same data&#x2F;&#x2F;Use like this: &#x2F;&#x2F;insert_back_Same_data_Into_A_Dynamic_Array(dyarr,n_repeat,datasize,pos)&#x2F;&#x2F;DynamicArrayFunctionStatues insert_back_Same_data_Into_A_Dynamic_Array(DynamicArray*dyarr,void*data,size_tn_repeat,size_tdatasize,size_tpos)&#123;if (!dyarr &amp;&amp; !data)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (datasize !&#x3D; dyarr-&gt;Single_Data_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;if (dyarr-&gt;current_size &#x3D;&#x3D; dyarr-&gt;total_usable_size)Resize_The_Dynamic_Array(dyarr, 2 * dyarr-&gt;total_usable_size);int datarate &#x3D; datasize &#x2F; dyarr-&gt;total_usable_size;if (datarate &gt; 0)Resize_The_Dynamic_Array(dyarr, (datarate + 1) * dyarr-&gt;total_usable_size);void* newspace &#x3D; realloc(dyarr-&gt;DataPiece, (dyarr-&gt;current_size + n_repeat) * dyarr-&gt;Single_Data_size);if (!newspace)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;memmove((char*)dyarr-&gt;DataPiece + (pos + n_repeat) * dyarr-&gt;Single_Data_size,(char*)dyarr-&gt;DataPiece + pos * dyarr-&gt;Single_Data_size,dyarr-&gt;Single_Data_size * n_repeat);for (int i &#x3D; 0; i &lt; n_repeat; i++)memcpy((char*)newspace + (pos + i) * dyarr-&gt;Single_Data_size,data,dyarr-&gt;Single_Data_size);dyarr-&gt;DataPiece &#x3D; newspace;dyarr-&gt;current_size +&#x3D; n_repeat;return DynamicArray_Normal;&#125;&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;Insert back some data that organized in static array&#x2F;&#x2F;use like this: Insert_Into_A_Dynamic_Array(&#x2F;&#x2F; dyarr, &#x2F;&#x2F; where_to_insert, &#x2F;&#x2F; data, &#x2F;&#x2F; how_many_data_are_there_in_static_array,&#x2F;&#x2F; sizeof(data)&#x2F;&#x2F;)&#x2F;&#x2F;DynamicArrayFunctionStatues Insert_Some_Data_Into_A_Dynamic_Array(DynamicArray*dyarr,size_tpos,void*data_array, size_tarray_num,size_tdata_inarray_size)&#123;if (!dyarr &amp;&amp; !data_array)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (pos&lt;0 || pos&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;if (!dyarr-&gt;current_size)&#123;Push_Back_Some_data_Into_A_Dynamic_Array(dyarr, data_array, array_num, pos,data_inarray_size);return DynamicArray_Normal;&#125;if (dyarr-&gt;current_size &#x3D;&#x3D; dyarr-&gt;total_usable_size)Resize_The_Dynamic_Array(dyarr, 2 * dyarr-&gt;total_usable_size);int DataRate &#x3D; array_num &#x2F; dyarr-&gt;total_usable_size;if (DataRate &gt; 0)Resize_The_Dynamic_Array(dyarr, (DataRate + 1) * dyarr-&gt;total_usable_size);void* Afteradd_piece &#x3D; realloc(dyarr-&gt;DataPiece, (dyarr-&gt;current_size + array_num) * dyarr-&gt;Single_Data_size);if (!Afteradd_piece)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;memmove((char*)dyarr-&gt;DataPiece + (pos + array_num) * dyarr-&gt;Single_Data_size,(char*)dyarr-&gt;DataPiece + pos * dyarr-&gt;Single_Data_size,dyarr-&gt;Single_Data_size*array_num);for (int i &#x3D; 0; i &lt; array_num; i++)memcpy((char*)dyarr-&gt;DataPiece + (pos + i) * dyarr-&gt;Single_Data_size,(char*)data_array + i * (dyarr-&gt;Single_Data_size),dyarr-&gt;Single_Data_size);dyarr-&gt;current_size +&#x3D; array_num;return DynamicArray_Normal;&#125;&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;Append another dynamic Array&#x2F;&#x2F; use like this:&#x2F;&#x2F; AppendByMergeDynamicArray(dyarr_be_appended, exp_append_array)&#x2F;&#x2F;DynamicArrayFunctionStatues AppendByMergeDynamicArray(DynamicArray*dyarr_be_appended,DynamicArray*exp_append_array)&#123;if (!dyarr_be_appended &amp;&amp; !exp_append_array)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;int datarate &#x3D; exp_append_array-&gt;current_size &#x2F; dyarr_be_appended-&gt;total_usable_size;if (dyarr_be_appended-&gt;current_size &#x3D;&#x3D; dyarr_be_appended-&gt;total_usable_size)Resize_The_Dynamic_Array(dyarr_be_appended, 2 * dyarr_be_appended-&gt;total_usable_size);if (datarate &gt; 0)Resize_The_Dynamic_Array(dyarr_be_appended, (datarate + 1) * dyarr_be_appended-&gt;total_usable_size);void* AfterAppend &#x3D; realloc(dyarr_be_appended-&gt;DataPiece,(dyarr_be_appended-&gt;current_size + exp_append_array-&gt;current_size) * dyarr_be_appended-&gt;Single_Data_size);if (!AfterAppend)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;dyarr_be_appended-&gt;DataPiece &#x3D; AfterAppend;memcpy((char*)dyarr_be_appended-&gt;DataPiece + dyarr_be_appended-&gt;current_size * dyarr_be_appended-&gt;Single_Data_size,(char*)exp_append_array-&gt;DataPiece,exp_append_array-&gt;current_size * exp_append_array-&gt;Single_Data_size);dyarr_be_appended-&gt;current_size +&#x3D; exp_append_array-&gt;current_size;return DynamicArray_Normal;&#125;&#x2F;&#x2F;About Dynamic Array&#x2F;&#x2F;Gain a copy of targeted array from the dynamic array&#x2F;&#x2F;use like this&#x2F;&#x2F; type* datawanna &#x3D; Copy_A_Specific_DataFrom_A_Dynamic_Array_bypos(dyarr, datawanna, sizeof(datawanna))&#x2F;&#x2F;void* Copy_A_Specific_DataFrom_A_Dynamic_Array_bypos(DynamicArray*dyarr, size_tpos,void*container,size_tcontainer_size)&#123;if (!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (pos &lt; 0 || pos&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;if (dyarr-&gt;Single_Data_size&gt; container_size)&#123;printf(&quot;Specifically unable to contain your data! Try Larger one!\nNull pointer is returned!&quot;);return NULL;&#125;if (dyarr-&gt;Single_Data_size &lt; container_size)&#123;printf(&quot;Warning:Be Cautious the size doesn&#39;t fit!Please change your pointer step from %u to %u\nElse Error will be occurred&quot;, container_size, dyarr-&gt;Single_Data_size);exit(DynamicArray_Invalid_Input);&#125;memcpy(container, (char*)dyarr-&gt;DataPiece + pos * (dyarr-&gt;Single_Data_size), container_size);return DynamicArray_Normal;&#125;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually erase the final element!&#x2F;&#x2F; use like this:&#x2F;&#x2F; Pop_Out_From_A_Dynamic_Array(dyarr)&#x2F;&#x2F;DynamicArrayFunctionStatues Pop_Out_From_A_Dynamic_Array(DynamicArray*dyarr)&#123;if(!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;dyarr-&gt;current_size--;return DynamicArray_Normal;&#125;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually erase all elements!&#x2F;&#x2F; use like this:&#x2F;&#x2F; Clear_A_Dynamic_Array(dyarr)&#x2F;&#x2F;DynamicArrayFunctionStatues Clear_A_Dynamic_Array(DynamicArray*dyarr)&#123;if (!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;dyarr-&gt;current_size &#x3D; 0;if (!dyarr-&gt;DataPiece)&#123;SHOW_ERROR_DynamicArray_Invalid_Free;printf(&quot;VOID DATA SHOULDN&#39;T BE FREE!&quot;);exit(DynamicArray_Invalid_Free);&#125;void* pro_usable_space&#x3D; realloc(dyarr-&gt;DataPiece, dyarr-&gt;Single_Data_size);if (!pro_usable_space)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;dyarr-&gt;DataPiece&#x3D;pro_usable_space;dyarr-&gt;total_usable_size &#x3D; 1;&#125;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually erase all elements! and unable to be used again!&#x2F;&#x2F; use like this:&#x2F;&#x2F; Destroy_A_Dynamic_Array(dyarr)&#x2F;&#x2F;DynamicArrayFunctionStatues Destroy_A_Dynamic_Array(DynamicArray*dyarr)&#123;if (!dyarr)&#123;SHOW_ERROR_DynamicArray_Invalid_Free;exit(DynamicArray_Invalid_Free);&#125;free(dyarr-&gt;DataPiece);free(dyarr);return DynamicArray_Normal;&#125;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually Print All data&#x2F;&#x2F; use like this&#x2F;&#x2F; Print_ALL_Data_In_A_Dynamic_Array(dyarr,user_print_funtional_pointer, Dyarr_OPEN or Dyarr_ClOSE)&#x2F;&#x2F;DynamicArrayFunctionStatues Print_ALL_Data_In_A_Dynamic_Array(DynamicArray*dyarr,MyPrintuser_print,BetterPrintSwitch_for_dyarrwhether_better_print)&#123;if (!dyarr &amp;&amp; !user_print)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if(whether_better_print&#x3D;&#x3D;Dyarr_OPEN)&#123;printf(&quot;\nStart Printing\n&quot;);&#125;for (int i &#x3D; 0; i &lt; dyarr-&gt;current_size; i++)&#123;(*user_print)((char*)(dyarr-&gt;DataPiece) + i * (dyarr-&gt;Single_Data_size));&#125;if (whether_better_print &#x3D;&#x3D; Dyarr_OPEN)&#123;printf(&quot;\nFinish Printing\n&quot;);&#125;return DynamicArray_Normal;&#125;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually Print a specific data&#x2F;&#x2F; use like this&#x2F;&#x2F;Print_Specific_Data_In_A_Dynamic_Array(dyarr, user_print, pos)&#x2F;&#x2F;DynamicArrayFunctionStatues Print_Specific_Data_In_A_Dynamic_Array(DynamicArray*dyarr, MyPrintuser_print, size_tpos) &#123;if (!dyarr &amp;&amp; !user_print)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (pos &lt; 0 || pos&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;printf(&quot;\nSpecific Data is Shown:\n&quot;);user_print((char*)(dyarr-&gt;DataPiece) + pos * (dyarr-&gt;Single_Data_size));printf(&quot;\nSpecific Data Finished Showing!\n&quot;);return DynamicArray_Normal;&#125;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually make some change in all data&#x2F;&#x2F; use like this&#x2F;&#x2F; Do_Specific_Change_To_All_Data(dyarr, user_print, pos)&#x2F;&#x2F;DynamicArrayFunctionStatues Do_Specific_Change_To_All_Data(DynamicArray*dyarr, Do_Specific_Changeuser_change) &#123;if (!dyarr &amp;&amp; !user_change)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;for (int i &#x3D; 0; i &lt; dyarr-&gt;current_size; i++)user_change((char*)(dyarr-&gt;DataPiece) + i * (dyarr-&gt;Single_Data_size));return DynamicArray_Normal;&#125;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually make some change in a specific data&#x2F;&#x2F; use like this&#x2F;&#x2F; Do_Specific_Change_To_All_Data(dyarr, user_print, pos)&#x2F;&#x2F;DynamicArrayFunctionStatues Do_Specific_Change_To_Specific_Data(DynamicArray*dyarr, Do_Specific_Changeuser_change, size_tpos)&#123;if (!dyarr &amp;&amp; !user_change)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (pos &lt; 0 || pos&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;user_change((char*)(dyarr-&gt;DataPiece) + pos * (dyarr-&gt;Single_Data_size));return DynamicArray_Normal;&#125;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually erase a specific data by pos&#x2F;&#x2F; use like this&#x2F;&#x2F; Delete_A_Specific_Data_From_the_DynamicArray(dyarr,  pos)&#x2F;&#x2F;DynamicArrayFunctionStatues Delete_A_Specific_Data_From_the_DynamicArray(DynamicArray*dyarr, size_tpos)&#123;if(!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (pos &lt; 0 || pos&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;memcpy((char*)dyarr-&gt;DataPiece+pos*dyarr-&gt;Single_Data_size,(char*)dyarr-&gt;DataPiece+(pos+1)*dyarr-&gt;Single_Data_size,dyarr-&gt;Single_Data_size*(dyarr-&gt;current_size-pos-1));dyarr-&gt;current_size--;return DynamicArray_Normal;&#125;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually erase some specific data by pos&#x2F;&#x2F; use like this&#x2F;&#x2F; Delete_A_Specific_Data_From_the_DynamicArray(dyarr, beginpos, endpos)&#x2F;&#x2F;DynamicArrayFunctionStatues Delete_Some_Specific_Data_From_the_DynamicArray(DynamicArray*dyarr, size_tBeginpos, size_tEndpos)&#123;if (!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (Beginpos &lt; 0 || Beginpos&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;if (Endpos &lt; 0 || Endpos&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;memcpy((char*)dyarr-&gt;DataPiece + Beginpos * dyarr-&gt;Single_Data_size,(char*)dyarr-&gt;DataPiece + (Endpos + 1) * dyarr-&gt;Single_Data_size,dyarr-&gt;Single_Data_size * (dyarr-&gt;current_size - Endpos + 1));dyarr-&gt;current_size -&#x3D; Endpos - Beginpos + 1;if (dyarr-&gt;current_size &lt;&#x3D; dyarr-&gt;total_usable_size &#x2F; 4 &amp;&amp; dyarr-&gt;total_usable_size &gt; 5)&#123;Resize_The_Dynamic_Array(dyarr, dyarr-&gt;total_usable_size &#x2F; 2);dyarr-&gt;total_usable_size &#x2F;&#x3D; 2;&#125;return DynamicArray_Normal;&#125;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Actually erase a specific data by pos&#x2F;&#x2F; use like this&#x2F;&#x2F; Delete_A_Specific_Data_From_the_DynamicArray(dyarr,  pos)&#x2F;&#x2F;DynamicArrayFunctionStatues reverse_Data_In_DynamicArray(DynamicArray*dyarr) &#123;if(!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;char* swapbit &#x3D; (char*)malloc(dyarr-&gt;Single_Data_size);&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;for (int i &#x3D; 0; i &lt; dyarr-&gt;current_size &#x2F; 2; i++)&#123;memcpy(swapbit, (char*)dyarr-&gt;DataPiece + i * dyarr-&gt;Single_Data_size, dyarr-&gt;Single_Data_size);&#x2F;&#x2F;原型：int temp&#x3D;*a,*a&#x3D;*b,*b&#x3D;tempmemmove((char*)dyarr-&gt;DataPiece + i*dyarr-&gt;Single_Data_size,(char*)dyarr-&gt;DataPiece + (dyarr-&gt;current_size - i-1) * dyarr-&gt;Single_Data_size,dyarr-&gt;Single_Data_size);memcpy((char*)dyarr-&gt;DataPiece + (dyarr-&gt;current_size - i - 1) * dyarr-&gt;Single_Data_size, swapbit, dyarr-&gt;Single_Data_size);&#125;free(swapbit);return DynamicArray_Normal;&#125;&#x2F;&#x2F;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; this is used in judging whether the dynamic array is empty&#x2F;&#x2F; use like this:&#x2F;&#x2F; isEmpty_InDynamicArray(dyarr)&#x2F;&#x2F;Bool isEmpty_InDynamicArray(DynamicArray*dyarr) &#123;if (!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (!dyarr-&gt;current_size)return True;return False;&#125;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; this is used in swap data&#x2F;&#x2F; use like this:&#x2F;&#x2F; swapData_in_DynamicArray(dyarr,pos1,pos2)&#x2F;&#x2F;DynamicArrayFunctionStatues swapData_in_DynamicArray(DynamicArray*dyarr, size_tpos1, size_tpos2)&#123;if (!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (pos1&lt;0 || pos1&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;if (pos2&lt;0 || pos2&gt;dyarr-&gt;current_size)&#123;SHOW_ERROR_DynamicArray_Invalid_Input;exit(DynamicArray_Invalid_Input);&#125;char* swapbit &#x3D; (char*)malloc(dyarr-&gt;Single_Data_size);if(!swapbit)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;memcpy(swapbit,(char*)dyarr-&gt;DataPiece + pos1 * dyarr-&gt;Single_Data_size,dyarr-&gt;Single_Data_size);memmove((char*)dyarr-&gt;DataPiece + pos1 * dyarr-&gt;Single_Data_size,(char*)dyarr-&gt;DataPiece + pos2 * dyarr-&gt;Single_Data_size,dyarr-&gt;Single_Data_size);memcpy((char*)dyarr-&gt;DataPiece + pos2 * dyarr-&gt;Single_Data_size,swapbit,dyarr-&gt;Single_Data_size);free(swapbit);return DynamicArray_Normal;&#125;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; sadly that is bubblesort :(&#x2F;&#x2F; I haven&#39;t make it in quicksort as it was toooooooooooooooooooooo tiring lol&#x2F;&#x2F; use like this:&#x2F;&#x2F; sort_In_Dynamic_Array(dyarr,comparision_funcuntional_pointer)&#x2F;&#x2F;DynamicArrayFunctionStatues sort_In_Dynamic_Array(DynamicArray*dyarr,CompareFunccompfunc) &#123;if (!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (!compfunc)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;for (int i &#x3D; 0; i &lt; dyarr-&gt;current_size-1; i++)&#123;for (int j &#x3D; 0; j &lt; dyarr-&gt;current_size - i-1; j++)&#123;if (compfunc((char*)dyarr-&gt;DataPiece + j * dyarr-&gt;Single_Data_size,(char*)dyarr-&gt;DataPiece + (j + 1) * dyarr-&gt;Single_Data_size))swapData_in_DynamicArray(dyarr, j, j + 1);&#125;&#125;&#125;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; check if located in the dynamic array&#x2F;&#x2F; use like this:&#x2F;&#x2F; isLocateinDyarr(dyarr, data, comparision_funcuntional_pointer)&#x2F;&#x2F;DynamicArrayFunctionStatues isLocateinDyarr(DynamicArray*dyarr,void*data,LocateFuncuser_func)&#123;if (!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (!user_func)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (!data)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;for (int i &#x3D; 0; i &lt; dyarr-&gt;current_size; i++)&#123;if (user_func((char*)dyarr-&gt;DataPiece + i * dyarr-&gt;Single_Data_size, data))&#123;return Find;&#125;&#125;return Unfind;&#125;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; return the position of data that is targeted &#x2F;&#x2F; use like this:&#x2F;&#x2F; returnAElembyPos_inDyarr(dyarr, data, comparision_funcuntional_pointer)&#x2F;&#x2F;DynamicArrayFunctionStatues returnAElembyPos_inDyarr(DynamicArray*dyarr, void*data, LocateFuncuser_func) &#123;if (!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (!user_func)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (!data)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;for (int i &#x3D; 0; i &lt; dyarr-&gt;current_size; i++)&#123;if (user_func((char*)dyarr-&gt;DataPiece + i * dyarr-&gt;Single_Data_size, data))&#123;return i;&#125;&#125;return Unfind;&#125;&#x2F;&#x2F; About Dynamic Array&#x2F;&#x2F; Using the function when Posarr is enable to use!&#x2F;&#x2F; return a bunch of position of data that is targeted &#x2F;&#x2F; use like this:&#x2F;&#x2F; Position_Stored_Dynamic_ArrayFordyarr* pos &#x3D;r eturnAElembyPos_inDyarr(dyarr, posArr,data, comparision_funcuntional_pointer)&#x2F;&#x2F;#if OPENUPPOSARRPosition_Stored_Dynamic_ArrayFordyarr* returnABunchofData_inDyarr(DynamicArray*dyarr, Position_Stored_Dynamic_ArrayFordyarr*posArr, void*data, LocateFuncuser_func)&#123;if (!dyarr)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (!user_func)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;if (!data)&#123;SHOW_ERROR_DynamicArray_NULL_INPUT;exit(DynamicArray_NULL_INPUT);&#125;for (int i &#x3D; 0; i &lt; dyarr-&gt;current_size; i++)&#123;int possible_count &#x3D; 0;for (int i &#x3D; 0; i &lt; dyarr-&gt;current_size; i++)&#123;if ((*user_func)(data, (char*)dyarr-&gt;DataPiece + i * dyarr-&gt;Single_Data_size))&#123;int* pro_usable_stored_space &#x3D; (int*)realloc(posArr-&gt;posSpace, sizeof(int) * (possible_count + 1));if (!pro_usable_stored_space)&#123;SHOW_ERROR_DynamicArray_ERROR_IN_MALLOCING_SPACE;exit(DynamicArray_ERROR_IN_MALLOCING_SPACE);&#125;posArr-&gt;posSpace &#x3D; pro_usable_stored_space;posArr-&gt;posSpace[possible_count] &#x3D; i;possible_count++;posArr-&gt;pos_size &#x3D; possible_count;&#125;&#125;if (posArr-&gt;pos_size)return posArr;return Unfind;&#125;&#125;#endif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试文档：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#define _CRT_SECURE_NO_WARNINGS 1#include&quot;standard_dynamic_array.h&quot;MyPrint print(int* e1) &#123;printf(&quot;%d &quot;, *e1);&#125;Do_Specific_Change dochange(int* e1) &#123;*e1 &#x3D; *e1 + 1;&#125;LocateFunc loc(int* e1, int* e2) &#123;if (*e1 &#x3D;&#x3D; *e2) &#123;return Find;&#125;return Unfind;&#125;int main()&#123;int data1 &#x3D; 10;printf(&quot;%d &quot;, sizeof(data1));    &#x2F;&#x2F;test InitingDynamicArray* testDyarr1 &#x3D; Init_A_DynamicArray(10, Dyarr_SIGINT);    &#x2F;&#x2F;test a Sigdata pushed:Push_Back_Into_A_Dynamic_Array(testDyarr1, &amp;data1,sizeof(int));Print_ALL_Data_In_A_Dynamic_Array(testDyarr1, print, Dyarr_OPEN);    &#x2F;&#x2F;test pushing the same dataPush_back_Same_data_Into_A_Dynamic_Array(testDyarr1, &amp;data1, 10, Dyarr_SIGINT);Print_ALL_Data_In_A_Dynamic_Array(testDyarr1, print, Dyarr_OPEN);    &#x2F;&#x2F;Test ClearingClear_A_Dynamic_Array(testDyarr1);Print_ALL_Data_In_A_Dynamic_Array(testDyarr1, print, Dyarr_OPEN);    &#x2F;&#x2F;test updateint data2[10] &#x3D; &#123; 1,2,3,4,5,6,7,8,9,10 &#125;;DynamicArray* test2&#x3D;Updata_A_Static_Array_To_Dynamic_Array(data2, Dyarr_SIGINT, 10);Print_ALL_Data_In_A_Dynamic_Array(test2, print, Dyarr_OPEN);    &#x2F;&#x2F;test copy:DynamicArray* copyone &#x3D; Init_A_DynamicArray_by_CopyADyarr(test2);Print_ALL_Data_In_A_Dynamic_Array(copyone, print, Dyarr_OPEN);    &#x2F;&#x2F;test insertprintf(&quot;before:&quot;);Print_ALL_Data_In_A_Dynamic_Array(copyone, print, Dyarr_OPEN);Insert_Into_A_Dynamic_Array(copyone, &amp;data1, 1);printf(&quot;after:&quot;);Print_ALL_Data_In_A_Dynamic_Array(copyone, print, Dyarr_OPEN);    &#x2F;&#x2F;test insert bunchprintf(&quot;before:&quot;);Print_ALL_Data_In_A_Dynamic_Array(copyone, print, Dyarr_OPEN);Insert_Some_Data_Into_A_Dynamic_Array(copyone, 1, data2, 10, Dyarr_SIGINT);printf(&quot;after:&quot;);Print_ALL_Data_In_A_Dynamic_Array(copyone, print, Dyarr_OPEN);    &#x2F;&#x2F;test Erasing sigoneprintf(&quot;before:&quot;);Print_ALL_Data_In_A_Dynamic_Array(copyone, print, Dyarr_OPEN);Delete_A_Specific_Data_From_the_DynamicArray(copyone, 1);printf(&quot;after:&quot;);Print_ALL_Data_In_A_Dynamic_Array(copyone, print, Dyarr_OPEN);    &#x2F;&#x2F;test Erasing bunch oneprintf(&quot;before:&quot;);Print_ALL_Data_In_A_Dynamic_Array(copyone, print, Dyarr_OPEN);Delete_Some_Specific_Data_From_the_DynamicArray(copyone,1,10);printf(&quot;after:&quot;);Print_ALL_Data_In_A_Dynamic_Array(copyone, print, Dyarr_OPEN);    &#x2F;&#x2F;test Do changeprintf(&quot;before:&quot;);Print_ALL_Data_In_A_Dynamic_Array(copyone, print, Dyarr_OPEN);Do_Specific_Change_To_Specific_Data(copyone,dochange,1);printf(&quot;after:&quot;);Print_ALL_Data_In_A_Dynamic_Array(copyone, print, Dyarr_OPEN);printf(&quot;before:&quot;);Print_ALL_Data_In_A_Dynamic_Array(copyone, print, Dyarr_OPEN);Do_Specific_Change_To_All_Data(copyone, dochange);printf(&quot;after:&quot;);Print_ALL_Data_In_A_Dynamic_Array(copyone, print, Dyarr_OPEN);    &#x2F;&#x2F;test location:DynamicArray* test3 &#x3D; Updata_A_Static_Array_To_Dynamic_Array(data2, Dyarr_SIGINT, 10);if (isLocateinDyarr(test3, &amp;data2[2], loc)) &#123;printf(&quot;\nI have found it!\n&quot;);&#125;int where &#x3D; returnAElembyPos_inDyarr(test3, &amp;data2[2], loc);printf(&quot;\nIn dyarr the %d place\n&quot;, where);    &#x2F;&#x2F;test Position Stored Dynamic Array and returnBunchClear_A_Dynamic_Array(test3);Push_back_Same_data_Into_A_Dynamic_Array(test3, &amp;data2[2], 10, Dyarr_SIGINT);Position_Stored_Dynamic_ArrayFordyarr* p1 &#x3D; Init_A_Postion_Stored_Dynamic_ArrayFordyarr();returnABunchofData_inDyarr(test3, p1, &amp;data2[2], loc);Print_ALL_Data_In_A_Dynamic_Array(test3, print, Dyarr_OPEN);Show_All_Locations_In_PSDAfor_dyarr(p1, PSDA_dyarr_OPEN);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> MyTinyLibProject </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Opencv-in-Pycharm （3）</title>
      <link href="/2023/02/06/Opencv-in-Pycharm-%EF%BC%883%EF%BC%89/"/>
      <url>/2023/02/06/Opencv-in-Pycharm-%EF%BC%883%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="腐蚀操作"><a href="#腐蚀操作" class="headerlink" title="腐蚀操作"></a>腐蚀操作</h3><p>​        对于这样的一些图片：</p><p><img src="1.png" alt="1"></p><p>​        我们可以使用腐蚀操作来钝化特征：删除掉一些边界的像素点（置黑色）。其中：腐蚀的大小，范围是由kernel决定的。在Python中，我们需要这样指定一个核：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">kernel<span class="token operator">=</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        还是需要指定一个迭代次数的参数，这行代码完成了这样的工作：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">erosion<span class="token operator">=</span>cv2<span class="token punctuation">.</span>erode<span class="token punctuation">(</span>img<span class="token punctuation">,</span>                  kernel<span class="token punctuation">,</span>                  iterations<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#迭代次数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们首先看看效果怎么样：</p><p><img src="erosion.png" alt="erosion"></p><p>​        可以看到，腐蚀核在检测到边界条件的时候（白转黑and黑转白）自动将这些像素点填充成黑色，除非核内的像素点都是统一的，否则都会腐蚀！</p><p>​        可以来点控制变量！比如说指定不同的腐蚀核来观察效果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> nppath<span class="token operator">=</span><span class="token string">"1.png"</span>img<span class="token operator">=</span>cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>path<span class="token punctuation">)</span>kernel33<span class="token operator">=</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>kernel55<span class="token operator">=</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>erosion33<span class="token operator">=</span>cv2<span class="token punctuation">.</span>erode<span class="token punctuation">(</span>img<span class="token punctuation">,</span>kernel33<span class="token punctuation">,</span>iterations<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>erosion55<span class="token operator">=</span>cv2<span class="token punctuation">.</span>erode<span class="token punctuation">(</span>img<span class="token punctuation">,</span>kernel55<span class="token punctuation">,</span>iterations<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>res<span class="token operator">=</span>np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span>erosion33<span class="token punctuation">,</span>erosion55<span class="token punctuation">)</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"comp"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"Kernel Diff compararison.png"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="Kernel Diff compararison.png" alt="Kernel Diff compararison"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> pltpath<span class="token operator">=</span><span class="token string">"1.png"</span>img<span class="token operator">=</span>cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>path<span class="token punctuation">)</span>kernel33<span class="token operator">=</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>kernel55<span class="token operator">=</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>erosion33<span class="token operator">=</span>cv2<span class="token punctuation">.</span>erode<span class="token punctuation">(</span>img<span class="token punctuation">,</span>kernel33<span class="token punctuation">,</span>iterations<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>erosion55<span class="token operator">=</span>cv2<span class="token punctuation">.</span>erode<span class="token punctuation">(</span>img<span class="token punctuation">,</span>kernel55<span class="token punctuation">,</span>iterations<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>imgs_ero1<span class="token operator">=</span><span class="token punctuation">[</span>img<span class="token punctuation">,</span>erosion33<span class="token punctuation">,</span>erosion55<span class="token punctuation">]</span>titles<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Original'</span><span class="token punctuation">,</span><span class="token string">'3 times 3 '</span><span class="token punctuation">,</span><span class="token string">'5 times t '</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>imgs_ero1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'gray'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>titles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="Figure_1-16756699063337.png" alt="Figure_1"></p><p>​        可以看到，核越大，就越会腐蚀图像！</p><p>​        下面看看图像迭代影响：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> nppath<span class="token operator">=</span><span class="token string">"1.png"</span>img<span class="token operator">=</span>cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>path<span class="token punctuation">)</span>kernel33<span class="token operator">=</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>erosion1<span class="token operator">=</span>cv2<span class="token punctuation">.</span>erode<span class="token punctuation">(</span>img<span class="token punctuation">,</span>kernel33<span class="token punctuation">,</span>iterations<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>erosion2<span class="token operator">=</span>cv2<span class="token punctuation">.</span>erode<span class="token punctuation">(</span>img<span class="token punctuation">,</span>kernel33<span class="token punctuation">,</span>iterations<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>res<span class="token operator">=</span>np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span>erosion1<span class="token punctuation">,</span>erosion2<span class="token punctuation">)</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"comp"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"Iterator Diff comparasion.png"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="Iterator Diff comparasion.png" alt="Iterator Diff comparasion"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> pltpath<span class="token operator">=</span><span class="token string">"1.png"</span>img<span class="token operator">=</span>cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>path<span class="token punctuation">)</span>kernel33<span class="token operator">=</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>erosion1<span class="token operator">=</span>cv2<span class="token punctuation">.</span>erode<span class="token punctuation">(</span>img<span class="token punctuation">,</span>kernel33<span class="token punctuation">,</span>iterations<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>erosion2<span class="token operator">=</span>cv2<span class="token punctuation">.</span>erode<span class="token punctuation">(</span>img<span class="token punctuation">,</span>kernel33<span class="token punctuation">,</span>iterations<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>imgs_ero1<span class="token operator">=</span><span class="token punctuation">[</span>img<span class="token punctuation">,</span>erosion1<span class="token punctuation">,</span>erosion2<span class="token punctuation">]</span>titles<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Original'</span><span class="token punctuation">,</span><span class="token string">'1 '</span><span class="token punctuation">,</span><span class="token string">'2 '</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>imgs_ero1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'gray'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>titles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="Figure_2.png" alt="Figure_2"></p><p>可以看见：越是迭代，图像腐蚀的越严重！</p><h3 id="膨胀"><a href="#膨胀" class="headerlink" title="膨胀"></a>膨胀</h3><p>​        这个操作可以视作腐蚀操作的反操作：就是将特征明显化：</p><p><img src="dilate.png" alt="dilate"></p><p>​        老规矩：还是看看改变核大小和迭代次数产生的效果如何：</p><p>​        先看核大小：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> nppath<span class="token operator">=</span><span class="token string">"1.png"</span>img<span class="token operator">=</span>cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>path<span class="token punctuation">)</span>kernel33<span class="token operator">=</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>kernel55<span class="token operator">=</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>dilate1<span class="token operator">=</span>cv2<span class="token punctuation">.</span>dilate<span class="token punctuation">(</span>img<span class="token punctuation">,</span>kernel33<span class="token punctuation">,</span>iterations<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>dilate2<span class="token operator">=</span>cv2<span class="token punctuation">.</span>dilate<span class="token punctuation">(</span>img<span class="token punctuation">,</span>kernel55<span class="token punctuation">,</span>iterations<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>res<span class="token operator">=</span>np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span>dilate1<span class="token punctuation">,</span>dilate2<span class="token punctuation">)</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"comp"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"kernel_in_dilate Diff comparasion.png"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="kernel_in_dilate Diff comparasion.png" alt="kernel_in_dilate Diff comparasion"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> pltpath<span class="token operator">=</span><span class="token string">"1.png"</span>img<span class="token operator">=</span>cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>path<span class="token punctuation">)</span>kernel33<span class="token operator">=</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>kernel55<span class="token operator">=</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>dilate1<span class="token operator">=</span>cv2<span class="token punctuation">.</span>dilate<span class="token punctuation">(</span>img<span class="token punctuation">,</span>kernel33<span class="token punctuation">,</span>iterations<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>dilate2<span class="token operator">=</span>cv2<span class="token punctuation">.</span>dilate<span class="token punctuation">(</span>img<span class="token punctuation">,</span>kernel55<span class="token punctuation">,</span>iterations<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>titles<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'org'</span><span class="token punctuation">,</span><span class="token string">'3 times 3'</span><span class="token punctuation">,</span><span class="token string">'5 times 5'</span><span class="token punctuation">]</span>img_group<span class="token operator">=</span><span class="token punctuation">[</span>img<span class="token punctuation">,</span>dilate1<span class="token punctuation">,</span>dilate2<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_group<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'gray'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>titles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="Figure_3.png" alt="Figure_3"></p><p>​        再来看看迭代器的影响：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> pltpath<span class="token operator">=</span><span class="token string">"1.png"</span>img<span class="token operator">=</span>cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>path<span class="token punctuation">)</span>kernel33<span class="token operator">=</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>dilate1<span class="token operator">=</span>cv2<span class="token punctuation">.</span>dilate<span class="token punctuation">(</span>img<span class="token punctuation">,</span>kernel33<span class="token punctuation">,</span>iterations<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>dilate2<span class="token operator">=</span>cv2<span class="token punctuation">.</span>dilate<span class="token punctuation">(</span>img<span class="token punctuation">,</span>kernel33<span class="token punctuation">,</span>iterations<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>titles<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'org'</span><span class="token punctuation">,</span><span class="token string">'3 times 3'</span><span class="token punctuation">,</span><span class="token string">'5 times 5'</span><span class="token punctuation">]</span>img_group<span class="token operator">=</span><span class="token punctuation">[</span>img<span class="token punctuation">,</span>dilate1<span class="token punctuation">,</span>dilate2<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_group<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'gray'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>titles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="Figure_4.png" alt="Figure_4"></p><p>​        还是很容易看出来：核越大，迭代次数越多，图片的特征就被放大的越明显！</p><h4 id="扩展阅读1"><a href="#扩展阅读1" class="headerlink" title="扩展阅读1"></a>扩展阅读1</h4><p>​        版权声明：本文为CSDN博主「我有一個夢想」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>​        原文链接：<a href="https://blog.csdn.net/B08370108/article/details/118028678">https://blog.csdn.net/B08370108/article/details/118028678</a></p><p>​        <strong>图像的腐蚀过程与图像的卷积操作类似，都需要模板矩阵来控制运算的结果</strong>，在图像的腐蚀和膨胀中这个模板矩阵被称为结构元素。与图像卷积相同，结构元素可以任意指定图像的中心点，并且结构元素的尺寸和具体内容都可以根据需求自己定义。定义结构元素之后，将结构元素的中心点依次放到图像中每一个非0元素处，如果此时结构元素内所有的元素所覆盖的图像像素值均不为0，则保留结构元素中心点对应的图像像素，否则将删除结构元素中心点对应的像素。图像的腐蚀过程示意图如图6-12所示，图6-12中左侧为待腐蚀的原图像，中间为结构元素，<strong>首先将结构元素的中心与原图像中的A像素重合，此时结构元素中心点的左侧和上方元素所覆盖的图像像素值均为0，因此需要将原图像中的A像素删除</strong>；<strong>当把结构元素的中心点与B像素重合时，此时结构元素中所有的元素所覆盖的图像像素值均为1</strong>，因此保留原图像中的B像素。将结构元素中心点依次与原图像中的每个像素重合，判断每一个像素点是否保留或者删除，最终原图像腐蚀的结果如图中下侧图像所示。</p><p>​        <img src="2021011613033220.png" alt="img"></p><p>​        图像腐蚀可以用“Θ”表示，其数学表示形式如式(6.4)所示，通过公式可以发现，其实对图像A的腐蚀运算就是寻找图像中能够将结构元素B全部包含的像素点。</p><p>​        生成常用的矩形结构元素、十字结构元素和椭圆结构：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">Mat getStructuringElement(int shape, Size ksize, Point anchor &#x3D; Point(-1,-1));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;shape：结构元素的种类，可以选择的参数及含义在表6-5中给出。&#x2F;&#x2F;ksize：结构元素的尺寸大小&#x2F;&#x2F;anchor：中心点的位置，默认参数为结构元素的几何中心点。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>     该函数用于生成图像形态学操作中常用的矩形结构元素、十字结构元素和椭圆结构元素。函数第一个参数为生成结构元素的种类，可以选择的参数及含义在表给出，函数第二个参数是结构元素的尺寸大小，能够影响到图像腐蚀的效果，一般情况下，结构元素的种类相同时，结构元素的尺寸越大腐蚀效果越明显。函数的最后一个参数是结构元素的中心点，只有十字结构元素的中心点位置会影响图像腐蚀后的轮廓形状，其他种类的结构元素的中心点位置只影响形态学操作结果的平移量。</code></pre><p><img src="20210116131530359.png" alt="表6-5 getStructuringElement()函数结构元素形状可选择参数"></p><p>腐蚀函数</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void erode( InputArray src,            OutputArray dst,            InputArray kernel,           Point anchor &#x3D; Point(-1,-1), int iterations &#x3D; 1,           int borderType &#x3D; BORDER_CONSTANT,           const Scalar&amp; borderValue &#x3D; morphologyDefaultBorderValue()           );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;src：输入的待腐蚀图像，图像的通道数可以是任意的，但是图像的数据类型必须是CV_8U，CV_16U，CV_16S，CV_32F或CV_64F之一。&#x2F;&#x2F;dst：腐蚀后的输出图像，与输入图像src具有相同的尺寸和数据类型。&#x2F;&#x2F;kernel：用于腐蚀操作的结构元素，可以自己定义，也可以用getStructuringElement()函数生成。&#x2F;&#x2F;anchor：中心点在结构元素中的位置，默认参数为结构元素的几何中心点&#x2F;&#x2F;iterations：腐蚀的次数，默认值为1。&#x2F;&#x2F;borderType：像素外推法选择标志，取值范围在表3-5中给出。默认参数为BORDER_DEFAULT，表示不包含边界值倒序填充。&#x2F;&#x2F;borderValue：使用边界不变外推法时的边界值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        该函数根据结构元素对输入图像进行腐蚀，在腐蚀多通道图像时每个通道独立进行腐蚀运算。<br>​        函数的第一个参数为待腐蚀的图像，图像通道数可以是任意的，但是图像的数据类型必须是CV_8U，CV_16U，CV_16S，CV_32F或CV_64F之一。<br>​        函数第二个参数为腐蚀后的输出图像，与输入图像具有相同的尺寸和数据类型。<br>​        函数第三个和第四个参数都是与结构元素相关的参数，第三个参数为结构元素，第四个参数为结构元素的中心位置，第四个参数的默认值为Point(-1,-1)，表示结构元素的几何中心处为结构元素的中心点。<br>​        函数第五个参数是使用结构元素腐蚀的次数，腐蚀次数越多效果越明显，参数默认值为1，表示只腐蚀1次。<br>​        函数第六个参数是图像像素外推法的选择标志，<br>​        第七个参数为使用边界不变外推法时的边界值，这两个参数对图像中主要部分的腐蚀操作没有影响，因此在多数情况下使用默认值即可。</p><p>​        需要注意的是该函数的腐蚀过程只针对图像中的非0像素，因此如果图像是以0像素为背景，那么腐蚀操作后会看到图像中的内容变得更瘦更小；如果图像是以255像素为背景，那么腐蚀操作后会看到图像中的内容变得更粗更大。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">   简单示例&#x2F;&#x2F;&#x2F;&#x2F; Created by smallflyfly on 2021&#x2F;6&#x2F;18.&#x2F;&#x2F;#include &quot;opencv2&#x2F;opencv.hpp&quot;#include &lt;iostream&gt;using namespace std;using namespace cv;void drawResult(Mat im, int num, Mat stats, Mat centroids, const string&amp; name) &#123;    for (int i &#x3D; 1; i &lt; num; ++i)     &#123;        int x &#x3D; centroids.at&lt;double&gt;(i, 0);        int y &#x3D; centroids.at&lt;double&gt;(i, 1);        cout &lt;&lt; x &lt;&lt; &quot; &quot; &lt;&lt; y &lt;&lt; endl;        circle(im, Point(x, y), 2, Scalar(0, 0, 255), -1);        int xmin &#x3D; stats.at&lt;int&gt;(i, CC_STAT_LEFT);        int ymin &#x3D; stats.at&lt;int&gt;(i, CC_STAT_TOP);        int w &#x3D; stats.at&lt;int&gt;(i, CC_STAT_WIDTH);        int h &#x3D; stats.at&lt;int&gt;(i, CC_STAT_HEIGHT);Rect rect(xmin, ymin, w, h);    rectangle(im, rect, Scalar(255, 255, 255), 2);    putText(            im,                 to_string(i),                 Point(x+5, y),                 FONT_HERSHEY_SCRIPT_SIMPLEX,                 0.3,                 Scalar(0, 0, 255),                 1);&#125;imshow(name, im);&#125;int main() &#123;Mat src &#x3D; (            Mat_&lt;uchar&gt;(6, 6) &lt;&lt;                    0, 0, 0, 0, 255, 0,                    0, 255, 255, 255, 255, 255,                    0, 255, 255, 255, 255, 0,                    0, 255, 255, 255, 255, 0,                    0, 255, 255, 255, 255, 0,                    0, 0, 0, 0, 255, 0        );resize(src, src, Size(0, 0), 50, 50, INTER_NEAREST);Mat m1, m2;m1 &#x3D; getStructuringElement(0, Size(3, 3));m2 &#x3D; getStructuringElement(1, Size(3, 3)); Mat erodeM1, erodeM2;erode(src, erodeM1, m1, Point(-1, -1), 10);erode(src, erodeM2, m2, Point(-1, -1), 10); imshow(&quot;src&quot;, src);imshow(&quot;erodeM1&quot;, erodeM1);imshow(&quot;erodeM2&quot;, erodeM2); Mat xbim &#x3D; imread(&quot;xiaobai.jpg&quot;);Mat xbM1, xbM2;erode(xbim, xbM1, m1, Point(-1, -1), 2);erode(xbim, xbM2, m2, Point(-1, -1), 2); imshow(&quot;xb&quot;, xbim);imshow(&quot;xbM1&quot;, xbM1);imshow(&quot;xbM2&quot;, xbM2); Mat im &#x3D; imread(&quot;rice.jfif&quot;);Mat im1 &#x3D; im.clone();Mat im2 &#x3D; im.clone();Mat im3 &#x3D; im.clone(); Mat gray;cvtColor(im, gray, CV_BGR2GRAY);Mat riceBin;threshold(gray, riceBin, 125, 255, THRESH_BINARY); Mat out, stats, centroids;int count1 &#x3D; connectedComponentsWithStats(riceBin, out, stats, centroids, 8, CV_16U);drawResult(im1, count1, stats, centroids, &quot;no erode&quot;); Mat erodeIm1, erodeIm2;erode(riceBin, erodeIm1, m1, Point(-1, -1), 5);erode(riceBin, erodeIm2, m2, Point(-1, -1), 5); int count2 &#x3D; connectedComponentsWithStats(erodeIm1, out, stats, centroids, 8, CV_16U);drawResult(erodeIm1, count2, stats, centroids, &quot;erode1&quot;);int count3 &#x3D; connectedComponentsWithStats(erodeIm2, out, stats, centroids, 8, CV_16U);drawResult(erodeIm2, count3, stats, centroids, &quot;erode2&quot;); waitKey(0);destroyAllWindows();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0IwODM3MDEwOA==,size_16,color_FFFFFF,t_70.png" alt="img"></p><h4 id="扩展阅读2"><a href="#扩展阅读2" class="headerlink" title="扩展阅读2"></a>扩展阅读2</h4><p>​        版权声明：本文为CSDN博主「我有一個夢想」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>​        原文链接：<a href="https://blog.csdn.net/B08370108/article/details/118029682">https://blog.csdn.net/B08370108/article/details/118029682</a></p><p>​        图像的膨胀与图像腐蚀是一对相反的过程，与图像腐蚀相似，图像膨胀同样需要结构元素用于控制图像膨胀的效果。结构元素可以任意指定结构的中心点，并且结构元素的尺寸和具体内容都可以根据需求自己定义。<strong>定义结构元素之后，将结构元素的中心点依次放到图像中每一个非0元素处，如果原图像中某个元素被结构元素覆盖，但是该像素的像素值不与结构元素中心点对应的像素点的像素值相同，那么将原图像中的该像素的像素值修改为结构元素中心点对应点的像素值。</strong>图像的膨胀过程示意图如图所示，图中左侧为待膨胀的原图像，中间为结构元素，首先将结构元素的中心与原图像中的A像素重合，将结构元素覆盖的所有像素的像素值都修改为1，将结构元素中心点依次与原图像中的每个像素重合，判断是否有需要填充的像素。原图像膨胀的结果如图中右侧图像所示。</p><p><img src="20210117230235852.png" alt="在这里插入图片描述"></p><pre><code>     图像膨胀数学表示形式如式(6.5)所示，通过公式可以发现，其实图像A的膨胀运算就是生成能够将结构元素B全部包含的图像。</code></pre><p><img src="20210117230534606.png" alt="在这里插入图片描述"></p><p>膨胀函数</p><pre class="line-numbers language-none"><code class="language-none">void dilate( InputArray src, OutputArray dst, InputArray kernel,Point anchor &#x3D; Point(-1,-1), int iterations &#x3D; 1,int borderType &#x3D; BORDER_CONSTANT,const Scalar&amp; borderValue &#x3D; morphologyDefaultBorderValue() );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;&#x2F;src：输入的待膨胀图像，图像的通道数可以是任意的，但是图像的数据类型必须是CV_8U，CV_16U，CV_16S，CV_32F或CV_64F之一。&#x2F;&#x2F;dst：膨胀后的输出图像，与输入图像src具有相同的尺寸和数据类型。&#x2F;&#x2F;kernel：用于膨胀操作的结构元素，可以自己定义，也可以用getStructuringElement()函数生成。&#x2F;&#x2F;anchor：中心点在结构元素中的位置，默认参数为结构元素的几何中心点&#x2F;&#x2F;iterations：膨胀的次数，默认值为1。&#x2F;&#x2F;borderType：像素外推法选择标志，取值范围在表3-5中给出。默认参数为BORDER_DEFAULT，表示不包含边界值倒序填充。&#x2F;&#x2F;borderValue：使用边界不变外推法时的边界值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>     该函数根据结构元素对输入图像进行膨胀，在膨胀多通道图像时每个通道独立进行膨胀运算。函数的第一个参数为待膨胀的图像，图像通道数可以是任意的，但是图像的数据类型必须是CV_8U，CV_16U，CV_16S，CV_32F或CV_64F之一。</code></pre><p>​        函数第二个参数为膨胀后的输出图像，与输入图像具有相同的尺寸和数据类型。函数第三个和第四个参数都是与结构元素相关的参数，</p><p>​        第三个参数为结构元素，膨胀时使用的结构元素尺寸越大效果越明显，第四个参数为结构元素的中心位置，</p><p>​        第四个参数的默认值为Point(-1,-1)，表示结构元素的几何中心处为结构元素的中心点。</p><p>​        函数第五个参数是使用结构元素膨胀的次数，膨胀次数越多效果越明显，默认参数为1，表示只膨胀1次。</p><p>​        函数第六个参数是图像像素外推法的选择标志，</p><p>​        第七个参数为使用边界不变外推法时的边界值，这两个参数对图像中主要部分的膨胀操作没有影响，因此在多数情况下使用默认值即可。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">    简单示例&#x2F;&#x2F;&#x2F;&#x2F; Created by smallflyfly on 2021&#x2F;6&#x2F;18.&#x2F;&#x2F;#include &quot;opencv2&#x2F;opencv.hpp&quot;#include &lt;iostream&gt;using namespace cv;using namespace std;void drawResult(Mat im, int num, Mat stats, Mat centroids, const string&amp; name) &#123;    for (int i &#x3D; 1; i &lt; num; ++i) &#123;        int x &#x3D; centroids.at&lt;double&gt;(i, 0);        int y &#x3D; centroids.at&lt;double&gt;(i, 1);        cout &lt;&lt; x &lt;&lt; &quot; &quot; &lt;&lt; y &lt;&lt; endl;        circle(im, Point(x, y), 2, Scalar(0, 0, 255), -1);        int xmin &#x3D; stats.at&lt;int&gt;(i, CC_STAT_LEFT);        int ymin &#x3D; stats.at&lt;int&gt;(i, CC_STAT_TOP);        int w &#x3D; stats.at&lt;int&gt;(i, CC_STAT_WIDTH);        int h &#x3D; stats.at&lt;int&gt;(i, CC_STAT_HEIGHT);    Rect rect(xmin, ymin, w, h);   rectangle(im, rect, Scalar(255, 255, 255), 2);    putText(    im,     to_string(i),     Point(x+5, y),     FONT_HERSHEY_SCRIPT_SIMPLEX,     0.3,        Scalar(0, 0, 255),         1);&#125;imshow(name, im);&#125;int main() &#123;    Mat src &#x3D; (            Mat_&lt;uchar&gt;(6, 6) &lt;&lt;                              0, 0, 0, 0, 255, 0,                    0, 255, 255, 255, 255, 255,                    0, 255, 255, 255, 255, 0,                    0, 255, 255, 255, 255, 0,                    0, 255, 255, 255, 255, 0,                    0, 0, 0, 0, 255, 0    );    resize(src, src, Size(0, 0), 50, 50, INTER_NEAREST);    Mat m1, m2;    m1 &#x3D; getStructuringElement(0, Size(3, 3));    m2 &#x3D; getStructuringElement(1, Size(3, 3));Mat dilateM1, dilateM2;dilate(src, dilateM1, m1, Point(-1, -1), 5);dilate(src, dilateM2, m2, Point(-1, -1), 5); imshow(&quot;src&quot;, src);imshow(&quot;dilateM1&quot;, dilateM1);imshow(&quot;dilateM2&quot;, dilateM2); Mat xbim &#x3D; imread(&quot;xiaobai.jpg&quot;);Mat xbM1, xbM2;dilate(xbim, xbM1, m1, Point(-1, -1), 2);dilate(xbim, xbM2, m2, Point(-1, -1), 2); imshow(&quot;xbim&quot;, xbim);imshow(&quot;xbM1&quot;, xbM1);imshow(&quot;xbM2&quot;, xbM2); Mat im &#x3D; imread(&quot;rice.jfif&quot;);resize(im, im, Size(0, 0), 0.6, 0.6);Mat im1 &#x3D; im.clone(); Mat gray;cvtColor(im, gray, CV_BGR2GRAY);Mat riceBin;threshold(gray, riceBin, 125, 255, THRESH_BINARY); Mat out, stats, centroids;int count1 &#x3D; connectedComponentsWithStats(riceBin, out, stats, centroids, 8, CV_16U);drawResult(im, count1, stats, centroids, &quot;no dilate&quot;); Mat dilateIm1, dilateIm2;dilate(riceBin, dilateIm1, m1, Point(-1, -1), 5);dilate(riceBin, dilateIm2, m2, Point(-1, -1), 5); int count2 &#x3D; connectedComponentsWithStats(dilateIm1, out, stats, centroids, 8, CV_16U);drawResult(dilateIm1, count2, stats, centroids, &quot;dilateIm1&quot;);int count3 &#x3D; connectedComponentsWithStats(dilateIm2, out, stats, centroids, 8, CV_16U);drawResult(dilateIm2, count3, stats, centroids, &quot;dilateIm2&quot;); waitKey(0);destroyAllWindows();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="xiaobaixueshijue.png" alt="img"></p><h3 id="开运算与闭运算"><a href="#开运算与闭运算" class="headerlink" title="开运算与闭运算"></a>开运算与闭运算</h3><p>​        刚刚我们整完了腐蚀和膨胀,现在我们一起用：</p><p>​        开运算指的是：<strong>先腐蚀后膨胀</strong></p><p>​        闭运算指的是：<strong>先膨胀后腐蚀</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> pltpath <span class="token operator">=</span> <span class="token string">"1.png"</span>img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>path<span class="token punctuation">)</span>kernel33 <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>opening <span class="token operator">=</span> cv2<span class="token punctuation">.</span>morphologyEx<span class="token punctuation">(</span>img<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>MORPH_OPEN<span class="token punctuation">,</span>kernel33<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"opening"</span><span class="token punctuation">,</span>opening<span class="token punctuation">)</span>closing <span class="token operator">=</span> cv2<span class="token punctuation">.</span>morphologyEx<span class="token punctuation">(</span>img<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>MORPH_CLOSE<span class="token punctuation">,</span>kernel33<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"closing"</span><span class="token punctuation">,</span>closing<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"open.png"</span><span class="token punctuation">,</span>opening<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"close.png"</span><span class="token punctuation">,</span>closing<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        开运算：</p><p><img src="open.png" alt="open"></p><p>​        闭运算：</p><p><img src="close.png" alt="close"></p><h3 id="梯度运算"><a href="#梯度运算" class="headerlink" title="梯度运算"></a>梯度运算</h3><p>​        放大边界信息！很简单：膨胀的减去腐蚀的：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">import cv2import numpy as npfrom matplotlib import pyplot as pltpath &#x3D; &quot;1.png&quot;img &#x3D; cv2.imread(path)kernel33 &#x3D; np.ones((3,3),np.uint8)gradient&#x3D;cv2.morphologyEx(img,cv2.MORPH_GRADIENT,kernel33)cv2.imshow(&quot;gra&quot;,gradient)cv2.imwrite(&quot;gradient.png&quot;,gradient)cv2.waitKey(0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="gradient.png" alt="gradient"></p><h3 id="礼貌与黑帽"><a href="#礼貌与黑帽" class="headerlink" title="礼貌与黑帽"></a>礼貌与黑帽</h3><p>​        <strong>礼貌就是原始输入-开运算结果！</strong></p><p>​        <strong>黑猫就是闭运算-原始输入！</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> pltpath <span class="token operator">=</span> <span class="token string">"1.png"</span>img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>path<span class="token punctuation">)</span>kernel33 <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>tophat<span class="token operator">=</span>cv2<span class="token punctuation">.</span>morphologyEx<span class="token punctuation">(</span>img<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>MORPH_TOPHAT<span class="token punctuation">,</span>kernel33<span class="token punctuation">)</span>blackhat<span class="token operator">=</span>cv2<span class="token punctuation">.</span>morphologyEx<span class="token punctuation">(</span>img<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>MORPH_BLACKHAT<span class="token punctuation">,</span>kernel33<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"to"</span><span class="token punctuation">,</span>tophat<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"bl"</span><span class="token punctuation">,</span>blackhat<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"tophat.png"</span><span class="token punctuation">,</span>tophat<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"blackhat.png"</span><span class="token punctuation">,</span>blackhat<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>tophat：</p><p><img src="tophat.png" alt="tophat"></p><p>blackhat:</p><p><img src="blackhat.png" alt="blackhat"></p><h3 id="扩展阅读1-1"><a href="#扩展阅读1-1" class="headerlink" title="扩展阅读1"></a>扩展阅读1</h3><p>阅读链接：<a href="https://zhuanlan.zhihu.com/p/541851526">数字图像处理(c++ opencv)：形态学图像处理-开运算与闭运算 - 知乎 (zhihu.com)</a></p><h4 id="开运算与闭运算-1"><a href="#开运算与闭运算-1" class="headerlink" title="开运算与闭运算"></a>开运算与闭运算</h4><p>（1）开运算</p><p>原理方法：先腐蚀后膨胀；</p><p>功能作用：平滑物体轮廓、断开狭窄的狭颈、消除细长的突出和物体。</p><p>（2）闭运算</p><p>原理方法：先膨胀后腐蚀；</p><p>功能作用：弥合狭窄的狭颈或断裂处、消除小孔、填补轮廓缝隙。</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;#include&lt;opencv2&#x2F;opencv.hpp&gt;using namespace cv;using namespace std;int main()&#123;Mat image, image_gray, image_bw;   &#x2F;&#x2F;定义输入图像，灰度图像，二值图像image &#x3D; imread(&quot;开运算闭运算.png&quot;);  &#x2F;&#x2F;读取图像；if (image.empty())&#123;cout &lt;&lt; &quot;读取错误&quot; &lt;&lt; endl;return -1;&#125;imshow(&quot;image&quot;, image);&#x2F;&#x2F;转换为灰度图像cvtColor(image, image_gray, COLOR_BGR2GRAY);&#x2F;&#x2F;转换为二值图threshold(image_gray, image_bw, 120, 255, 1); &#x2F;&#x2F;通过0，1调节二值图像背景颜色imshow(&quot;image_bw&quot;, image_bw);&#x2F;&#x2F;闭运算Mat se &#x3D; getStructuringElement(0, Size(3, 3)); &#x2F;&#x2F;构造矩形结构元素dilate(image_bw, image_bw, se, Point(-1, -1), 5); &#x2F;&#x2F;执行膨胀操作erode(image_bw, image_bw, se, Point(-1, -1), 5); &#x2F;&#x2F;执行腐蚀操作&#x2F;&#x2F;开运算&#x2F;&#x2F;Mat se &#x3D; getStructuringElement(0, Size(3, 3)); &#x2F;&#x2F;构造矩形结构元素&#x2F;&#x2F;erode(image_bw, image_bw, se, Point(-1, -1), 2); &#x2F;&#x2F;执行腐蚀操作&#x2F;&#x2F;dilate(image_bw, image_bw, se, Point(-1, -1), 2); &#x2F;&#x2F;执行膨胀操作imshow(&quot;image_bw&quot;, image_bw);waitKey(0);  &#x2F;&#x2F;暂停，保持图像显示，等待按键结束return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="v2-996d420c6bd384ca11957a8745f672b4_1440w.png" alt="img"></p><hr><p><strong>除了使用腐蚀膨胀的函数组合来进行开运算闭运算，还可以通过opencv函数进行处理（morphologyex函数）</strong></p><h3 id="扩展阅读2-1"><a href="#扩展阅读2-1" class="headerlink" title="扩展阅读2"></a>扩展阅读2</h3><p>版权声明：本文为CSDN博主「念980」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_62343847/article/details/122604497">https://blog.csdn.net/weixin_62343847/article/details/122604497</a></p><p>腐蚀与膨胀</p><p>​        图像的腐蚀与膨胀互为逆向操作，通常用于处理二值图像（黑白图，以黑色为底面背景），因此需要先进行二值化处理，腐蚀和膨胀通俗的理解就是，在指定大小的卷积核内，如果该卷积核内全为黑色或全为白色，则该卷积核内像素值不变，但若是既有黑色又有白色，即在图像边缘处，那么膨胀操作则会将该卷积核内所有白色像素点都赋值变为黑色，以此将图像向内腐蚀掉一圈，而膨胀操作则相反，会将卷积核内的黑色像素点赋值成2白色，以此让图像膨胀一圈。</p><p>​        膨胀与腐蚀的函数介绍</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">kernel <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>uint8<span class="token punctuation">)</span> <span class="token comment">#定义要处理的卷积核大小和卷积核的类型。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">erosion <span class="token operator">=</span> cv2<span class="token punctuation">.</span>erode<span class="token punctuation">(</span>img_test3<span class="token punctuation">,</span>kernel<span class="token punctuation">,</span>iterations <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#对图像进行膨胀操作，img_test是要进行处理的图像，kernel是通过上一个函数定义好的卷积核，而iterations则是腐蚀操作的循环次数（可以将卷积核设置为（1，1），然后不断调整循环次数来实现精细化的腐蚀，以达到更好的腐蚀效果）。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">dilate_1 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>dilate<span class="token punctuation">(</span>img_test<span class="token punctuation">,</span>kernel<span class="token punctuation">,</span>iterations <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#对图像进行膨胀操作，这里的参数跟上面的参数作用一样，只是改了函数名而已。（同样可以将卷积核设置为（1，1），不断改变循环次数，以达到更好的膨胀效果）。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        应用：腐蚀操作一般用于消去图像中不需要的粘连部分，而膨胀操作则用于填充图像内的空白部分，同时也可以恢复图像由于进行腐蚀操作后缩小的面积，在下面的代码实例中会有体现。</p><p>代码实例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token comment">#导入包</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltimg_test3 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">"test3.png"</span><span class="token punctuation">)</span><span class="token comment">#读入图像</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"test3"</span><span class="token punctuation">,</span>img_test3<span class="token punctuation">)</span><span class="token comment">#展示图片</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#关闭窗口</span>kernel <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token comment">#设定处理的内核</span>erosion <span class="token operator">=</span> cv2<span class="token punctuation">.</span>erode<span class="token punctuation">(</span>img_test3<span class="token punctuation">,</span>kernel<span class="token punctuation">,</span>iterations <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#腐蚀操作</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"erosion"</span><span class="token punctuation">,</span>erosion<span class="token punctuation">)</span><span class="token comment">#展示图片</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#关闭窗口</span>pie <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">"pie.png"</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"pie"</span><span class="token punctuation">,</span>pie<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>kernel <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token comment">#设定要处理的内核大小</span>erosion_1 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>erode<span class="token punctuation">(</span>pie<span class="token punctuation">,</span>kernel<span class="token punctuation">,</span>iterations <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#循环腐蚀1次</span>erosion_2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>erode<span class="token punctuation">(</span>pie<span class="token punctuation">,</span>kernel<span class="token punctuation">,</span>iterations <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#循环腐蚀2次</span>erosion_3 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>erode<span class="token punctuation">(</span>pie<span class="token punctuation">,</span>kernel<span class="token punctuation">,</span>iterations <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">#循环腐蚀3次</span>All <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>erosion_1<span class="token punctuation">,</span>erosion_2<span class="token punctuation">,</span>erosion_3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#拼接图像</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"All"</span><span class="token punctuation">,</span>All<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>img_test3 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">"test3.png"</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"test3"</span><span class="token punctuation">,</span>img_test3<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>kernel <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token comment">#设定要处理的内核大小</span>erosion_test3 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>erode<span class="token punctuation">(</span>img_test3<span class="token punctuation">,</span>kernel<span class="token punctuation">,</span>iterations <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#腐蚀图像</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"erosion_test3"</span><span class="token punctuation">,</span>erosion_test3<span class="token punctuation">)</span><span class="token comment">#展示腐蚀后的图像</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#关闭窗口</span>dilate_test3 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>dilate<span class="token punctuation">(</span>erosion_test3<span class="token punctuation">,</span>kernel<span class="token punctuation">,</span>iterations <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#对腐蚀过的图像进行膨胀处理</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"dilate"</span><span class="token punctuation">,</span>dilate_test3<span class="token punctuation">)</span><span class="token comment">#展示膨胀后的图像</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#关闭窗口</span>kernel <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token comment">#设定要处理的内核大小</span>dilate_1 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>dilate<span class="token punctuation">(</span>pie<span class="token punctuation">,</span>kernel<span class="token punctuation">,</span>iterations <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#循环膨胀一次后的图像</span>dilate_2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>dilate<span class="token punctuation">(</span>pie<span class="token punctuation">,</span>kernel<span class="token punctuation">,</span>iterations <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#循环膨胀两次后的图像</span>dilate_3 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>dilate<span class="token punctuation">(</span>pie<span class="token punctuation">,</span>kernel<span class="token punctuation">,</span>iterations <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">#循环膨胀三次后的图像</span>All <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>dilate_1<span class="token punctuation">,</span>dilate_2<span class="token punctuation">,</span>dilate_3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#拼接以上三幅图像</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"All"</span><span class="token punctuation">,</span>All<span class="token punctuation">)</span><span class="token comment">#展示图片</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#关闭窗口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        运行结果</p><p>​        这是原图，可以看到上面有一些多出来的粘连部分</p><p><img src="watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5b-1OTgw,size_20,color_FFFFFF,t_70,g_se,x_16.png" alt="img"></p><p>​        进行腐蚀操作后的图像，可以看到，我们用腐蚀操作成功去除了边缘的粘连部分，但同时字体笔画也由于受到了腐蚀而变细了</p><p><img src="qdwd.png" alt="img"></p><p>​        对上图进行膨胀操作，可以看到，我们恢复了被腐蚀前笔画的粗细，同时也去除掉了原图的粘连部分，这种操作称为开运算，能够在尽量不改变原图的情况下去除图像的粘连。（在下面会有详细的介绍）</p><p><img src="ss.png" alt="img"></p><pre><code>     以下是循环腐蚀1~3次之后的图像对比</code></pre><p><img src="wq.png" alt="img"></p><pre><code>     以下是循环膨胀1~3次之后的图像对比</code></pre><p><img src="das.png" alt="img"></p><p>​        通过上面两幅图可以看出，不管是腐蚀还是膨胀，都不是等比例的进行，它们最终都会趋近于矩形（因为卷积核就是矩形的），并且进行腐蚀再膨胀后的图像跟原图是存在细微差别的，比如中间的部分空洞可能已经消失了等等。</p><p>​        开运算和闭运算 </p><p>​        所谓开运算在上面的代码其实已经使用过了，只是opencv本身便带有可以进行腐蚀后再膨胀的函数，不需要我们自己写那么多代码。开运算在原图的基础上就是用于消除图像的一些粘连部分的一种方式。</p><p>​        而闭运算则相反，是先进行膨胀，再进行腐蚀的一种操作。它主要用于填充图像中的空洞部分，在opencv中同样有一个专门的函数进行闭运算。</p><p>​        函数介绍</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">opening <span class="token operator">=</span> cv2<span class="token punctuation">.</span>morphologyEx<span class="token punctuation">(</span>img_test3<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>MORPH_OPEN<span class="token punctuation">,</span>kernel<span class="token punctuation">)</span><span class="token comment">#开运算，img_test3是要进行处理的图片，cv2.MORPH_OPEN表示要进行的是开运算（先腐蚀后膨胀），kernel则跟上面的函数一样，是定义好的卷积核。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"> closing <span class="token operator">=</span> cv2<span class="token punctuation">.</span>morphologyEx<span class="token punctuation">(</span>img_test3<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>MORPH_CLOSE<span class="token punctuation">,</span>kernel<span class="token punctuation">)</span><span class="token comment">#闭运算，这里的函数参数跟上一个函数作用一样，cv2.MORPH_OPEN表示要进行的是闭运算（先膨胀后腐蚀）。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>代码实例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltimg_test3 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">"test3.png"</span><span class="token punctuation">)</span><span class="token comment">#读入图像</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"test3"</span><span class="token punctuation">,</span>img_test3<span class="token punctuation">)</span><span class="token comment">#展示图片</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#关闭窗口</span>kernel <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token comment">#设定要处理的内核大小</span>opening <span class="token operator">=</span> cv2<span class="token punctuation">.</span>morphologyEx<span class="token punctuation">(</span>img_test3<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>MORPH_OPEN<span class="token punctuation">,</span>kernel<span class="token punctuation">)</span><span class="token comment">#开运算，先腐蚀后膨胀，能够去除图像中粘连的部分</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"open"</span><span class="token punctuation">,</span>opening<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>kernel <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token comment">#设定要处理的卷积核大小</span>closing <span class="token operator">=</span> cv2<span class="token punctuation">.</span>morphologyEx<span class="token punctuation">(</span>img_test3<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>MORPH_CLOSE<span class="token punctuation">,</span>kernel<span class="token punctuation">)</span><span class="token comment">#闭运算，先膨胀后腐蚀，能够填补图像中间的空隙</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"close"</span><span class="token punctuation">,</span>closing<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果</p><p>​        开运算:</p><p><img src="dqwdqew.png" alt="img"></p><p>​        闭运算：效果不明显，但是如果该图像中间有空洞存在，那么我们可以明显的看到空洞被填上了。</p><p> <img src="ceacergaefr.png" alt="img"></p><pre><code>     梯度运算</code></pre><p>​        原理：将图像分别进行膨胀和腐蚀，然后两者相减，则可以得到该图像的轮廓，而opencv中同样提供了进行梯度运算的函数。</p><p>​        函数介绍</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">gradient <span class="token operator">=</span> cv2<span class="token punctuation">.</span>morphologyEx<span class="token punctuation">(</span>pie<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>MORPH_GRADIENT<span class="token punctuation">,</span>kernel<span class="token punctuation">)</span><span class="token comment">#这里的pie是将要进行处理的二值图像，cv2.MORPH_GRADIENT表示进行梯度运算，kernel则是定义好的卷积核。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        代码示例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltpie <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">"pie.png"</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"pie"</span><span class="token punctuation">,</span>pie<span class="token punctuation">)</span><span class="token comment">#展示原图</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#关闭窗口</span><span class="token comment">#梯度运算，通过膨胀减去腐蚀得到轮廓</span>kernel <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token comment">#设定卷积核大小</span>gradient <span class="token operator">=</span> cv2<span class="token punctuation">.</span>morphologyEx<span class="token punctuation">(</span>pie<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>MORPH_GRADIENT<span class="token punctuation">,</span>kernel<span class="token punctuation">)</span><span class="token comment">#梯度运算</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"gradient"</span><span class="token punctuation">,</span>gradient<span class="token punctuation">)</span><span class="token comment">#展示处理后的图像</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#关闭窗口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        运行结果</p><p>​        原图</p><p><img src="ewaVQERWEFWRVA.png" alt="img"></p><p>​        处理后得到的图像轮廓</p><p><img src="ce.PNG" alt="img"></p><pre><code>     礼帽与黑帽</code></pre><p>​        礼帽：将图像先进行开运算，再以原始图像减去开运算的结果，我们就可以得到图像被腐蚀掉的粘连部分，或者说原图中灰度较亮的区域，所以也称白顶帽变换。</p><p>​        黑帽：将图像先进行闭运算，再将闭运算的结果减去原始图像，作用我们就可以得到原图像中被填充的空洞部分，也就是图像中件较暗的空洞区域，所以又称黑底帽变换。</p><p>​        函数介绍</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tophat <span class="token operator">=</span> cv2<span class="token punctuation">.</span>morphologyEx<span class="token punctuation">(</span>img_test3<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>MORPH_TOPHAT<span class="token punctuation">,</span>kernel<span class="token punctuation">)</span><span class="token comment">#礼帽运算，cv2.MORPH_TOPHAT表示进行的是礼帽运算，即原图像-开运算。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">blackhat <span class="token operator">=</span> cv2<span class="token punctuation">.</span>morphologyEx<span class="token punctuation">(</span>img_test3<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>MORPH_BLACKHAT<span class="token punctuation">,</span>kernel<span class="token punctuation">)</span><span class="token comment">#黑帽运算，cv2.MORPH_BLACKHAT表示进行的是黑帽运算，即闭运算-原图像。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        代码示例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltimg_test3 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">"test3.png"</span><span class="token punctuation">)</span><span class="token comment">#读入图像</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"test3"</span><span class="token punctuation">,</span>img_test3<span class="token punctuation">)</span><span class="token comment">#展示图片</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#关闭窗口</span><span class="token comment">#礼帽，原始图像-开运算，得到的就是被腐蚀掉的粘连部分</span>kernel <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token comment">#设定卷积核大小</span>tophat <span class="token operator">=</span> cv2<span class="token punctuation">.</span>morphologyEx<span class="token punctuation">(</span>img_test3<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>MORPH_TOPHAT<span class="token punctuation">,</span>kernel<span class="token punctuation">)</span><span class="token comment">#礼帽运算</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"tophat"</span><span class="token punctuation">,</span>tophat<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#黑帽运算，闭运算-原始图像，得到的是膨胀之前原始图像中比较暗的部分，即中间的空洞</span>kernel <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token comment">#设定卷积核大小</span>blackhat <span class="token operator">=</span> cv2<span class="token punctuation">.</span>morphologyEx<span class="token punctuation">(</span>img_test3<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>MORPH_BLACKHAT<span class="token punctuation">,</span>kernel<span class="token punctuation">)</span><span class="token comment">#黑帽运算</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"blackhat"</span><span class="token punctuation">,</span>blackhat<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        运行结果</p><p>​        原图</p><p><img src="QWDQWD.png" alt="img"></p><p>​        礼帽，可以看到图像粘连部分被剔除出来了</p><p><img src="wdqqwdqw.png" alt="img"></p><p>​        黑帽，我们得到了迪哥中间微小的空洞部分</p><p><img src="sqwdw.png" alt="img"></p><p>​        </p>]]></content>
      
      
      
        <tags>
            
            <tag> Opencv </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率论与数理统计 （1）</title>
      <link href="/2023/02/06/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1-%EF%BC%881%EF%BC%89/"/>
      <url>/2023/02/06/%E6%A6%82%E7%8E%87%E8%AE%BA%E4%B8%8E%E6%95%B0%E7%90%86%E7%BB%9F%E8%AE%A1-%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="概率论与数理统计"><a href="#概率论与数理统计" class="headerlink" title="概率论与数理统计"></a>概率论与数理统计</h1><h3 id="确定性现象-必然现象"><a href="#确定性现象-必然现象" class="headerlink" title="确定性现象/必然现象"></a>确定性现象/必然现象</h3><p>​        确定性：一定发生/一定不发生</p><p>​        随机/偶然：可能发生，可能不发生</p><p>​        统计规律：事件发生的规律</p><p>​        实验：观测，测量，实验</p><p>​        随机试验：1）在相同的条件下可以重复</p><p>​                            2）结果不止一个</p><p>​                            3）无法预测</p><p>​        结果用E来表示</p><p>​        事件：每一种结果就叫一个事件</p><p>​        随机事件：随机发生的事件</p><p>​        基本事件：一个事件不能再分或者没有必要再分（相对于实验目的来说）</p><p>​        复合事件：基本事件组成复合事件</p><p>​        必然事件：一定发生（$\Omega$）</p><p>​        不可能事件：一定不发生（$\phi$）</p><p>​        样本空间：所有的基本事件的集合</p><p>​        样本点：样本空间的元素</p><h3 id="事件之间的关系"><a href="#事件之间的关系" class="headerlink" title="事件之间的关系"></a>事件之间的关系</h3><h4 id="包含"><a href="#包含" class="headerlink" title="包含"></a>包含</h4><p>​        定义A发生必然导致B发生就是A包含于B，或者B包含A</p><script type="math/tex; mode=display">A \subset B或写作B\supset A</script><p><img src="image-20230206134525647.png" alt="image-20230206134525647"></p><p>​        <strong>注意这两个符号：$\subset$和$\in$的区别：前者地位平等，阐述的是集合与集合的关系；后者地位不平等，阐述的是集合于元素之间的关系！</strong></p><h4 id="相等"><a href="#相等" class="headerlink" title="相等"></a>相等</h4><p>​        如果</p><script type="math/tex; mode=display">A\subset B,B\supset A \rightarrow A=B</script><h4 id="并（和）"><a href="#并（和）" class="headerlink" title="并（和）"></a>并（和）</h4><p>​        定义他们是A或者B发生：</p><script type="math/tex; mode=display">A \cup B或记作A+B</script><p><img src="image-20230206134547279.png" alt="image-20230206134547279"></p><p>注意这样的一些性质值得我们的注意：</p><script type="math/tex; mode=display">A+B \supset A,A+A=A,A+\emptyset=A,A+\Omega=\Omega</script><h4 id="交（积）"><a href="#交（积）" class="headerlink" title="交（积）"></a>交（积）</h4><p>​        定义A，B同时发生为他们的交：</p><script type="math/tex; mode=display">A\cap B或记作AB</script><p><img src="image-20230206135414625.png" alt="image-20230206135414625"></p><script type="math/tex; mode=display">AB \subset A,AA=A,A\emptyset=\emptyset,A\Omega=A</script><h4 id="差"><a href="#差" class="headerlink" title="差"></a>差</h4><p>​        定义一个发生另一个不发生的区域叫两个事件的差：</p><p><img src="image-20230206135456654.png" alt="image-20230206135456654"></p><script type="math/tex; mode=display">A-B</script><script type="math/tex; mode=display">A-B=A-AB</script><h4 id="多个事件"><a href="#多个事件" class="headerlink" title="多个事件"></a>多个事件</h4><p>多个事件的和：</p><script type="math/tex; mode=display">A_1 \cup A_2\cup A_3\cup ...\cup A_n=\cup_{i=1}^nA_i</script><p>多个事件的并：</p><script type="math/tex; mode=display">A_1 \cap A_2\cap A_3\cap ...\cap A_n=\cap_{i=1}^nA_i</script><p><strong>无限可列：能按一个规律拍成一个序列就叫无限可列</strong></p><h3 id="互不相容与对立事件"><a href="#互不相容与对立事件" class="headerlink" title="互不相容与对立事件"></a>互不相容与对立事件</h3><p>​        如果A，B不同时发生，就有以下简记：</p><script type="math/tex; mode=display">AB=\emptyset</script><p>​        如果一个集合下，不是A就是B，那就称呼A,B是对立事件</p><script type="math/tex; mode=display">A \cap B=\emptyset,A \cup B = \Omega \rightarrow A=\bar{B}</script><p>​        于是又有新的性质</p><p>1)</p><script type="math/tex; mode=display">A-B=A-AB=A\bar{B}</script><p>2)互相对立的事件一定互不相容</p><p>3）互不相容适用于多个事件，对立却只用于描述两个事件的关系</p><h3 id="完备事件组"><a href="#完备事件组" class="headerlink" title="完备事件组"></a>完备事件组</h3><p>​        如果我们列举出来的一些互不相容的事件把所有情况说全了：</p><script type="math/tex; mode=display">\cup_{i=1}^n A_i=\Omega</script><h3 id="运算律"><a href="#运算律" class="headerlink" title="运算律"></a>运算律</h3><p>1）交换律：</p><script type="math/tex; mode=display">A\cup B=B\cup A \\ A\cap B=B\cap A</script><p>2）结合律：</p><script type="math/tex; mode=display">(A\cup B)\cup C=A\cup(B\cup C)\\(A\cap B)\cap C=A\cap(B\cap C)</script><p>3)分配律</p><script type="math/tex; mode=display">(A \cup B)\cap C=(A\cap C)\cup(B\cap C)</script><p><img src="image-20230206140705953.png" alt="image-20230206140705953"></p><script type="math/tex; mode=display">(A \cap B)\cup C=(A\cup C)\cap(B\cup C)</script><p><img src="image-20230206140849230.png" alt="image-20230206140849230"></p><p>4)德摩根律</p><script type="math/tex; mode=display">\overline{A\cup B}=\bar A \cap\bar B</script><p><img src="image-20230206141037146.png" alt="image-20230206141037146"></p><script type="math/tex; mode=display">\overline{A\cap B}=\bar A \cup\bar B</script><p>例子：ABC都是试验随机事件：</p><p>1）A发生：A</p><p>2）只有A发生：$A \bar B\bar C$</p><p>3)有A，B，C卡有一个发生：$A \bar B\bar C+\bar A B\bar C+\bar A \bar B C$</p><p>4)ABC同时发生：ABC</p><p>5）ABC至少一个发生：A+B+C</p><p>6)至多一个发生：$\bar A \bar B\bar C+A \bar B\bar C+\bar A B\bar C+\bar A \bar B C$</p><p>7)恰有两个：$A  B\bar C+A B\bar C+A \bar B C$</p><p>8)至少两个：$A  B\bar C+A B\bar C+A \bar B C+ABC$或者$AB+BC+AC$</p>]]></content>
      
      
      
        <tags>
            
            <tag> Math Works </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性代数基本教程 （1）</title>
      <link href="/2023/02/06/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%9F%BA%E6%9C%AC%E6%95%99%E7%A8%8B-%EF%BC%881%EF%BC%89/"/>
      <url>/2023/02/06/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%9F%BA%E6%9C%AC%E6%95%99%E7%A8%8B-%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h1><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>这个科目，我们将要讨论矩阵，矩阵有很多不同于基础代数的东西。</p><p>​        比如说，将矩阵不满足交换率，不可以作分母$\frac{1}{A}$</p><h3 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h3><p>​        现在我们注意，这门学科起步于线性方程组</p><script type="math/tex; mode=display">\begin{equation}\left\{\begin{aligned}5x+6y & = & 7 \\9x+4y & = & 3\end{aligned}\right.\end{equation}</script><p>​        我们只解不化简：</p><p><img src="image-20230116173337212.png" alt="image-20230116173337212"></p><p>​        </p><p>我们引入这样的符号：</p><script type="math/tex; mode=display">\left |\begin{array}{cccc}a &b   \\c &d  \\\end{array}\right|</script><p>我们使之这个表示为$ad-bc$，这就是行列式</p><script type="math/tex; mode=display">\left| \begin{array}{} a_{11}& a_{12}\\a_{21}& a_{22}\\\end{array} \right|</script><p>​        其$a_{ij}$中i , j表示行标，列标。那么：</p><script type="math/tex; mode=display">\left| \begin{array}{} a_{11}& a_{12}\\a_{21}& a_{22}\\\end{array} \right|=a_{11}a_{22}-a_{12}a_{21}</script><p><img src="image-20230116174009469.png" alt="image-20230116174009469"></p><h3 id="三阶行列式"><a href="#三阶行列式" class="headerlink" title="三阶行列式"></a>三阶行列式</h3><p>​        </p><script type="math/tex; mode=display">\left | \begin{array}{}a_{11}&a_{12}&a_{13}\\a_{21}&a_{22}&a_{23}\\a_{31}&a_{32}&a_{33}\\\end{array}\right |</script><p> 这是一个三阶行列式，他的求法是这样的：</p><p><img src="image-20230116174744466.png" alt="image-20230116174744466"></p><p><img src="image-20230116174752643.png" alt="image-20230116174752643"></p><p><img src="image-20230116174917249.png" alt="image-20230116174917249"></p><p><img src="image-20230116174924145.png" alt="image-20230116174924145"></p><p>​        不过，还有别的方法，不推荐这种方法计算</p><h3 id="排列与逆序"><a href="#排列与逆序" class="headerlink" title="排列与逆序"></a>排列与逆序</h3><p>​        排列：由1，2，3，4，…n组成的一个有序数组叫N级排列</p><p>​                                                        123,132,213,231,312,321</p><p>​        这是一个三级排列</p><p>​        而3145不是一个五级排列。因为少了2.</p><p>​        N级排列有n!种</p><p>​        </p><p>​        逆序：</p><p>​        大数排在了小数前面，构成了一个逆序：</p><p>​        4213：4排在了2的前面，故这是一个逆序</p><p>​        逆序数：逆序的总数</p><p>​        4213：4后面3个，2：一个，之后没有了，故是4个</p><p>​        可以记作：N(4213)=4</p><p>​        偶排列和奇排列：排列数奇偶</p><p>​        若N(1234…n)=0则称之为标准排列（自然排列）</p><p>​        对于完全逆序的排列：N(n(n-1)(n-2)…321)=$\frac{n(n-1)}{2}$</p><p>​        </p><p>​        对换：交换两个数</p><p>​        我们对一个排序进行对换：可以发现奇偶性改变一次（后面行列式会用到）</p><p>​        N排列中，奇偶排列个数相等，各占一半</p><h3 id="基本求解"><a href="#基本求解" class="headerlink" title="基本求解"></a>基本求解</h3><p>​        我们是这样求解N阶的行列式：</p><script type="math/tex; mode=display">\begin{array}=\left|\begin{array}{cl}a_{11} &a_{12}&...&a_{1n-1}&a_{1n} \\a_{21} &a_{22}&...&a_{2n-1}&a_{2n}\\a_{31} &a_{32}&...&a_{3n-1}&a_{3n}\\...&...&...&...&...\\a_{n1}&a_{n2}&...&a_{nn-1}&a_{nn}\end{array} \right|\end{array}=\sum_{j_1j_2j_3...j_n}(-1)^{N(j_1j_2j_3...j_n)}a_{1j_1}a_{2j_2}a_{3j_3}...a_n{j_n}</script><p>这是按行展开的。</p><p>太抽象了，我们后面使用别的办法求解：是这样的—-我们的j_n求所有可能排列</p><p>我们有这样的一些特殊的矩阵值得注意：</p><p>1）下三角行列式</p><script type="math/tex; mode=display">\begin{array}=\left|\begin{array}{cl}a_{11} &0&...&0&0 \\a_{21} &a_{22}&...&0&0\\a_{31} &a_{32}&...&0 &0\\...&...&...&...&...\\a_{n1}&a_{n2}&...&a_{nn-1}&a_{nn}\end{array} \right|\end{array}</script><p>这是有趣的：因为我们这个行列式的值就是$a_{11}a_{22}a_{33}…a_{nn}$</p><p>2)上三角行列式</p><script type="math/tex; mode=display">\begin{array}=\left|\begin{array}{cl}a_{11} &a_{12}&...&a_{1n-1}&a_{1n} \\0 &a_{22}&...&a_{2n-1}&a_{2n}\\0 &0&...&a_{3n-1}&a_{3n}\\...&...&...&...&...\\0&0&...&0&a_{nn}\end{array} \right|\end{array}</script><p>这是有趣的：因为我们这个行列式的值就是$a_{11}a_{22}a_{33}…a_{nn}$，跟上面的一样</p><p>3）对角行列式</p><script type="math/tex; mode=display">\begin{array}=\left|\begin{array}{cl}a_{11} &0&...&0&0 \\0 &a_{22}&...&0&0\\0 &0&...&0&0\\...&...&...&...&...\\0&0&...&0&a_{nn}\end{array} \right|\end{array}</script><p>这个行列式的值还是上面我提到的那个</p><p>但是下面的有些不同。</p><p>反下三角行列式</p><script type="math/tex; mode=display">\begin{array}=\left|\begin{array}{cl}0 &0&...&0&a_{1n} \\0 &0&...&a_{2n-1}&a_{2n}\\0 &0&...&a_{3n-1}&a_{3n}\\...&...&...&...&...\\a_{n1}&a_{n2}&...&a_{nn-1}&a_{nn}\end{array} \right|\end{array}=(-1)^{\frac{n(n-1)}{2}}a_{1n}a_{2n-1}...a_{n1}</script><p>还有这种：</p><script type="math/tex; mode=display">\begin{array}=\left|\begin{array}{cl}a_{11} &a_{12}&...&a&a_{1n} \\a_{21} &a_{22}&...&a_{2n-1}&0\\a_{31} &a_{32}&...&0&0\\...&...&...&...&...\\a_{n1}&0&...&0&0\end{array} \right|\end{array}=(-1)^{\frac{n(n-1)}{2}}a_{1n}a_{2n-1}...a_{n1}</script><p>总结看来就是这样的：</p><p><img src="image-20230124183544432.png" alt="image-20230124183544432"></p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><h3 id="转置"><a href="#转置" class="headerlink" title="转置"></a>转置</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>​        现在来看一个行列式：</p><script type="math/tex; mode=display">D=\left |\begin{matrix}1&2&3\\1&1&1\\8&8&8\\\end{matrix}\right |</script><p>​        现在，我们把行写出列，列写成行，那就是：</p><script type="math/tex; mode=display">D^T=\left | \begin{matrix}1&1&8\\2&1&8\\3&1&8\\\end{matrix}\right |</script><p>那显然：</p><script type="math/tex; mode=display">(D^T)^T=D</script><h3 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h3><p>1）$D^T=D$</p><p>2)两行交换，行列式只<strong>变号</strong></p><p>3）两行（列）相等，D=0\</p><p>4)某一行都有公因子k,那就提N次：</p><script type="math/tex; mode=display">\left| \begin{matrix} ...&...&...&...\\ka &kb&kc&...\\...&...&...&...\\\end{matrix} \right |=k^n\left| \begin{matrix} ...&...&...&...\\a &b&c&...\\...&...&...&...\\\end{matrix} \right |</script><p>5)两行对应成比例：那还是行列式的值是0！</p><p>6）对于这样的行列式：</p><script type="math/tex; mode=display">\left| \begin{matrix} ...&...&...&...\\a+d &b+e&c+f&...\\...&...&...&...\\\end{matrix} \right |=\left| \begin{matrix} ...&...&...&...\\a &b&c&...\\...&...&...&...\\\end{matrix} \right |+\left| \begin{matrix} ...&...&...&...\\d &e&f&...\\...&...&...&...\\\end{matrix} \right |</script><p>其余行都不动</p><p>7）某一行乘上一个数加到另一行上，行列式的值还是不变！</p><p>我们可以使用这些性质来求解行列式的值：</p><p>1）<strong>先处理第一行，在处理第二行。。。依次处理即可！不要随意处理！</strong></p><p>或者：</p><p>2）<strong>先处理第一列，在处理第二列。。。依次处理即可！不要随意处理！</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Math Works </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matlab 入门 （1）</title>
      <link href="/2023/02/02/Matlab-%E5%85%A5%E9%97%A8-%EF%BC%881%EF%BC%89/"/>
      <url>/2023/02/02/Matlab-%E5%85%A5%E9%97%A8-%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Matlab入门（1）"><a href="#Matlab入门（1）" class="headerlink" title="Matlab入门（1）"></a>Matlab入门（1）</h1><h3 id="1-matlab（2014a）的界面介绍"><a href="#1-matlab（2014a）的界面介绍" class="headerlink" title="1.matlab（2014a）的界面介绍"></a>1.matlab（2014a）的界面介绍</h3><p><img src="image-20221224193149319.png" alt="image-20221224193149319"></p><p>​        左边是Current Folders:也就是文件区，正中心是命令窗口：输入命令的地方。右上角的WorkSpace（工作区）是储存变量的地方，而右下角的Command History则是命令的历史记录。</p><p><img src="image-20221224193538040.png" alt="image-20221224193538040"></p><p>​        这是2021A版的界面，不过，默认是没有命令历史窗口，需要从布局&gt;&gt;命令历史记录&gt;&gt;勾选停靠，才可以调出历史记录。</p><h3 id="2-matlab的运算符"><a href="#2-matlab的运算符" class="headerlink" title="2.matlab的运算符"></a>2.matlab的运算符</h3><p>​        运算符有以下几种：+，-，*，/，^(这是次方)</p><p><img src="image-20221224193919840.png" alt="image-20221224193919840"></p><p>​                                                                                             （实例）</p><p>​        Precedence Rules（运算优先级规则）</p><p>​        1.在同一级上从左到右</p><p>​        2.从高到底：</p><p>​            1.括号（）</p><p>​            2.次方（^）</p><p>​            3.乘除（*，/）</p><p>​            4.加减（+，-）</p><p>下面可以做一些练习：</p><ol><li><script type="math/tex; mode=display"></script><script type="math/tex; mode=display">cos(\sqrt{\frac{(1+2+3+4)^3}5})2.</script></li></ol><p>2.</p><script type="math/tex; mode=display">sin(\sqrt{\pi})+ln(tan(1))</script><p>3.</p><script type="math/tex; mode=display">2^{3.5\times1.7}</script><p>4.</p><script type="math/tex; mode=display">e^{sin(10)}</script><p>答案：<img src="ans.png" alt="ans"></p><p>​        函数可以嵌条调用，由此，我们可以分布，减少错误</p><p>​        如：</p><p><img src="1.png" alt="1"></p><p>​        对于非常复杂的运算，下面的那个是推介的</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>​        在Matlab里面，我们不需要声明变量的类型，就可以创造一个变量（LHS=RHS）</p><p><img src="image-20221224201954977.png" alt="image-20221224201954977"></p><p>​        此时，我们的WorkSpace：</p><p><img src="image-20221224202037986.png" alt="image-20221224202037986"></p><p>​        注意：</p><p>​        （1）大小写是敏感的，A与a是不一样的</p><p>​        （2）不要以数字开头，但是可以变量里有数字</p><p>​            变量的种类：</p><p><img src="image-20221224202401689.png" alt="image-20221224202401689"></p><p>​        我们默认创造的数字类型是double(不是int!)</p><p>​        查看变量的种类的方法：</p><p>​        双击workspace变量跳出表格：其名字为1 * 1 double,或者,在命令窗口打whos:</p><p><img src="image-20221224202650334.png" alt="image-20221224202650334"></p><p>​        注意：下面是一些特殊的关键字（Keyword）：</p><p><img src="image-20221224202919711.png" alt="image-20221224202919711"></p><p>​    （iskeyword查看已有关键字）</p><p>​        这是Matlab调用的优先级：</p><p><img src="image-20221224203437595.png" alt="image-20221224203437595"></p><h3 id="标准输出调整"><a href="#标准输出调整" class="headerlink" title="标准输出调整"></a>标准输出调整</h3><p>​        Format格式有以下几种</p><p><img src="image-20221224203627494.png" alt="image-20221224203627494"></p><p><img src="image-20221224203819131.png" alt="image-20221224203819131"></p><p><img src="image-20221224203840545.png" alt="image-20221224203840545"></p><p>​        （rat让一个小数以分数形式表示）</p><p>​        a=10;打上分号让matlab不会显示这句话的运算结果。</p><p>​        回溯历史指令：按上回到之前的指令</p><p><img src="image-20221224204349793.png" alt="image-20221224204349793"></p><p>​         vector and matrix</p><p>​        向量（vector）</p><p>​        行向量（row vector）</p><p>​        格式：var=[(num num2 …) ]或者是var=[num,num2,num3,…]</p><p>​        a=[1 2 3 4] or a=[1,2,3,4]</p><p><img src="image-20221224204934420.png" alt="image-20221224204934420"></p><p>​        列向量（column vector）</p><p>​        var=[num1;num2;num3;…]</p><p>​        a=[1;2;3;4]</p><p><img src="image-20221224205359229.png" alt="image-20221224205359229"></p><p>​        当然：a<em>b与b</em>a显然是不太一样的</p><p><img src="image-20221224205457245.png" alt="image-20221224205457245"></p><p>​        输入一个矩阵是这样的：</p><p>​        matrix=[num11,num12,num13…(Row1);num21,num22,…]</p><p>​        m=[1,2,3;4,5,6;7,8,9]</p><p><img src="image-20221224205752715.png" alt="image-20221224205752715"></p><p>​        索引方法</p><p>​        vector（index）(直接取第index个数)</p><p>​        matrix:</p><p>​        法一：matrix（rownum,colnum）</p><p>​        如m(1,2)</p><p><img src="image-20221224210140942.png" alt="image-20221224210140942"></p><p>​        法二：matrix([num1 num2],[num3 num4])</p><p>​        (取其排列组合的组合下表的数组成新的矩阵)</p><p>​        m([1 3],[1 3])</p><p><img src="image-20221224210443939.png" alt="image-20221224210443939"></p><p>​        方法三：matrix(a)</p><p>​        矩阵按列存储，故：m(1)=1,m(2)=4,m(4)=2…</p><p><img src="image-20221224210642070.png" alt="image-20221224210642070"></p><p>​        方法四：matrix([num1 num2 num3…（row1）；num4 num5,num6,…(row n)])</p><p>​        以方法三的排列为基础，取出m(num i)构成一个矩阵</p><p><img src="image-20221224211142755.png" alt="image-20221224211142755"></p><p>​        于是，我们也可以用如此的索引更改矩阵的数</p><h3 id="矩阵里有规律的快速输入"><a href="#矩阵里有规律的快速输入" class="headerlink" title="矩阵里有规律的快速输入"></a>矩阵里有规律的快速输入</h3><p>​    colon operator(:)</p><p>​    用于声明等差的vector</p><p>​    （1）a=num1:num2;(差为1的等差数列)</p><p><img src="image-20221224211635032.png" alt="image-20221224211635032"></p><p>​        (2)a=num1:num2:num3(差为num2的等差数列)</p><p><img src="image-20221224211754286.png" alt="image-20221224211754286"></p><p>​        (3)a=[num1:num2;num3:num4:num5;…]生成矩阵</p><p>​        (4)a=((num1,):)(表示全部)</p><p><img src="image-20221224212148933.png" alt="image-20221224212148933"></p><p>​        空[]去掉一行or一列</p><p><img src="image-20221224212232261.png" alt="image-20221224212232261"></p><p>​        对于可以合并为[A|B]的矩阵，matlab支持[A B]或者[A;B]的操作</p><p><img src="image-20221224212455824.png" alt="image-20221224212455824"></p><p>​        matlab的矩阵运算</p><p><img src="image-20221224212731039.png" alt="image-20221224212731039"></p><p>​        点乘点除是对应位置的数直接乘or除</p><p>​        特殊矩阵：</p><p><img src="image-20221224212922825.png" alt="image-20221224212922825"></p><p>​        matlab的特殊函数：</p><p><img src="image-20221224213011614.png" alt="image-20221224213011614"></p><h2 id="Matlab程序书写"><a href="#Matlab程序书写" class="headerlink" title="Matlab程序书写"></a>Matlab程序书写</h2><p>1.新建一个脚本程序</p><p>单击新建脚本后开始编写</p><p><img src="image-20221225192111703.png" alt="image-20221225192111703"></p><p>之后按F5或者是单击运行。</p><p>在一句最前面加上%表明这是注解</p><p>%%之间划分“节”，让脚本可以分块执行（其中变黄区块表面选中节）</p><p><img src="image-20221225193608481.png" alt="image-20221225193608481"></p><p>（Run：全部执行与Run Section：选中节执行）</p><p>Breaking point：对想检查的语句的下一句和行数处单击产生断点，从而在这一句停下来，随后可以再按continue或者是F5继续。</p><p>在Debug模式下可以将光标停在变量上查看具体属性</p><h3 id="基本的程序结构"><a href="#基本的程序结构" class="headerlink" title="基本的程序结构"></a>基本的程序结构</h3><p><img src="image-20221225194455880.png" alt="image-20221225194455880"></p><h3 id="基本的逻辑符号"><a href="#基本的逻辑符号" class="headerlink" title="基本的逻辑符号"></a>基本的逻辑符号</h3><p><img src="image-20221225194615602.png" alt="image-20221225194615602"></p><p>1.if/elseif/else结构</p><p>if condition1</p><p>​        statement1</p><p>elseif condition2</p><p>​        statement2</p><p>else</p><p>​        statement3</p><p>end</p><p>2.switch结构</p><p><img src="image-20221225195627982.png" alt="image-20221225195627982"></p><p>注意这里不同于C/C++:这里不需要break.</p><p>3.while</p><p><img src="image-20221225195751347.png" alt="image-20221225195751347"></p><p>(prod(1:n)表示阶乘)</p><p>4.for循环</p><p><img src="image-20221225200500864.png" alt="image-20221225200500864"></p><p>注意：</p><p>对于大矩阵要先初始化：</p><p>如A=zeros(2000,2000)</p><p>5.break</p><p>在while里break以中断while循环</p><p><img src="image-20221225201538350.png" alt="image-20221225201538350"></p><p>一些小提示：</p><p><img src="image-20221225201616354.png" alt="image-20221225201616354"></p><p>补充：clc：清空历史</p><h2 id="Matlab的自定义函数"><a href="#Matlab的自定义函数" class="headerlink" title="Matlab的自定义函数"></a>Matlab的自定义函数</h2><p>对于一个function文件：分为三个部分</p><p>function y=func()</p><p>comment：表明这个func的功能</p><p>功能代码</p><p><img src="image-20221225202351453.png" alt="image-20221225202351453"></p><p>为了可以使用自定义代码：请跳转到工作文件夹</p><p>Matlab可以定义多输入与多输出的函数：</p><p><img src="image-20221225203129714.png" alt="image-20221225203129714"></p><p>Matlab也支持定义匿名函数：</p><p><img src="image-20221225203836565.png" alt="image-20221225203836565"></p><h3 id="基本的变量结构"><a href="#基本的变量结构" class="headerlink" title="基本的变量结构"></a>基本的变量结构</h3><p><img src="image-20221226155045231.png" alt="image-20221226155045231"></p><p>这是常见的种类</p><h5 id="char-character"><a href="#char-character" class="headerlink" title="char:character"></a>char:character</h5><p>这是字符变量</p><h5 id="string：字符串"><a href="#string：字符串" class="headerlink" title="string：字符串"></a>string：字符串</h5><p>可以理解 为用数组储存的若干的char</p><p>于是可以这样加长：</p><p>s3=[s1 s2];</p><p>s4=[s1;s2];</p><h5 id="struct-结构"><a href="#struct-结构" class="headerlink" title="struct:结构"></a>struct:结构</h5><p><img src="image-20221226160704872.png" alt="image-20221226160704872"></p><h5 id="Cell"><a href="#Cell" class="headerlink" title="Cell"></a>Cell</h5><p><img src="image-20221226161005675.png" alt="image-20221226161005675"></p><p>Cell可以是一个大杂烩：里面可以储存不一样的数据</p><p><img src="image-20221226161237213.png" alt="image-20221226161237213"></p><p>一些函数：</p><p><img src="image-20221226161752014.png" alt="image-20221226161752014"></p><h1 id="matlab使用教程"><a href="#matlab使用教程" class="headerlink" title="matlab使用教程"></a>matlab使用教程</h1><p>如何把我们的数据存成文件：</p><p>save 文件名.mat（把文件以二进制的形式存储）</p><p>save 文件名.mat -ascii（把文件以ASCII的形式存储）</p><p>从excel中读取信息：</p><p>xlsread(‘filename.xlsx’,’列与行’)</p><p>xlswrite向Excel写入数据</p><p>（‘filename.xlsx’,数据,sheet,location）</p><p><img src="image-20221226163047228.png" alt="image-20221226163047228"></p><h3 id="Basic绘图"><a href="#Basic绘图" class="headerlink" title="Basic绘图"></a>Basic绘图</h3><p>​        我们怎么绘制一个函数呢？首先啊，我们知道函数是由足够密集的点连成的。也就是说，我们只需要把一个区间段的函数的X—Y点连起来就好了</p><p>​        我们使用plot函数来绘制图像：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>#<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span>是一对点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        也可以这样使用</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">plot</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>#where xx<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        如：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">plot</span><span class="token punctuation">(</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">0</span>：<span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20230122201210020.png" alt="image-20230122201210020"></p><p>​        运行上面的这句话，这就是结果</p><p>​        可不可以两个图像叠在一起嘞？可以</p><p><img src="image-20230122202456650.png" alt="image-20230122202456650"></p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">hold on<span class="token function">plot</span><span class="token punctuation">(</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span><span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span><span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hold off<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样就可以绘制多个图像了：hold on表明重复画不刷新画布</p><p>我们当然可以设置函数曲线的格式：</p><p><img src="image-20230122203054085.png" alt="image-20230122203054085"></p><p>​        这样：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">hold on<span class="token function">plot</span><span class="token punctuation">(</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span><span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'or'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">:</span><span class="token keyword">pi</span><span class="token operator">/</span><span class="token number">20</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'xg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hold off<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230122203329996.png" alt="image-20230122203329996"></p><p>字符串里的格式顺序没有要求，有什么需求就塞。</p><p>有的时候，我们的函数很多很乱，</p><p>比如说在脚本里运行如下的代码：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">hold onx<span class="token operator">=</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">4</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">;</span>y<span class="token operator">=</span><span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>h<span class="token operator">=</span><span class="token function">cos</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>w<span class="token operator">=</span><span class="token number">1.</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>g<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token operator">.*</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.</span><span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">)</span><span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">./</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'bd-'</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>h<span class="token punctuation">,</span><span class="token string">'gp:'</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>w<span class="token punctuation">,</span><span class="token string">'ro-'</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>g<span class="token punctuation">,</span><span class="token string">'c^-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hold off<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230122204242509.png" alt="image-20230122204242509"></p><p>我们可不可以做一点注记嘞？可以，使用legend函数就好了</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">legend</span><span class="token punctuation">(</span><span class="token string">'L1'</span><span class="token punctuation">,</span><span class="token punctuation">...</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意，这需要和你依次绘制函数的图像的顺序是一致的：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">#<span class="token punctuation">...</span><span class="token function">legend</span><span class="token punctuation">(</span><span class="token string">'sin(x)'</span><span class="token punctuation">,</span><span class="token string">'cos(x)'</span><span class="token punctuation">,</span><span class="token string">'Sigmoid'</span><span class="token punctuation">,</span><span class="token string">'Gauss Functions'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hold off<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="image-20230122204721499.png" alt="image-20230122204721499"></p><p>那。。。可不可以多上一个坐标轴的标记</p><p>使用函数xlabel(‘showstr’),ylabel(“showstr”)和图像标题title(‘showstr’)</p><p><img src="image-20230122205415466.png" alt="image-20230122205415466"></p><p>text()和annotation()</p><p>我们有的时候需要在图片上来打一些字符：这需要我们来使用$LaTex$实现！比如说：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x<span class="token operator">=</span><span class="token function">linspace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>y<span class="token operator">=</span>x<span class="token operator">.^</span><span class="token number">2.</span><span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">:</span><span class="token number">0.01</span><span class="token operator">:</span><span class="token number">2</span>    <span class="token function">line</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">i</span><span class="token operator">^</span><span class="token number">i</span><span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>str<span class="token operator">=</span><span class="token string">'$$\int_&#123;0&#125;^&#123;2&#125;x^2\sin(x) dx$$'</span><span class="token punctuation">;</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token number">0.25</span><span class="token punctuation">,</span><span class="token number">2.5</span><span class="token punctuation">,</span>str<span class="token punctuation">,</span><span class="token string">'Interpreter'</span><span class="token punctuation">,</span><span class="token string">'latex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>#固定用法<span class="token function">annotation</span><span class="token punctuation">(</span><span class="token string">'arrow'</span><span class="token punctuation">,</span><span class="token string">'X'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0.32</span><span class="token punctuation">,</span><span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'Y'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0.6</span><span class="token punctuation">,</span><span class="token number">0.4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230202185243199.png" alt="image-20230202185243199"></p><h4 id="图像字体的调整："><a href="#图像字体的调整：" class="headerlink" title="图像字体的调整："></a>图像字体的调整：</h4><p>​        我们的绘图本身就是由很多个元素构成：图像本身，线条，文字等等。我们现在想办法使用代码去更改他们！</p><p><img src="image-20230202190117981.png" alt="image-20230202190117981"></p><p>​        类似于C指针的，我们的操作也可以返回这些对象的句柄（指针），比如说：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">h<span class="token operator">=</span><span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        返回了函数画布的句柄！</p><p><img src="image-20230202190810805.png" alt="image-20230202190810805"></p><p>​        相关的可以了解对象树的概念！</p><p>​        我们使用get()方法来取回对象！set()来设定对象属性。</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x<span class="token operator">=</span><span class="token function">linspace</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>y<span class="token operator">=</span><span class="token function">sin</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>h<span class="token operator">=</span><span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">get</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        我们的控制台返回了这样一串东西：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">AlignVertexCenters<span class="token operator">:</span> off           Annotation<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span>×<span class="token number">1</span> matlab<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>eventdata<span class="token punctuation">.</span>Annotation<span class="token punctuation">]</span>         BeingDeleted<span class="token operator">:</span> off           BusyAction<span class="token operator">:</span> <span class="token string">'queue'</span>        ButtonDownFcn<span class="token operator">:</span> <span class="token string">''</span>             Children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span>×<span class="token number">0</span> GraphicsPlaceholder<span class="token punctuation">]</span>             Clipping<span class="token operator">:</span> on                Color<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0.4470</span> <span class="token number">0.7410</span><span class="token punctuation">]</span>            ColorMode<span class="token operator">:</span> <span class="token string">'auto'</span>          ContextMenu<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span>×<span class="token number">0</span> GraphicsPlaceholder<span class="token punctuation">]</span>            CreateFcn<span class="token operator">:</span> <span class="token string">''</span>      DataTipTemplate<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span>×<span class="token number">1</span> matlab<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>datatip<span class="token punctuation">.</span>DataTipTemplate<span class="token punctuation">]</span>            DeleteFcn<span class="token operator">:</span> <span class="token string">''</span>          DisplayName<span class="token operator">:</span> <span class="token string">''</span>     HandleVisibility<span class="token operator">:</span> <span class="token string">'on'</span>              HitTest<span class="token operator">:</span> on        Interruptible<span class="token operator">:</span> on             LineJoin<span class="token operator">:</span> <span class="token string">'round'</span>            LineStyle<span class="token operator">:</span> <span class="token string">'-'</span>        LineStyleMode<span class="token operator">:</span> <span class="token string">'auto'</span>            LineWidth<span class="token operator">:</span> <span class="token number">0.5000</span>               Marker<span class="token operator">:</span> <span class="token string">'none'</span>      MarkerEdgeColor<span class="token operator">:</span> <span class="token string">'auto'</span>      MarkerFaceColor<span class="token operator">:</span> <span class="token string">'none'</span>        MarkerIndices<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span>×<span class="token number">1000</span> uint64<span class="token punctuation">]</span>           MarkerMode<span class="token operator">:</span> <span class="token string">'auto'</span>           MarkerSize<span class="token operator">:</span> <span class="token number">6</span>               Parent<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span>×<span class="token number">1</span> Axes<span class="token punctuation">]</span>        PickableParts<span class="token operator">:</span> <span class="token string">'visible'</span>             Selected<span class="token operator">:</span> off   SelectionHighlight<span class="token operator">:</span> on          SeriesIndex<span class="token operator">:</span> <span class="token number">1</span>                  Tag<span class="token operator">:</span> <span class="token string">''</span>                 Type<span class="token operator">:</span> <span class="token string">'line'</span>             UserData<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>              Visible<span class="token operator">:</span> on                XData<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span>×<span class="token number">1000</span> double<span class="token punctuation">]</span>            XDataMode<span class="token operator">:</span> <span class="token string">'manual'</span>          XDataSource<span class="token operator">:</span> <span class="token string">''</span>                YData<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span>×<span class="token number">1000</span> double<span class="token punctuation">]</span>          YDataSource<span class="token operator">:</span> <span class="token string">''</span>                ZData<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span>×<span class="token number">0</span> double<span class="token punctuation">]</span>          ZDataSource<span class="token operator">:</span> <span class="token string">''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        然后运行:get(gca)</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">ALim<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span><span class="token punctuation">]</span>                    ALimMode<span class="token operator">:</span> <span class="token string">'auto'</span>                  AlphaScale<span class="token operator">:</span> <span class="token string">'linear'</span>                    Alphamap<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span>×<span class="token number">64</span> double<span class="token punctuation">]</span>           AmbientLightColor<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span>                BeingDeleted<span class="token operator">:</span> off                         Box<span class="token operator">:</span> on                    BoxStyle<span class="token operator">:</span> <span class="token string">'back'</span>                  BusyAction<span class="token operator">:</span> <span class="token string">'queue'</span>               ButtonDownFcn<span class="token operator">:</span> <span class="token string">''</span>                        CLim<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span><span class="token punctuation">]</span>                    CLimMode<span class="token operator">:</span> <span class="token string">'auto'</span>              CameraPosition<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3.5000</span> <span class="token number">0</span> <span class="token number">17.3205</span><span class="token punctuation">]</span>          CameraPositionMode<span class="token operator">:</span> <span class="token string">'auto'</span>                CameraTarget<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3.5000</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">]</span>            CameraTargetMode<span class="token operator">:</span> <span class="token string">'auto'</span>              CameraUpVector<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span><span class="token punctuation">]</span>          CameraUpVectorMode<span class="token operator">:</span> <span class="token string">'auto'</span>             CameraViewAngle<span class="token operator">:</span> <span class="token number">6.6086</span>         CameraViewAngleMode<span class="token operator">:</span> <span class="token string">'auto'</span>                    Children<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span>×<span class="token number">1</span> Line<span class="token punctuation">]</span>                    Clipping<span class="token operator">:</span> on               ClippingStyle<span class="token operator">:</span> <span class="token string">'3dbox'</span>                       Color<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span>                  ColorOrder<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">7</span>×<span class="token number">3</span> double<span class="token punctuation">]</span>             ColorOrderIndex<span class="token operator">:</span> <span class="token number">2</span>                  ColorScale<span class="token operator">:</span> <span class="token string">'linear'</span>                    Colormap<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">256</span>×<span class="token number">3</span> double<span class="token punctuation">]</span>                 ContextMenu<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span>×<span class="token number">0</span> GraphicsPlaceholder<span class="token punctuation">]</span>                   CreateFcn<span class="token operator">:</span> <span class="token string">''</span>                CurrentPoint<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span>×<span class="token number">3</span> double<span class="token punctuation">]</span>             DataAspectRatio<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3.5000</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span>         DataAspectRatioMode<span class="token operator">:</span> <span class="token string">'auto'</span>                   DeleteFcn<span class="token operator">:</span> <span class="token string">''</span>                   FontAngle<span class="token operator">:</span> <span class="token string">'normal'</span>                    FontName<span class="token operator">:</span> <span class="token string">'Helvetica'</span>                    FontSize<span class="token operator">:</span> <span class="token number">10</span>                FontSizeMode<span class="token operator">:</span> <span class="token string">'auto'</span>               FontSmoothing<span class="token operator">:</span> on                   FontUnits<span class="token operator">:</span> <span class="token string">'points'</span>                  FontWeight<span class="token operator">:</span> <span class="token string">'normal'</span>                   GridAlpha<span class="token operator">:</span> <span class="token number">0.1500</span>               GridAlphaMode<span class="token operator">:</span> <span class="token string">'auto'</span>                   GridColor<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0.1500</span> <span class="token number">0.1500</span> <span class="token number">0.1500</span><span class="token punctuation">]</span>               GridColorMode<span class="token operator">:</span> <span class="token string">'auto'</span>               GridLineStyle<span class="token operator">:</span> <span class="token string">'-'</span>            HandleVisibility<span class="token operator">:</span> <span class="token string">'on'</span>                     HitTest<span class="token operator">:</span> on               InnerPosition<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0.1300</span> <span class="token number">0.1100</span> <span class="token number">0.7750</span> <span class="token number">0.8150</span><span class="token punctuation">]</span>                Interactions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span>×<span class="token number">1</span> matlab<span class="token punctuation">.</span>graphics<span class="token punctuation">.</span>interaction<span class="token punctuation">.</span>interface<span class="token punctuation">.</span>DefaultAxesInteractionSet<span class="token punctuation">]</span>               Interruptible<span class="token operator">:</span> on     LabelFontSizeMultiplier<span class="token operator">:</span> <span class="token number">1.1000</span>                       Layer<span class="token operator">:</span> <span class="token string">'bottom'</span>                      Layout<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span>×<span class="token number">0</span> matlab<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>LayoutOptions<span class="token punctuation">]</span>                      Legend<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span>×<span class="token number">0</span> GraphicsPlaceholder<span class="token punctuation">]</span>              LineStyleOrder<span class="token operator">:</span> <span class="token string">'-'</span>         LineStyleOrderIndex<span class="token operator">:</span> <span class="token number">1</span>                   LineWidth<span class="token operator">:</span> <span class="token number">0.5000</span>              MinorGridAlpha<span class="token operator">:</span> <span class="token number">0.2500</span>          MinorGridAlphaMode<span class="token operator">:</span> <span class="token string">'auto'</span>              MinorGridColor<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0.1000</span> <span class="token number">0.1000</span> <span class="token number">0.1000</span><span class="token punctuation">]</span>          MinorGridColorMode<span class="token operator">:</span> <span class="token string">'auto'</span>          MinorGridLineStyle<span class="token operator">:</span> <span class="token string">':'</span>                    NextPlot<span class="token operator">:</span> <span class="token string">'replace'</span>             NextSeriesIndex<span class="token operator">:</span> <span class="token number">2</span>               OuterPosition<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span>                      Parent<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span>×<span class="token number">1</span> Figure<span class="token punctuation">]</span>               PickableParts<span class="token operator">:</span> <span class="token string">'visible'</span>          PlotBoxAspectRatio<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">0.7896</span> <span class="token number">0.7896</span><span class="token punctuation">]</span>      PlotBoxAspectRatioMode<span class="token operator">:</span> <span class="token string">'auto'</span>                    Position<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0.1300</span> <span class="token number">0.1100</span> <span class="token number">0.7750</span> <span class="token number">0.8150</span><span class="token punctuation">]</span>          PositionConstraint<span class="token operator">:</span> <span class="token string">'outerposition'</span>                  Projection<span class="token operator">:</span> <span class="token string">'orthographic'</span>                    Selected<span class="token operator">:</span> off          SelectionHighlight<span class="token operator">:</span> on                  SortMethod<span class="token operator">:</span> <span class="token string">'childorder'</span>                    Subtitle<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span>×<span class="token number">1</span> Text<span class="token punctuation">]</span>          SubtitleFontWeight<span class="token operator">:</span> <span class="token string">'normal'</span>                         Tag<span class="token operator">:</span> <span class="token string">''</span>                     TickDir<span class="token operator">:</span> <span class="token string">'in'</span>                 TickDirMode<span class="token operator">:</span> <span class="token string">'auto'</span>        TickLabelInterpreter<span class="token operator">:</span> <span class="token string">'tex'</span>                  TickLength<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0.0100</span> <span class="token number">0.0250</span><span class="token punctuation">]</span>                  TightInset<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0.0512</span> <span class="token number">0.0540</span> <span class="token number">0.0071</span> <span class="token number">0.0206</span><span class="token punctuation">]</span>                       Title<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span>×<span class="token number">1</span> Text<span class="token punctuation">]</span>     TitleFontSizeMultiplier<span class="token operator">:</span> <span class="token number">1.1000</span>             TitleFontWeight<span class="token operator">:</span> <span class="token string">'normal'</span>    TitleHorizontalAlignment<span class="token operator">:</span> <span class="token string">'center'</span>                     Toolbar<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span>×<span class="token number">1</span> AxesToolbar<span class="token punctuation">]</span>                        Type<span class="token operator">:</span> <span class="token string">'axes'</span>                       Units<span class="token operator">:</span> <span class="token string">'normalized'</span>                    UserData<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                        View<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">90</span><span class="token punctuation">]</span>                     Visible<span class="token operator">:</span> on                       XAxis<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span>×<span class="token number">1</span> NumericRuler<span class="token punctuation">]</span>               XAxisLocation<span class="token operator">:</span> <span class="token string">'bottom'</span>                      XColor<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0.1500</span> <span class="token number">0.1500</span> <span class="token number">0.1500</span><span class="token punctuation">]</span>                  XColorMode<span class="token operator">:</span> <span class="token string">'auto'</span>                        XDir<span class="token operator">:</span> <span class="token string">'normal'</span>                       XGrid<span class="token operator">:</span> off                      XLabel<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span>×<span class="token number">1</span> Text<span class="token punctuation">]</span>                        XLim<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">7</span><span class="token punctuation">]</span>                    XLimMode<span class="token operator">:</span> <span class="token string">'auto'</span>                XLimitMethod<span class="token operator">:</span> <span class="token string">'tickaligned'</span>                  XMinorGrid<span class="token operator">:</span> off                  XMinorTick<span class="token operator">:</span> off                      XScale<span class="token operator">:</span> <span class="token string">'linear'</span>                       XTick<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span><span class="token punctuation">]</span>                  XTickLabel<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token number">8</span>×<span class="token number">1</span> cell<span class="token punctuation">&#125;</span>              XTickLabelMode<span class="token operator">:</span> <span class="token string">'auto'</span>          XTickLabelRotation<span class="token operator">:</span> <span class="token number">0</span>                   XTickMode<span class="token operator">:</span> <span class="token string">'auto'</span>                       YAxis<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span>×<span class="token number">1</span> NumericRuler<span class="token punctuation">]</span>               YAxisLocation<span class="token operator">:</span> <span class="token string">'left'</span>                      YColor<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0.1500</span> <span class="token number">0.1500</span> <span class="token number">0.1500</span><span class="token punctuation">]</span>                  YColorMode<span class="token operator">:</span> <span class="token string">'auto'</span>                        YDir<span class="token operator">:</span> <span class="token string">'normal'</span>                       YGrid<span class="token operator">:</span> off                      YLabel<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span>×<span class="token number">1</span> Text<span class="token punctuation">]</span>                        YLim<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span>                    YLimMode<span class="token operator">:</span> <span class="token string">'auto'</span>                YLimitMethod<span class="token operator">:</span> <span class="token string">'tickaligned'</span>                  YMinorGrid<span class="token operator">:</span> off                  YMinorTick<span class="token operator">:</span> off                      YScale<span class="token operator">:</span> <span class="token string">'linear'</span>                       YTick<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span>×<span class="token number">11</span> double<span class="token punctuation">]</span>                  YTickLabel<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token number">11</span>×<span class="token number">1</span> cell<span class="token punctuation">&#125;</span>              YTickLabelMode<span class="token operator">:</span> <span class="token string">'auto'</span>          YTickLabelRotation<span class="token operator">:</span> <span class="token number">0</span>                   YTickMode<span class="token operator">:</span> <span class="token string">'auto'</span>                       ZAxis<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span>×<span class="token number">1</span> NumericRuler<span class="token punctuation">]</span>                      ZColor<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0.1500</span> <span class="token number">0.1500</span> <span class="token number">0.1500</span><span class="token punctuation">]</span>                  ZColorMode<span class="token operator">:</span> <span class="token string">'auto'</span>                        ZDir<span class="token operator">:</span> <span class="token string">'normal'</span>                       ZGrid<span class="token operator">:</span> off                      ZLabel<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span>×<span class="token number">1</span> Text<span class="token punctuation">]</span>                        ZLim<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span>                    ZLimMode<span class="token operator">:</span> <span class="token string">'auto'</span>                ZLimitMethod<span class="token operator">:</span> <span class="token string">'tickaligned'</span>                  ZMinorGrid<span class="token operator">:</span> off                  ZMinorTick<span class="token operator">:</span> off                      ZScale<span class="token operator">:</span> <span class="token string">'linear'</span>                       ZTick<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span><span class="token punctuation">]</span>                  ZTickLabel<span class="token operator">:</span> <span class="token string">''</span>              ZTickLabelMode<span class="token operator">:</span> <span class="token string">'auto'</span>          ZTickLabelRotation<span class="token operator">:</span> <span class="token number">0</span>                   ZTickMode<span class="token operator">:</span> <span class="token string">'auto'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        现在，我们很想设定GCA属性，就是使用set指令：我们找到了这个的指针（句柄）</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">set</span><span class="token punctuation">(</span>gca<span class="token punctuation">,</span><span class="token string">'XLim'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">set</span><span class="token punctuation">(</span>gca<span class="token punctuation">,</span><span class="token string">'YLim'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1.2</span><span class="token punctuation">,</span><span class="token number">1.2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​        当然。。。其实还有更简单的：</p><pre class="line-numbers language-none"><code class="language-none">xlim([0,2*pi]);ylim([-1.2,1.2]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="多重图像展示"><a href="#多重图像展示" class="headerlink" title="多重图像展示"></a>多重图像展示</h3><p>​        我们可以使用figure来分开画图：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x<span class="token operator">=</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">;</span>y1<span class="token operator">=</span>x<span class="token operator">.^</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">;</span>y2<span class="token operator">=</span><span class="token function">exp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>figure<span class="token punctuation">,</span><span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y1<span class="token punctuation">)</span><span class="token punctuation">;</span>figure<span class="token punctuation">,</span><span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230202195804959-167534035717165.png" alt="image-20230202195804959"></p><p>也可以在一个窗口上显示多个图像</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">subplot</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20230202200620906.png" alt="image-20230202200620906"></p><p><img src="image-20230202200718788.png" alt="image-20230202200718788"></p><p><img src="image-20230202200912381.png" alt="image-20230202200912381"></p><p><img src="image-20230202200933449.png" alt="image-20230202200933449"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学教程（5）</title>
      <link href="/2023/02/02/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E6%95%99%E7%A8%8B%EF%BC%885%EF%BC%89/"/>
      <url>/2023/02/02/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E6%95%99%E7%A8%8B%EF%BC%885%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="向量与线性计算"><a href="#向量与线性计算" class="headerlink" title="向量与线性计算"></a>向量与线性计算</h3><h4 id="向量"><a href="#向量" class="headerlink" title="向量"></a>向量</h4><p>​        一个<strong>有大小，又有方向的量</strong> 我们有概念：模长（长度），假使 向量被记作:$\vec\alpha$，则它的长度就是它的模长：$|\vec\alpha|$,</p><p>​        我们又让长度就是1的向量成为单位向量。长度是0的向量是零向量。</p><p>​        位置关系上：有共线，垂直和相等的关系。</p><p>​        平行指的是夹角是0或者是180度。垂直就是90度等。</p><h4 id="线性运算"><a href="#线性运算" class="headerlink" title="线性运算"></a>线性运算</h4><p><img src="image-20230202144129473.png" alt="image-20230202144129473"></p><p><img src="image-20230202144231912.png" alt="image-20230202144231912"></p><p><img src="image-20230202144315494.png" alt="image-20230202144315494"></p><p><img src="image-20230202144356921.png" alt="image-20230202144356921"></p><h4 id="方向余弦"><a href="#方向余弦" class="headerlink" title="方向余弦"></a>方向余弦</h4><p>​        我们有时只考虑方向，我们可以把它归一化：这需要：</p><script type="math/tex; mode=display">\vec{e}=(\frac{x}{r},\frac{y}{r},\frac{z}{r})</script><p>其中：$r=\sqrt{x^2+y^2+z^2}$</p><p>​        有时也这样记：</p><script type="math/tex; mode=display">\vec{e}=(\cos\alpha,\cos\beta,\cos\gamma)</script><p>​        由于这样，我们可以把任意向量拆解为方向向量和长度的数量积</p><script type="math/tex; mode=display">\vec{\alpha}=L\vec{e}</script><h4 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>​        我们实际上可以使用如下的公式来计算一个向量在另一个向量的投影</p><script type="math/tex; mode=display">Prj_u\vec{a}=|\vec{a}|\cos\varphi</script><p>$\varphi$ 是两个向量的夹角</p><h5 id="性质："><a href="#性质：" class="headerlink" title="性质："></a>性质：</h5><script type="math/tex; mode=display">1)Prj_u(\vec{a}+\vec{b})=Prj_u\vec{a}+Prj_u\vec{b}</script><script type="math/tex; mode=display">2)Prj_u\lambda\vec{a}=\lambda Prj_u\vec{a}</script><h3 id="数量积"><a href="#数量积" class="headerlink" title="数量积"></a>数量积</h3><p><img src="image-20230202145138671.png" alt="image-20230202145138671"></p><p><img src="image-20230202145200044.png" alt="image-20230202145200044"></p><p><img src="image-20230202145233436.png" alt="image-20230202145233436"></p><h3 id="向量积"><a href="#向量积" class="headerlink" title="向量积"></a>向量积</h3><p>​        这是我们不熟悉的：</p><script type="math/tex; mode=display">\vec{c}=\vec{a}\times \vec{b}</script><p>​        首先模长是：</p><script type="math/tex; mode=display">|\vec{c}|=|\vec{a}||\vec{b}|\sin\theta</script><pre><code>     方向：右手从a到b。</code></pre><p>​        注意结果是一个向量！</p><p><img src="image-20230202145456287.png" alt="image-20230202145456287"></p><p><img src="image-20230202145504892.png" alt="image-20230202145504892"></p><h3 id="平面"><a href="#平面" class="headerlink" title="平面"></a>平面</h3><h4 id="曲面"><a href="#曲面" class="headerlink" title="曲面"></a>曲面</h4><p>​        曲面可以看成运动曲线的结果，我们常常使用方程：</p><script type="math/tex; mode=display">F(x,y,z)=0</script><p>来描述！</p><p>​        由此，曲线可以视作两个曲面的交：</p><script type="math/tex; mode=display">\begin{equation}\left\{\begin{aligned}F(x,y,z) & = 0 \\G(x,y,z) & =  0\end{aligned}\right.\end{equation}</script><p>其法线垂直于平面。</p><h4 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h4><h5 id="点法式"><a href="#点法式" class="headerlink" title="点法式"></a>点法式</h5><p>​        如果我们已知一个点和一个法线：我们可以求出方程：</p><p>​        已知：$n(A,B,C)，M(x_0,y_0,z_0)$</p><script type="math/tex; mode=display">L:A(x-x_0)+B(y-y_0)+C(z-z_0)=0</script><p>一般式</p><p>​        拆开上面的式子，将常数化作一个指标D</p><script type="math/tex; mode=display">L:Ax+By+Cz+D=0</script><p><img src="image-20230202150419737.png" alt="image-20230202150419737"></p><h3 id="平面的夹角"><a href="#平面的夹角" class="headerlink" title="平面的夹角"></a>平面的夹角</h3><p>我们回忆高中两直线的夹角：</p><script type="math/tex; mode=display">\cos \theta=|\cos(\vec{n_1},\vec{n_2})|</script><p>平面是一样的：</p><script type="math/tex; mode=display">\cos \theta=|\cos(\vec{n_1},\vec{n_2})|</script><p>只不过：</p><script type="math/tex; mode=display">\cos \theta=\frac{A_1A_2+B_1B_2+C_1C_2}{\sqrt{(A_1^2+B_1^2+C_1^2)(A_2^2+B_2^2+C_2^2)}}</script><p>推广了一个维度！</p><h3 id="空间直线与方程"><a href="#空间直线与方程" class="headerlink" title="空间直线与方程"></a>空间直线与方程</h3><p>回到这个概念：</p><p>曲线可以视作两个曲面的交：</p><script type="math/tex; mode=display">\begin{equation}\left\{\begin{aligned}F(x,y,z) & = 0 \\G(x,y,z) & =  0\end{aligned}\right.\end{equation}</script><p>直线就是：</p><script type="math/tex; mode=display">\begin{equation}\left\{\begin{aligned}A_1x+B_1y+C_1z+D_1 & = 0 \\A_2x+B_2y+C_2z+D_2 & =  0\end{aligned}\right.\end{equation}</script><h4 id="对称式"><a href="#对称式" class="headerlink" title="对称式"></a>对称式</h4><p>​        如果已知：$M(x_0,y_0,z_0),S(m,n,p)$则：</p><script type="math/tex; mode=display">\frac{x-x_0}{m}=\frac{y-y_0}{n}=\frac{z-z_0}{p}</script><h4 id="参数式"><a href="#参数式" class="headerlink" title="参数式"></a>参数式</h4><script type="math/tex; mode=display">\begin{equation}\left\{\begin{aligned}x & = mt+x_0 \\y & =  nt+y_0\\y & =  pt+z_0\end{aligned}\right.\end{equation}</script><p>​        就是在对称式的基础上加上了等于T的条件！</p><h4 id="平面与直线的夹角"><a href="#平面与直线的夹角" class="headerlink" title="平面与直线的夹角"></a>平面与直线的夹角</h4><p>​        类似的，我们可以得到：</p><script type="math/tex; mode=display">\sin\varphi=|\cos(\vec{s},\vec{n})|=\frac{|Am+Bn+Cp|}{\sqrt{(A^2+B^2+C^2)(m^2+n^2+p^2)}}</script><p>​        于是：</p><script type="math/tex; mode=display">垂直: \frac{A}{m}=\frac{B}{n}=\frac{C}{p}</script><script type="math/tex; mode=display">平行:Am+Bn+Cp=0</script><h3 id="曲面-1"><a href="#曲面-1" class="headerlink" title="曲面"></a>曲面</h3><h4 id="旋转曲面"><a href="#旋转曲面" class="headerlink" title="旋转曲面"></a>旋转曲面</h4><p>​        由曲线旋转产生</p><p>​        假设我们原先的曲线的方程是：$f(y,z)=0$，他显然位于$yOz$平面上，其上有一点:$M_1(0,y_1,z_1)$</p><p>​        旋转之后：$M(x,y,z)$一定有：</p><script type="math/tex; mode=display">z=z_1且y_1=\pm\sqrt{x^2+y^2}</script><p>​        于是：</p><script type="math/tex; mode=display">f(\pm\sqrt{x^2+y^2},z)=0</script><p>​        相同的办法推理：对于$f(y,z)=0$绕Y轴旋转：</p><script type="math/tex; mode=display">f(y,\pm\sqrt{x^2+z^2})=0</script><p><img src="image-20230202152227760.png" alt="image-20230202152227760"></p><p>绕谁转，谁不变：剩下两个在旁边。</p><h4 id="曲面类型"><a href="#曲面类型" class="headerlink" title="曲面类型"></a>曲面类型</h4><h5 id="柱面："><a href="#柱面：" class="headerlink" title="柱面："></a>柱面：</h5><p>​        把一个平面作为准线，沿一条线（母线）移动：</p><script type="math/tex; mode=display">x^2+y^2=R^2</script><p>​        是一个代表</p><p><img src="image-20230202152508816.png" alt="image-20230202152508816"></p><p>​        如果是抛物线：就产生抛物面：</p><p><img src="image-20230202152605842.png" alt="image-20230202152605842"></p><p>​        缺什么以什么为准线移动！</p><h5 id="二次曲面"><a href="#二次曲面" class="headerlink" title="二次曲面"></a>二次曲面</h5><p>1）椭圆锥面</p><script type="math/tex; mode=display">\frac{x^2}{a^2}+\frac{y^2}{b^2}=z^2</script><p>​        只要令$z=t$，我们马上发现这就是个椭圆</p><p><img src="image-20230202152818674.png" alt="image-20230202152818674"></p><p>​        这里引入伸缩的概念：我们对变量可以伸缩：拉长或缩短，直接是令$y’=\lambda y$带入方程来看</p><p>2）椭球面</p><script type="math/tex; mode=display">\frac{x^2}{a^2}+\frac{y^2}{b^2}+\frac{z^2}{c^2}=1</script><p>3)单叶双曲面</p><script type="math/tex; mode=display">\frac{x^2}{a^2}+\frac{y^2}{b^2}-\frac{z^2}{c^2}=1</script><p>本质上是$\frac{x^2}{a^2}-\frac{z^2}{c^2}=1$先绕Y轴旋转，随后伸缩$\frac{b}{a}$倍数</p><p>4）双叶双曲面</p><script type="math/tex; mode=display">\frac{x^2}{a^2}+\frac{y^2}{b^2}-\frac{z^2}{c^2}=-1</script><p>5）椭圆抛物面：</p><script type="math/tex; mode=display">\frac{x^2}{a^2}+\frac{y^2}{b^2}=z</script><p>​        可以看作一个$P^2=C$的类抛物线看待</p><p>6）双曲抛物面</p><script type="math/tex; mode=display">\frac{x^2}{a^2}-\frac{y^2}{b^2}=z</script>]]></content>
      
      
      
        <tags>
            
            <tag> Math Works </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学教程（4）</title>
      <link href="/2023/02/02/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E6%95%99%E7%A8%8B%EF%BC%884%EF%BC%89/"/>
      <url>/2023/02/02/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E6%95%99%E7%A8%8B%EF%BC%884%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="定积分"><a href="#定积分" class="headerlink" title="定积分"></a>定积分</h1><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>​    定积分是从求解曲边梯形的面积产生的：就是说求解类似于如下的图像的面积</p><p><img src="image-20230124151114672.png" alt="image-20230124151114672"></p><p>​        怎么搞？我们试想一下，使用如下的方式：通过把面积切成很小的小块：</p><p>由于这些面积可以近似成矩形甚至是梯形，我们可以用面积和近似代替曲边梯形的面积。</p><p><img src="image-20230124151244623.png" alt="image-20230124151244623"></p><p>数学上是这么</p><script type="math/tex; mode=display">假设分点:a=x_0<x_1<x_2...<x_{n-1}<x_n=b</script><p>产生了</p><script type="math/tex; mode=display">\Delta x_1,\Delta x_2,...,\Delta x_n,随后令\lambda=max\{\Delta x_1,\Delta x_2,...,\Delta x_n\}</script><p>​        只要切的够小，我们就可以:$S\approx \sum_{k=1}^n \Delta x_kf(\sigma_k)$</p><p>​        其中$\sigma_k$是小区间上的一个任意点。怎么逼近真实值呢？让点取的密集一些：就是令$\lambda \rightarrow 0$就好了：产生的极限就是面积。</p><p>​        我们可以引入定积分了：</p><p>​        定义：$f(x)$在[a,b]有界，在[a,b]上任意插入若干个分点（随便插入），产生N个小区间，其长度为:$x_k(0&lt;k\leq n)$,又在区间上任意取一点$\sigma_i$，现在取出这些区间内最大长度的长度值记成$\lambda$,也就是$\lambda=max\{\Delta x_1,\Delta x_2,…\Delta x_n\}$。这下有了假设和的极限：$\lim\limits_{\lambda \rightarrow 0} \sum_{k=1}^n \Delta x_kf(\sigma_k)$ 假设他存在：就引入这样的记号：</p><script type="math/tex; mode=display">\int_a^b f(x)dx=\lim\limits_{\lambda \rightarrow 0} \sum_{k=1}^n \Delta x_kf(\sigma_k)</script><p>​        其中a,b叫积分下限和积分上限，被积函数是f(x),积分区间是[a,b],积分变量是x</p><p>​        注意，这个值（或者说这个定积分）与积分变量无关，也就是说：</p><script type="math/tex; mode=display">\int_a^b f(t)dt=\int_a^b f(x)dx</script><p>​        定理1：函数只要连续就一定可积。</p><p>​        定理2：函数<strong>有界</strong>且<strong>有有限个间断点</strong>也可积。</p><h3 id="定积分的几何意义"><a href="#定积分的几何意义" class="headerlink" title="定积分的几何意义"></a>定积分的几何意义</h3><p>​        1.$f(x)\geq0$</p><p>​        <img src="image-20230124153747909.png" alt="image-20230124153747909"></p><p>​        就是阴影部分面积</p><p>​        2.$f(x)\leq0$</p><p><img src="image-20230124153828323.png" alt="image-20230124153828323"></p><p>​        注意是阴影部分面积的相反数，这是因为：</p><script type="math/tex; mode=display">\int_a^b f(x)dx=\lim\limits_{\lambda \rightarrow 0} \sum_{k=1}^n \Delta x_kf(\sigma_k)</script><p>​        中：$f(\sigma_k)&lt;0$</p><h6 id="矩阵法"><a href="#矩阵法" class="headerlink" title="矩阵法"></a>矩阵法</h6><p>​        我们使用切分成矩阵的方式来计算定积分</p><p><img src="image-20230124154130711.png" alt="image-20230124154130711"></p><h6 id="梯形法"><a href="#梯形法" class="headerlink" title="梯形法"></a>梯形法</h6><p><img src="image-20230124154214737.png" alt="image-20230124154214737"></p><p>看看就好，不用他来计算</p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><p>1）a=b下：$\int_a^b f(x)dx=0$</p><p>2)$\int_a^b f(x)dx=-\int_b^a f(x)dx$</p><p>3)$\int_a^b (\alpha f(x)+\beta g(x))dx=\alpha \int_a^b f(x)dx+\beta\int_a^b g(x)dx$</p><p>4)$\int_a^b f(x)dx=\int_a^c f(x)dx+\int_c^b f(x)dx$(切成两块加)</p><p>5)$f(x)\equiv 1,\int_a^b 1dx=b-a,\int_a^b kdx=k(b-a)$</p><p>6)$f(x)\geq 0,\int_a^b f(x)dx\geq0$</p><p>7)$f(x)\leq 0,\int_a^b f(x)dx\leq0$</p><p>8)$f(x)\leq g(x),\int_a^b f(x)dx\leq\int_a^b g(x)dx$</p><p>来点推论：</p><p>1.</p><script type="math/tex; mode=display">|\int_a^b f(x)dx|\leq\int_a^b |f(x)|dx</script><p>2.函数的极大值和极小值为$M,m$</p><script type="math/tex; mode=display">m(b-a)\leq\int_a^b f(x)dx\leq M(b-a)</script><p>9)定积分中值定理：$f(x)$连续,$\exists \xi\in[a,b]$</p><script type="math/tex; mode=display">\int_a^b f(x)dx=f(\xi)(b-a)</script><p>这个定理可以用来化简带有积分的极限</p><p><img src="image-20230124155256516.png" alt="image-20230124155256516"></p><h3 id="微积分的基本公式"><a href="#微积分的基本公式" class="headerlink" title="微积分的基本公式"></a>微积分的基本公式</h3><h4 id="积分上限函数"><a href="#积分上限函数" class="headerlink" title="积分上限函数"></a>积分上限函数</h4><p>我们把一个限变成一个变量，有点像把一边可以自由滑动，这样就有一个变限积分函数，我们把目光集中在x上：</p><script type="math/tex; mode=display">\int_a^x f(t)dt</script><p>这样定积分就从一个值变成一个函数</p><script type="math/tex; mode=display">\phi(x)=\int_a^x f(t)dt</script><p>定理1：</p><script type="math/tex; mode=display">\phi'(x)=\frac{d}{dx}\int_a^x f(t)dt=f(x)</script><p>这样来看，$\phi(x)$就是$f(x)$的一个原函数。值得一提的是：</p><script type="math/tex; mode=display">(\int_x^a f(t)dt)'=-f(x)</script><script type="math/tex; mode=display">(\int_a^{\varphi(x)} f(t)dt)'=f(\varphi(x))\varphi'(x)</script><script type="math/tex; mode=display">[\int_{\varphi(x)}^{\phi(x)}f(t)dt]'=f(\phi(x))\varphi'(x)-f(\varphi(x))\phi'(x)</script><p>上面那个可能太抽象，可以使用性质2）插入一个常数点a</p><h4 id="牛顿莱布尼兹公式"><a href="#牛顿莱布尼兹公式" class="headerlink" title="牛顿莱布尼兹公式"></a>牛顿莱布尼兹公式</h4><script type="math/tex; mode=display">\int_a^bf(x)dx=F(x)|_a^b=F(b)-F(a)</script><p>​        其中$F(x)$是$f(x)$的原函数。</p><p>例如：$\int_0^1 x^2dx$</p><p>解：=$\frac{1}{3}x^3|_0^1=\frac{1}{3}$</p><h3 id="计算方法"><a href="#计算方法" class="headerlink" title="计算方法"></a>计算方法</h3><h4 id="换元法"><a href="#换元法" class="headerlink" title="换元法"></a>换元法</h4><p>​        定理：我们令$x=\varphi(t)$使之$\varphi(\alpha)=a,\varphi(\beta)=b$</p><script type="math/tex; mode=display">\int_a^bf(x)dx=\int_\alpha^\beta(\varphi(t))\varphi'(t)dt</script><p>例题：</p><p>1）$\int_0^a\sqrt{a^2-x^2}dx$</p><p>解：$令x=a\sin t$,$dx=a\cos tdt$</p><p>$=\int_0^{\frac{\pi}{2}}a^2\cos^2tdt=\frac{\pi}{4}a^2$</p><p>一些技巧：</p><p>1）$[-a,a]$下：$f(x)$偶：$\int_{-a}^{a}f(x)dx=2\int_{0}^{a}f(x)dx$,$f(x)$奇则为0。</p><p>2）$\int_{0}^{\frac{\pi}{2}}f(\sin x)dx=\int_{0}^{\frac{\pi}{2}}f(\cos x)dx$</p><p>3)$\int_{0}^{\pi}xf(\sin x)dx=\frac{\pi}{2}\int_0^{\pi}f(\sin x)dx$</p><p>（2）（3）怎么说？</p><p>2）令：$x=\frac{\pi}{2}-t,dx=-dt$就可以了</p><p>3）令：$x=\pi-t,dx=-dt$带入之后化简一下得到：</p><script type="math/tex; mode=display">\int_{0}^{\pi}xf(\sin x)dx=\int_{0}^{\pi}(\pi-t)f(\sin t)dt=\pi\int_{0}^{\pi}f(\sin x)dx-\int_{0}^{\pi}xf(\sin x)dx</script><p>(上面中因为与积分变量无关由此可以直接替换)</p><p>例题：$\int_0^{\pi}\frac{x\sin x}{1+\cos^2x}dx=\frac{\pi}{2}\int_0^{\pi}\frac{\sin x}{1+\cos^2x}dx=-\frac{\pi}{2}\arctan(\cos x)|_0^\pi=\frac{\pi^2}{4}$</p><p>4)$\int_a^{a+T}f(x)dx=\int_0^Tf(x)dx$(f(x)是一个周期函数，周期是T)</p><p>5）$\int_a^{a+nT}f(x)dx=n\int_0^af(x)dx$</p><h4 id="分部积分"><a href="#分部积分" class="headerlink" title="分部积分"></a>分部积分</h4><p>​        首先回顾$\int udv=uv-\int vdu$这个公式，于是，在定积分的也自然就是：</p><script type="math/tex; mode=display">\int_a^b udv=uv|_a^b - \int_a^b vdu</script><p>​        例如：$\int _0^\frac{1}{2} \arcsin xdx$</p><p>​        注意到$x$也是一个函数：于是$\int _0^\frac{1}{2} \arcsin xdx=x\arcsin x|_0^\frac{1}{2} - \int_0^\frac{1}{2} \frac{x}{\sqrt {1-x^2} }dx=\frac{\pi}{12}+\frac{\sqrt 3}{2}-1$</p><p>​        也有上面提到的方法一块用的积分：</p><p>​        $\int_0^1 e^\sqrt{x}dx$</p><p>​        令:$t=\sqrt x$, 则:$2\int_0^1 te^tdt$=$2te^t|_0^1-2\int_0^1 e^tdt=2$</p><h3 id="反常积分"><a href="#反常积分" class="headerlink" title="反常积分"></a>反常积分</h3><h4 id="无穷限的反常积分"><a href="#无穷限的反常积分" class="headerlink" title="无穷限的反常积分"></a>无穷限的反常积分</h4><p>​        什么叫反常积分呢？就是说积分区域下函数在这一点反常。比如说，因为积分区域含有无穷的积分：</p><script type="math/tex; mode=display">\int_a^{+\infty} f(x)dx</script><p>​        或者是这样的：</p><script type="math/tex; mode=display">\int_{-\infty}^b  f(x)dx</script><p>​        这样的积分是无穷限的反常积分。我们不妨采用动态的方法：</p><script type="math/tex; mode=display">\int_a^{+\infty} f(x)dx=\lim_\limits{t\rightarrow +\infty}\int_a^t f(x)dx</script><p>​        这下也有类似的：</p><script type="math/tex; mode=display">\int_{-\infty}^b  f(x)dx=\lim_\limits{t\rightarrow -\infty}\int_t^b f(x)dx</script><p>​        牵扯到了极限，因此：如果上面的极限是存在的，那就：之人格积分是收敛的，反之发散。</p><p>​        还有上下限均是无穷的积分，仍采用上面的处理方式。在实际求值的时候，也是直接</p><script type="math/tex; mode=display">\int_a^{+\infty}f(x)dx=F(x)|_a^{+\infty}</script><p>​        一个结论：对于</p><script type="math/tex; mode=display">\int_a^{+\infty}\frac{dx}{x^p}(a>0)</script><p>​        <strong>p&gt;1收敛，p$\leq 1$手来你</strong></p><h4 id="反常积分：无界函数的反常积分"><a href="#反常积分：无界函数的反常积分" class="headerlink" title="反常积分：无界函数的反常积分"></a>反常积分：无界函数的反常积分</h4><p>​        什么意思？就是说函数在某一点没有定义，我们的积分区域却包含了它。比如说</p><script type="math/tex; mode=display">\int_0^1 \frac{1}{x}dx</script><p>​        结合上一小节的类似方法，我们得到</p><script type="math/tex; mode=display">\int_0^1 \frac{1}{x}dx=\lim\limits_{t\rightarrow 0^+}\int_t^1\frac{1}{t}dx</script><p>​        类似的： </p><script type="math/tex; mode=display">\int_{-1}^0 \frac{1}{x}dx=\lim\limits_{t\rightarrow 0^-}\int_{-1}^t\frac{1}{t}dx</script><p>​        如果这样的点在中间，我们就拆开积分区域就好了。</p><h4 id="补充：-Gamma-s-函数"><a href="#补充：-Gamma-s-函数" class="headerlink" title="补充：$\Gamma(s)$函数"></a>补充：$\Gamma(s)$函数</h4><p>​        $\Gamma(s)$函数是这样定义的：</p><script type="math/tex; mode=display">\Gamma(s)=\int_0^{+\infty}e^{-x}x^{s-1}dx(s>0)</script><p>​        具有以下非常好推导的性质：</p><script type="math/tex; mode=display">1)\Gamma(s+1)=s\Gamma(s)</script><script type="math/tex; mode=display">2)\Gamma(1)=1</script><p>基于2)，我们发现了这个函数的一个奇妙公式：</p><script type="math/tex; mode=display">\Gamma(s+1)=s!</script><h4 id="补充：比较审敛原理"><a href="#补充：比较审敛原理" class="headerlink" title="补充：比较审敛原理"></a>补充：比较审敛原理</h4><p>​        我们假设:$f(x)$和$g(x)$在[a,$\infty$ ]上连续，$60 \leq f(x)\leq g(x)$如果：</p><script type="math/tex; mode=display">1)\int_a^{+\infty}g(x)dx收敛\rightarrow\int_a^{+\infty}f(x)dx收敛</script><script type="math/tex; mode=display">1)\int_a^{+\infty}f(x)dx发散\rightarrow\int_a^{+\infty}g(x)dx发散</script><p>​        很好理解：大哥收敛小弟也收敛，小弟嚣张大哥肯定也嚣张。</p><h4 id="补充：比较审敛法"><a href="#补充：比较审敛法" class="headerlink" title="补充：比较审敛法"></a>补充：比较审敛法</h4><p>​    设$f(x)$在[a,$\infty$]连续(a&gt;0)，且$f(x)\geq 0,\exists M&gt;0,p&gt;1$</p><p>​        如果使得:$f(x)\leq \frac{M}{x^p}$那就$\int_a^{+\infty}f(x)dx$收敛</p><p>​        反之：$f(x)\geq \frac{M}{x},$那就$\int_a^{+\infty}f(x)dx$发散</p><h4 id="补充：绝对审敛法"><a href="#补充：绝对审敛法" class="headerlink" title="补充：绝对审敛法"></a>补充：绝对审敛法</h4><p>​        如果$f(x)$在设$f(x)$在[a,$\infty$]连续（a&gt;0), $\int_a^{+\infty}|f(x)|dx$收敛，那么$\int_a^{+\infty}f(x)dx$收敛。</p><p>​        最后不难得到这个定理</p><h4 id="补充：无界函数反常积分的审敛法"><a href="#补充：无界函数反常积分的审敛法" class="headerlink" title="补充：无界函数反常积分的审敛法"></a>补充：无界函数反常积分的审敛法</h4><p>​        回到这个积分</p><script type="math/tex; mode=display">\int_a^b \frac{dx}{(x-a)^q}</script><p>​        $x=a$显然是一个瑕点$q&lt;1$收敛，q$\geq$1发散。</p><p>​        基于这个积分，我们再次应用比较原理：</p><p>​        如果$f(x)$在(a,b]连续,f(x)$\geq$0,如果$\exists M&gt;0$及其$q&lt;1$使得</p><script type="math/tex; mode=display">1)f(x)\leq \frac{M}{(x-a)^q}收敛</script><script type="math/tex; mode=display">2)f(x)\geq \frac{M}{x-a}发散</script><h4 id="补充：极限审敛法"><a href="#补充：极限审敛法" class="headerlink" title="补充：极限审敛法"></a>补充：极限审敛法</h4><p>​        如果$f(x)$在(a,b]连续,f(x)$\geq$0，$x=a$为$f(x)$的瑕点</p><p>​        1）$\exists 0&lt;q&lt;1$使得$\lim\limits_{x\rightarrow a^+}(x-a)^qf(x)=A$直接说明一件事：$\int_a^b f(x)dx$收敛。</p><p>​        2）类比的$\lim\limits_{x\rightarrow a^+}(x-a)f(x)=A$或者是$\infty$，我们直接认为$\int_a^b f(x)dx$发散。</p><h3 id="定积分的元素法"><a href="#定积分的元素法" class="headerlink" title="定积分的元素法"></a>定积分的元素法</h3><p>​        回到定积分的这个定义式：</p><script type="math/tex; mode=display">\int_a^b f(x)dx=\lim\limits_{\lambda \rightarrow 0} \sum_{k=1}^n \Delta x_kf(\sigma_k)</script><p>​        <strong>本质上，这样的一个定积分就是描述瞬时元素在某一个维度的积累效应的量化程度</strong>，这就是说：它既可以用来描述面积，又可以描述体积，只需要我们掌握了相应的边界函数，只要对应积分即可。</p><p><img src="image-20230130163127477.png" alt="image-20230130163127477"></p><p>​        比如说，这个的体积就是面积函数A(x)对于高度x的积分</p><script type="math/tex; mode=display">V=\int_{x_1}^{x_2}A(x)dx</script><h3 id="补充一下极坐标"><a href="#补充一下极坐标" class="headerlink" title="补充一下极坐标"></a>补充一下极坐标</h3><p>​        我们重新用一种全新的角度来看待坐标系：我们改用距离原点的距离+偏离X轴正方向的描述方法描述点的坐标。</p><p><img src="image-20230130163636247.png" alt="image-20230130163636247"></p><p>这样，一个点就总是可以表示为$A=(\rho, \theta)$，比如说极坐标下(1,1)变成了$(\sqrt 2,\frac{\pi}{4})$,现在，我们试着求：</p><p><img src="image-20230130174155076.png" alt="image-20230130174155076"></p><p>这个阴影面积：怎么办？延续老方法：假设点沿着曲线挪动一丁点，那么我们的产生的微小的面积则是：</p><script type="math/tex; mode=display">dS=\frac{\rho^2d\theta}{2}</script><p>然后从哪到哪？$\alpha$到$\beta$。</p><script type="math/tex; mode=display">S=\int_\alpha^\beta \frac{\rho^2d\theta}{2}</script><p>结束。</p><h3 id="平面图形的面积"><a href="#平面图形的面积" class="headerlink" title="平面图形的面积"></a>平面图形的面积</h3><h4 id="直角坐标系"><a href="#直角坐标系" class="headerlink" title="直角坐标系"></a>直角坐标系</h4><p>​        我们说函数相交也可以产生一些面积</p><p><img src="image-20230130174758444.png" alt="image-20230130174758444"></p><p>​        这个怎么求呢？</p><p><img src="image-20230130174916021.png" alt="image-20230130174916021"></p><p>​        我们的差面积就是：</p><script type="math/tex; mode=display">S=\int_a^bf(x)dx-\int_a^b g(x)dx=\int_a^bf(x)-g(x)dx</script><p>​        这样的差是X型的面积积分，因为我们拿X作为梯形的高</p><p>​        那就还有Y型面积：</p><p><img src="image-20230130175121419.png" alt="image-20230130175121419"></p><p>​        类比的：</p><script type="math/tex; mode=display">S=\int_c^d \varphi(y)-\phi(y)dy</script><p>​        也即是：</p><p>​            X:$S=\int 上-下dx$</p><p>​            Y:$S=\int 右-左dy$</p><p>​        </p><p>​        总结一下：我们对面积先大致画出来图长什么样：如果是这样的</p><p>​        <img src="image-20230130175729566.png" alt="image-20230130175729566"></p><p>​        就这样使用X，Y对应当打，如果不好判断，就都先试试，哪个更加容易用哪个。</p><p>​        举例：求$y=\frac{1}{2}x^2$,$y=\frac{1}{1+x^2}$在$x \in [-\sqrt 3,\sqrt 3]$下的定积分。</p><p>​        我们可以做出图像：</p><p><img src="image-20230202133001296.png" alt="image-20230202133001296"></p><p>​        砍开来看：</p><script type="math/tex; mode=display">S=\int_{-\sqrt{3}}^{-1}(\frac{1}{2}x^2-\frac{1}{1+x^2})+\int_{-1}^1(\frac{1}{1+x^2}-\frac{1}{2}x^2)+\int_{1}^{\sqrt{3}}(\frac{1}{2}x^2-\frac{1}{1+x^2})</script><p>​        随后使用偶函数的对称性结束计算。</p><p>​        求椭圆的面积：$\frac{x^2}{a^2}+\frac{y^2}{b^2}=1$</p><p>​        可以拆开四分之一的部分$S_1=\int_0^aydx$</p><p>​        现在，我们引入椭圆参数方程来消去参数：</p><script type="math/tex; mode=display">\begin{equation}\left\{ \begin{aligned} x=a\cos t \\y=a\sin t \end{aligned} \right . \end{equation}</script><p>来看看变成什么了：</p><script type="math/tex; mode=display">S_1=-\int_0^{\frac{\pi}{2}}a\sin t \times a(-\sin t)dt=\frac{\pi ab}{4}</script><p>这就是为什么：</p><script type="math/tex; mode=display">S=\pi ab</script><h4 id="极坐标下"><a href="#极坐标下" class="headerlink" title="极坐标下"></a>极坐标下</h4><p>​        回忆前面所叙述的：对于方程$R=\rho (\theta)$</p><script type="math/tex; mode=display">S=\frac{1}{2}\int_{\alpha}^{\beta}(\rho (\theta))^2d\theta</script><p>​        比如说：$\rho=a\theta$</p><script type="math/tex; mode=display">S=\frac{1}{2}\int_0^{2\pi}(a\theta)^2d\theta=\frac{4}{3}a^2\pi^3</script><h3 id="旋转体体积求法"><a href="#旋转体体积求法" class="headerlink" title="旋转体体积求法"></a>旋转体体积求法</h3><p>说白了可以切成以$f(x)$为半径的圆，在叠起来（求积分）</p><script type="math/tex; mode=display">V=\int_{h_1}^{h_2}\pi f^2(x)dx</script><p> 是通过</p><script type="math/tex; mode=display">V=\int_{h_1}^{h_2} A(x)dx</script><p>​        派生来的，只是因为面积恰好是圆。</p><p>​        但是，这样的体积求解的是绕X轴的。绕Y轴的怎么办哪？</p><p>​        简单：那就改写方程为$x=x(y)$就好了：</p><script type="math/tex; mode=display">V=\int_{h_1}^{h_2}x^2(y)dy</script><h3 id="弧长的求解"><a href="#弧长的求解" class="headerlink" title="弧长的求解"></a>弧长的求解</h3><h4 id="通用："><a href="#通用：" class="headerlink" title="通用："></a>通用：</h4><p>回来看看这个参数方程：</p><script type="math/tex; mode=display">\begin{equation}\left\{ \begin{aligned} x=\varphi(t) \\y=\phi(t)\end{aligned} \right . \end{equation}</script><p>​        弧微分很容易说：</p><script type="math/tex; mode=display">ds=\sqrt{(dx)^2+(dy)^2}dt=\sqrt{(\varphi'(t))^2+(\phi'(t))^2}dt</script><p>​        于是：</p><script type="math/tex; mode=display">L=\int_\alpha^\beta \sqrt{(\varphi'(t))^2+(\phi'(t))^2}dt</script><p>​        作为积分结果，就是弧长。</p><p>​        以此为源头，开始推广其他的公式：</p><h4 id="直角坐标系下"><a href="#直角坐标系下" class="headerlink" title="直角坐标系下"></a>直角坐标系下</h4><p>​        假如参数方程很容易被表达为$y=y(x)$，那我们就：</p><script type="math/tex; mode=display">\begin{equation}\left\{ \begin{aligned} x=x \\ y=y(x)\\\end{aligned} \right . \end{equation}</script><p>​        那带入：</p><script type="math/tex; mode=display">ds=\sqrt{1+y'^2(x)}dx</script><p>​        再积分：</p><script type="math/tex; mode=display">L=\int_a^b\sqrt{1+y'^2(x)}dx</script><h4 id="极坐标系下"><a href="#极坐标系下" class="headerlink" title="极坐标系下"></a>极坐标系下</h4><p>​        如果不知道的话：科普一下</p><script type="math/tex; mode=display">\begin{equation}\left\{ \begin{aligned} x=\rho(\theta)\cos \theta \\ y=\rho(\theta)\sin \theta\\\end{aligned} \right . \end{equation}</script><p>​        所有呢，求个导：</p><script type="math/tex; mode=display">\begin{equation}\left\{ \begin{aligned} x'=\rho'(\theta)\cos \theta- \rho(\theta)\sin \theta\\ y'=\rho(\theta)\cos \theta+\rho'(\theta)\sin \theta\\\end{aligned} \right . \end{equation}</script><p>​        老样子：</p><script type="math/tex; mode=display">ds=\sqrt{(x'^2+y'^2)} d\theta=\sqrt{\rho^2(\theta)+\rho'^2(\theta)d\theta}</script><p>​         嘛，不就完事了！</p><script type="math/tex; mode=display">L=\int_\alpha^\beta\sqrt{\rho^2(\theta)+\rho'^2(\theta)d\theta}</script>]]></content>
      
      
      
        <tags>
            
            <tag> Math Works </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Opencv in Pycharm（2）</title>
      <link href="/2023/01/31/Opencv-in-Pycharm%EF%BC%882%EF%BC%89/"/>
      <url>/2023/01/31/Opencv-in-Pycharm%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h2><h3 id="平滑操作"><a href="#平滑操作" class="headerlink" title="平滑操作"></a>平滑操作</h3><p>​        平滑平滑，取平均。我们使用卷积核来处理图像像素点。</p><p><img src="lenaNoise.png" alt="lenaNoise"></p><p>​        针对上面这个噪点图形，我们应用平均卷积操作。我们对噪点抹除，就是通过对周围像素点取平均。我们首先构造一个3$\times$3的矩阵对目标像素点为中心的内核求取内积。（不同于经典矩阵相乘，我们是一一对应的，平凡算法复杂度为$O(N^k)(k \in N^+)$的相乘）随后把结果填充到像素点的中心。</p><p>​        下面我们对这个图操作一下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">img_path <span class="token operator">=</span> <span class="token string">"img/lenaNoise.png"</span>img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>img_path<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"Noise Version"</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span>blur33<span class="token operator">=</span>cv2<span class="token punctuation">.</span>blur<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"3 times 3"</span><span class="token punctuation">,</span>blur33<span class="token punctuation">)</span>blur55<span class="token operator">=</span>cv2<span class="token punctuation">.</span>blur<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"3 times 3"</span><span class="token punctuation">,</span>blur55<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        产生的效果是令人满意的：</p><p>3$\times$3：</p><p><img src="3 times 3.png" alt="3 times 3"></p><p>5$\times$5：</p><p><img src="5 times 5.png" alt="5 times 5"></p><p>​        可以看到核越大，越是噪点不明显，但是图像也就越模糊。</p><p>​        还有一个类似的：是BoxFilter函数：（方框滤波）</p><p>​        在OpenCV中，实现方框滤波的函数是cv2.boxFilter（），其语法格式为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">   dst<span class="token operator">=</span>cv2<span class="token punctuation">.</span>boxFilter（src<span class="token punctuation">,</span>ddepth<span class="token punctuation">,</span>ksize<span class="token punctuation">,</span>anchor<span class="token punctuation">,</span>normalize<span class="token punctuation">,</span>borderType）   <span class="token comment"># 但是一般的。。。。。。</span>dst<span class="token operator">=</span>cv2<span class="token punctuation">.</span>boxFilter（src<span class="token punctuation">,</span>ddepth<span class="token punctuation">,</span>ksize）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>● dst是返回值，表示进行方框滤波后得到的处理结果。● src 是需要处理的图像，即原始图像。它能够有任意数量的通道，并能对各个通道独立处理。图像深度应该是CV_8U、CV_16U、CV_16S、CV_32F 或者 CV_64F中的一种。 ● ddepth是处理结果图像的图像深度，一般使用-1表示与原始图像使用相同的图像深度。 ● ksize 是滤波核的大小。滤波核大小是指在滤波处理过程中所选择的邻域图像的高 度和宽度。● anchor 是锚点，其默认值是（-1,-1），表示当前计算均值的点位于核的中心点位 置。该值使用默认值即可，在特殊情况下可以指定不同的点作为锚点。● normalize 表示在滤波时是否进行归一化（这里指将计算结果规范化为当前像素值范围内的值）处理，该参数是一个逻辑值，可能为真（值为1）或假（值为0）：1.当参数normalize=1时，表示要进行归一化处理，要用邻域像素值的和除以面积。此时方框滤波与均值滤波效果相同。2.当参数normalize=0时，表示不需要进行归一化处理，直接使用邻域像素值的和。当 normalize=0时，因为不进行归一化处理，因此滤波得到的值很可能超过当前像素值范围的最大值，从而被截断为最大值。这样，就会得到一幅纯白色的图像。● borderType是边界样式，该值决定了以何种方式处理边界。通常情况下，在使用方框滤波函数时，对于参数anchor、normalize和borderType，直接采用其默认值即可。因此，函数cv2.boxFilter（）的常用形式为：</code></pre><p>​        可以等效成blur，就是选择更多了而已。如果不进行归一化，就是停在255，所以图像会很白。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Filt1 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>boxFilter<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>Filt2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>boxFilter<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>normalize<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"Filt1"</span><span class="token punctuation">,</span>Filt1<span class="token punctuation">)</span><span class="token punctuation">;</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"Filt2"</span><span class="token punctuation">,</span>Filt2<span class="token punctuation">)</span><span class="token punctuation">;</span>cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"Filt1.png"</span><span class="token punctuation">,</span>Filt1<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"Filt2.png"</span><span class="token punctuation">,</span>Filt2<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Filt1： 归一化</p><p><img src="Filt1.png" alt="Filt1"></p><p>Filt2: 摆烂</p><p><img src="Filt2.png" alt="Filt2"></p><h4 id="高斯滤波"><a href="#高斯滤波" class="headerlink" title="高斯滤波"></a>高斯滤波</h4><p>​        这个改进了平均算法，就是利用空间距离远近来作为计算权重：近的权重大，反之权重小。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">Gaussain<span class="token operator">=</span>cv2<span class="token punctuation">.</span>GaussianBlur<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"Gaussain"</span><span class="token punctuation">,</span>Gaussain<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"Gaussain.png"</span><span class="token punctuation">,</span>Gaussain<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="Gaussain.png" alt="Gaussain"></p><h5 id="关于高斯滤波及其算法的扩展"><a href="#关于高斯滤波及其算法的扩展" class="headerlink" title="关于高斯滤波及其算法的扩展"></a>关于高斯滤波及其算法的扩展</h5><p>材料来源：<a href="https://blog.csdn.net/LYSSLQ2015/article/details/125110610">(46条消息) opencv———-高斯滤波_opencv高斯滤波_LYSSLQ2015的博客-CSDN博客</a>！</p><p>​        高斯滤波(Gauss Filter)是<strong>线性滤波</strong>中的一种。在OpenCV图像滤波处理中，高斯滤波用于<strong>平滑图像</strong>，或者说是图像模糊处理，因此高斯滤波是低通的。其广泛的应用在图像处理的减噪过程中，尤其是被高斯噪声所污染的图像上。高斯滤波的基本思想是: 图像上的每一个像素点的值，都由其本身和邻域内其他像素点的值经过加权平均后得到。其具体操作是，用一个核(又称为卷积核、掩模、矩阵)扫描图像中每一个像素点，将邻域内各个像素值与对应位置的权值相称并求和。从数学的角度来看，高斯滤波的过程是图像与高斯正态分布做卷积操作。<br>​        注意: 高斯滤波是将二维高斯正态分布放在图像矩阵上做卷积运算。考虑的是邻域内像素值的空间距离关系，因此对彩色图像处理时应分通道进行操作，也就是说操作的图像原矩阵时用单通道数据，最后合并为彩色图像。</p><p>一、几个概念</p><ol><li><p>什么是<a href="https://so.csdn.net/so/search?q=低通滤波&amp;spm=1001.2101.3001.7020">低通滤波</a>、平滑图像、图像模糊处理？<br>平滑图像与图像模糊处理是相同的含义。平滑处理即是通过操作后，使得图像的像素值与邻域内其他像素值的的变化程度减小。在一张图像上，边缘的像素值是变化程度最剧烈的地方，而其他相对平缓。因此，平滑图像最直观的表现是图像的上物体的边缘轮廓变得模糊。<strong>低通滤波是指仅允许低频率信号通过。一张图像上的大部分能量聚集在低频和中频上，而高频大多是图像中物体的边缘部分，也有可能是高频噪声点。在单通道中，各像素点的取值都在(0~255)中，因此，低通滤波通过一定的阙值设置，有去除高频信号和平缓边缘的效果。</strong></p></li><li><p>什么是核(又称为卷积核、掩模、矩阵)？<br><strong>核的本质其实就是一个大小固定、由数值参数组成的数学矩阵，例如一个3<em>3的核就是一个3</em>3的矩阵,而矩阵中的数据则为权值。</strong></p></li><li><p>什么是卷积运算？<br>卷积运算是指输入图像中某一像素点的邻域的各个值（包括该点）与卷积算子中的值做矩阵相乘运算，最后得到输出值。<br>卷积算子的公式:</p><script type="math/tex; mode=display">g=f*h</script><script type="math/tex; mode=display">g(i,j)=\sum_{k,l}f(i-k,j-l)h(k,l)=\sum_{k,l}f(k,l)h(i-k,j-l)</script></li></ol><p>g(i，j) 代表原图像矩阵上的(i，j)点的值，它是输出值。<br>f(i-k，j-l) 代表原图像矩阵上(i，j)点的邻域中的对应点的值。<br>h(k,，l) 代表与f(i-k ， j-l)这个值在核对应位置的点的值<br><strong>请看下图：这里用的是f(i-k,j-l)h(k,l)</strong></p><p><img src="SouthEast.png" alt="这里写图片描述"></p><p>由上图我们看到，矩阵f是将要进行操作的图像矩阵，当前的(i，j)是(2，2)点。h为核，其以中心(0，0)为参考点。因此f矩阵对应范围即为f(2，2)的邻域。矩阵g为图像输出矩阵，g(2，2)的值为输出值。<br>注意：卷积算子和相关算子在核上是180度翻转的矩阵，请不要搞混</p><p>4.核(卷积核、掩模、矩阵等)<br>在3的卷积运算中，用到的公式是：<br>g(i, j) = ∑ f(i-k, j-l)h(k, l) 。其中 k，l代表核上的坐标。而核的坐标明显与数组下标不一致。因此，我们需要做一个转换以满足用数组下标来访问该核的数据。<br>假设有3<em>3数组a，它与核的对应关系为<br>a(0, 0) ===&gt; h(-1, -1) a(0, 1) ===&gt; h(-1, 0) a(0, 2) ===&gt; h(-1, 1)<br>a(1, 0) ===&gt; h(0, -1) a(1, 1) ===&gt; h(0, 0) a(1, 2) ===&gt; h(0, 1)<br>a(2, 0) ===&gt; h(1, -1) a(2, 1) ===&gt; h(1, 0) a(2, 2) ===&gt; h(1, 1)<br>对于3</em>3数组，其下标是0开始的，假设该数组的参考点(ai, aj)为中心,则有<br>g(i, j) = ∑ f(i-(k-ai), j-(l-aj))h(k, l)<br>带入数组参考点(1, 1)，则有<br>g(i, j) = ∑ f(i-(k-1), j-(l-1))h(k, l)<br>此时，k，l可以从0开始取值<br><img src="SouthEast2.png" alt="这里写图片描述"></p><p> <strong>5.图像通道分离与合并(cv::Mat)</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F; src 原图像，多通道&#x2F;&#x2F; [1] 彩色图片通道分离std::vector&lt;cv::Mat&gt; channels;cv::split(&amp;src, channels);&#x2F;&#x2F; [3] 滤波&#x2F;&#x2F; OpenCV中操作&#x2F;&#x2F; channels[0]  &#x3D;&#x3D;&gt;  B通道&#x2F;&#x2F; channels[1]  &#x3D;&#x3D;&gt;  G通道&#x2F;&#x2F; channels[2]  &#x3D;&#x3D;&gt;  R通道&#x2F;&#x2F; 省略对各个通道的处理&#x2F;&#x2F; [4] 合并返回cv::merge(channels, *dst);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二、高斯函数"><a href="#二、高斯函数" class="headerlink" title="二、高斯函数"></a>二、高斯函数</h4><p>高斯滤波，顾名思义，这是一个建立在高斯正态分布基础上的滤波器。首先我们来了解高斯函数。(图片来源于网络)<br>一维高斯函数：<br>可以看到，G(x)的跟<a href="https://so.csdn.net/so/search?q=sigma&amp;spm=1001.2101.3001.7020">sigma</a>的取值有极大的关系。sigma取值越大，图像越平缓，sigma取值越小，图像越尖锐。</p><p><img src="SouthEast10.png" alt="这里写图片描述"><br><img src="SouthEast3.png" alt="这里写图片描述"></p><p>二维高斯函数：<br>二维高斯是构建高斯滤波器的基础。可以看到，G(x,y)在x轴y轴上的分布是一个突起的帽子的形状。这里的sigma可以看作两个值，一个是x轴上的分量sigmaX，另一个是y轴上的分量sigmaY。对图像处理可以直接使用sigma并对图像的行列操作，也可以用sigmaX对图像的行操作，再用sigmaY对图像的列操作。它们是等价的。<br>当sigmaX和sigmaY取值越大，整个形状趋近于扁平；当sigmaX和sigmaY取值越小，整个形状越突起。<br><img src="SouthEast4.png" alt="这里写图片描述"></p><p>高斯滤波原理就是将上图的二维正态分布应用在二维的矩阵上，G(x,y)的值就是矩阵上的权值，将得到的权值进行<a href="https://so.csdn.net/so/search?q=归一化&amp;spm=1001.2101.3001.7020">归一化</a>，将权值的范围约束在[0,1]之间，并且所有的值的总和为1。<br>假设一个3*3的核，sigma取值1.5以及sigma取5.0，归一化后其权值分布分别是：</p><p><img src="SouthEast5.png" alt="这里写图片描述"></p><p>假设一个5*5的核，sigma取值1.5以及sigma取5.0，经归一化后其权值分布分别是：<br><img src="SouthEast6.png" alt="这里写图片描述"><br><img src="SouthEast7.png" alt="这里写图片描述"></p><p>可以看到，权值的分布是以中间高四周低来分布的。并且距离中心越远，其对中心点的影响就越小，权值也就越小。<br>因此可以总结：<br>（1）在核大小固定的情况下，sigma值越大，权值分布越平缓。因此，邻域各个点的值对输出值的影响越大，最终结果造成图像越模糊。<br>（2）在核大小固定的情况下，sigma值越小，权值分布越突起。因此，邻域各个点的值对输出值的影响越小，图像变化也越小。假如中心点权值为1，其他点权值为0，那么最终结果是图像没有任何变化。<br>（3）sigma固定时，核越大图像越模糊。<br>（4）sigma固定时，核越小图像变化越小。</p><p>三、高斯滤波器实现<br>首先看效果：<br>对于椒盐图作处理</p><p><img src="SouthEast8.png" alt="这里写图片描述"></p><p>对于高斯噪声图作处理<br><img src="SouthEast9.png" alt="这里写图片描述"></p><p>（1）main函数：读取图片 ==&gt; 高斯滤波 ==&gt; 结果显示</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// [1] src读入图片</span>    cv<span class="token double-colon punctuation">::</span>Mat src <span class="token operator">=</span> cv<span class="token double-colon punctuation">::</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">"Median_pic.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [2] dst目标图片</span>    cv<span class="token double-colon punctuation">::</span>Mat dst<span class="token punctuation">;</span>    <span class="token comment">// [3] 高斯滤波  sigma越大越平越模糊</span>    <span class="token function">myGaussianFilter</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>src<span class="token punctuation">,</span> <span class="token operator">&amp;</span>dst<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1.5f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// [4] 窗体显示</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"dst"</span><span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cv<span class="token double-colon punctuation">::</span><span class="token function">destroyAllWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）彩色图像通道分离处理，每个通道都进行高斯滤波，最后合并</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void myGaussianFilter(cv::Mat *src, cv::Mat *dst, int n, double sigma)&#123;    &#x2F;&#x2F; [1] 初始化    *dst &#x3D; (*src).clone();    &#x2F;&#x2F; [2] 彩色图片通道分离    std::vector&lt;cv::Mat&gt; channels;    cv::split(*src, channels);    &#x2F;&#x2F; [3] 滤波    &#x2F;&#x2F; [3-1] 确定高斯正态矩阵    double **array &#x3D; getGaussianArray(n, sigma);    &#x2F;&#x2F; [3-2] 高斯滤波处理    for (int i &#x3D; 0; i &lt; 3; i++) &#123;        gaussian(&amp;channels[i], array, n);    &#125;    &#x2F;&#x2F; [4] 合并返回    cv::merge(channels, *dst);    return ;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）生成高斯正态分布核(<a href="https://so.csdn.net/so/search?q=卷积核&amp;spm=1001.2101.3001.7020">卷积核</a>，掩模等)</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;* 获取高斯分布数组               (核大小， sigma值) *&#x2F;double **getGaussianArray(int arr_size, double sigma)&#123;    int i, j;    &#x2F;&#x2F; [1] 初始化权值数组    double **array &#x3D; new double*[arr_size];    for (i &#x3D; 0; i &lt; arr_size; i++) &#123;        array[i] &#x3D; new double[arr_size];    &#125;    &#x2F;&#x2F; [2] 高斯分布计算    int center_i, center_j;    center_i &#x3D; center_j &#x3D; arr_size &#x2F; 2;    double pi &#x3D; 3.141592653589793;    double sum &#x3D; 0.0f;    &#x2F;&#x2F; [2-1] 高斯函数    for (i &#x3D; 0; i &lt; arr_size; i++ ) &#123;        for (j &#x3D; 0; j &lt; arr_size; j++) &#123;            array[i][j] &#x3D;                 &#x2F;&#x2F;后面进行归一化，这部分可以不用                &#x2F;&#x2F;0.5f *pi*(sigma*sigma) *                 exp( -(1.0f)* ( ((i-center_i)*(i-center_i)+(j-center_j)*(j-center_j))&#x2F; (2.0f*sigma*sigma) ));                                    sum +&#x3D; array[i][j];        &#125;    &#125;    &#x2F;&#x2F; [2-2] 归一化求权值    for (i &#x3D; 0; i &lt; arr_size; i++) &#123;        for (j &#x3D; 0; j &lt; arr_size; j++) &#123;            array[i][j] &#x2F;&#x3D; sum;            printf(&quot; [%.15f] &quot;, array[i][j]);        &#125;        printf(&quot;\n&quot;);    &#125;    return array;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（4）进行高斯滤波操作</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">&#x2F;* 高斯滤波 (待处理单通道图片, 高斯分布数组， 高斯数组大小(核大小) ) *&#x2F;void gaussian(cv::Mat *_src, double **_array, int _size)&#123;    cv::Mat temp &#x3D; (*_src).clone();    &#x2F;&#x2F; [1] 扫描    for (int i &#x3D; 0; i &lt; (*_src).rows; i++) &#123;        for (int j &#x3D; 0; j &lt; (*_src).cols; j++) &#123;            &#x2F;&#x2F; [2] 忽略边缘            if (i &gt; (_size &#x2F; 2) - 1 &amp;&amp; j &gt; (_size &#x2F; 2) - 1 &amp;&amp;                i &lt; (*_src).rows - (_size &#x2F; 2) &amp;&amp; j &lt; (*_src).cols - (_size &#x2F; 2)) &#123;                &#x2F;&#x2F; [3] 找到图像输入点f(i,j),以输入点为中心与核中心对齐                &#x2F;&#x2F;     核心为中心参考点 卷积算子&#x3D;&gt;高斯矩阵180度转向计算                &#x2F;&#x2F;     x y 代表卷积核的权值坐标   i j 代表图像输入点坐标                &#x2F;&#x2F;     卷积算子     (f*g)(i,j) &#x3D; f(i-k,j-l)g(k,l)          f代表图像输入 g代表核                &#x2F;&#x2F;     带入核参考点 (f*g)(i,j) &#x3D; f(i-(k-ai), j-(l-aj))g(k,l)   ai,aj 核参考点                &#x2F;&#x2F;     加权求和  注意：核的坐标以左上0,0起点                double sum &#x3D; 0.0;                for (int k &#x3D; 0; k &lt; _size; k++) &#123;                    for (int l &#x3D; 0; l &lt; _size; l++) &#123;                        sum +&#x3D; (*_src).ptr&lt;uchar&gt;(i-k+(_size&#x2F;2))[j-l+(_size&#x2F;2)] * _array[k][l];                    &#125;                &#125;                &#x2F;&#x2F; 放入中间结果,计算所得的值与没有计算的值不能混用                temp.ptr&lt;uchar&gt;(i)[j] &#x3D; sum;            &#125;        &#125;    &#125;    &#x2F;&#x2F; 放入原图    （*_src） &#x3D; temp.clone();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="中值滤波"><a href="#中值滤波" class="headerlink" title="中值滤波"></a>中值滤波</h3><p>​        什么是中值？就是排序取中间的中位数。那就直接把目标像素点直接换成中位数跑路！</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">median<span class="token operator">=</span>cv2<span class="token punctuation">.</span>medianBlur<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"median"</span><span class="token punctuation">,</span>median<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"median.png"</span><span class="token punctuation">,</span>median<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        <img src="median.png" alt="median"></p><p>​        可以看到效果很好。令人满意。</p><h4 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h4><pre><code>    一、概述    使用中值滤波器模糊图像。    该函数使用具有 ksize×ksize 孔径的中值滤波器对图像进行平滑处理。 多通道图像的每个通道都是独立处理的。    中值滤波器在内部使用 BORDER_REPLICATE 来处理边界像素，请参阅 BorderTypes。    下图描述了一个ksize=3×3的滑动窗口（或称滤波器模板、kernel），如黄色部分所示。用这个ksize=3×3的窗口作用于原始图像上的每一个像素，如下图的绿色部分所示，被这个窗口覆盖的9个像素点都参与计算，这样在该像素点上就会得到一个新的像素值，当窗口沿着图像逐个像素进行计算，就会得到一幅新的图像。</code></pre><p><img src="https://img-blog.csdnimg.cn/9f8842b4f8da4836a54e1b6a66ab13fa.png" alt="img"></p><pre><code>     上图中滤波器模板的不同就构成了滤波算法的差异，比如均值平滑算法中滑动窗口中各个像素点的系数均为1/(窗口高*窗口宽)，高斯平滑中系数和中心点的距离满足高斯分布。    中值平滑和均值平滑一样也用到了滑动窗口，但是它并不是计算滑动窗口中的某种加权和，而是使用原图像滑动窗口中所有像素值排序后的中值作为新图像的像素值。    从上图也可以看到，当滑动窗口作用于图像边沿的时候，滑动窗口的某些像素并没有和图像重合，这时就需要对边沿做特殊处理，常用的方法有填0、填1、复制边沿等方式。</code></pre><p>二、medianBlur函数<br>1、函数原型<br>cv::medianBlur (InputArray src, OutputArray dst, int ksize)<br>2、参数详解<br>src    ：输入 1、3 或 4 通道图像； ksize 为 3 或 5 时，图像深度应为 CV_8U、CV_16U 或 CV_32F，对于较大的光圈尺寸，只能为 CV_8U。</p><p>dst    ：与 src 大小和类型相同的目标数组。</p><p>ksize    ：孔径线性尺寸； 它必须是奇数且大于 1，例如：3、5、7 …<br>三、OpenCV源码<br>1、源码路径</p><pre class="line-numbers language-none"><code class="language-none">opencv\modules\imgproc\src\median_blur.dispatch.cpp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、源码代码</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">void medianBlur( InputArray _src0, OutputArray _dst, int ksize )&#123;    CV_INSTRUMENT_REGION();CV_Assert(!_src0.empty()); CV_Assert( (ksize % 2 &#x3D;&#x3D; 1) &amp;&amp; (_src0.dims() &lt;&#x3D; 2 )); if( ksize &lt;&#x3D; 1 || _src0.empty() )&#123;   _src0.copyTo(_dst);    return;&#125; CV_OCL_RUN(_dst.isUMat(),         ocl_medianFilter(_src0,_dst, ksize)         ) Mat src0 &#x3D; _src0.getMat();_dst.create( src0.size(), src0.type() );Mat dst &#x3D; _dst.getMat(); CALL_HAL(medianBlur, cv_hal_medianBlur, src0.data, src0.step, dst.data, dst.step, src0.cols, src0.rows, src0.depth(),    src0.channels(), ksize    ); CV_OVX_RUN(true,           openvx_medianFilter(_src0, _dst, ksize)) &#x2F;&#x2F;CV_IPP_RUN_FAST(ipp_medianFilter(src0, dst, ksize)); CV_CPU_DISPATCH(medianBlur, (src0, dst, ksize),    CV_CPU_DISPATCH_MODES_ALL    );&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>四、效果图像示例</p><p>原图：</p><p><img src="https://img-blog.csdnimg.cn/7a3c9fa7cb44463cb9c29ea0e1def515.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/9d19f5513c46421094abc1e260e2352d.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/9173c63503904f4eb03c876c4048cfa1.png" alt="img"></p><p>版权声明：本才来哦为CSDN博主「坐望云起」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/bashendixie5/article/details/125255049">https://blog.csdn.net/bashendixie5/article/details/125255049</a></p><h3 id="图像拼接"><a href="#图像拼接" class="headerlink" title="图像拼接"></a>图像拼接</h3><p>​        现在我们使用Numpy的hstack方法拼接一下图片：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">res<span class="token operator">=</span>np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>blur33<span class="token punctuation">,</span>Gaussain<span class="token punctuation">,</span>median<span class="token punctuation">)</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"Compare!"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">"Compare.png"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="Compare.png" alt="Compare"></p><p>​        起到对比效果（显然不是那么好。。。）</p>]]></content>
      
      
      
        <tags>
            
            <tag> Opencv </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学教程（3）</title>
      <link href="/2023/01/31/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E6%95%99%E7%A8%8B%EF%BC%883%EF%BC%89/"/>
      <url>/2023/01/31/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E6%95%99%E7%A8%8B%EF%BC%883%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="高等数学教程（8）不定积分"><a href="#高等数学教程（8）不定积分" class="headerlink" title="高等数学教程（8）不定积分"></a>高等数学教程（8）不定积分</h1><p>​        这一章内容通俗的说：就是求导的反向操作：我们需要求出谁求导的到现在的东西</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>​        假设一个函数$f(x)$是一个函数$F(x)$求导的结果，那么称$F(x)$是$f(x)$的一个愿函数</p><p>这是因为$F(x)+C$(C是一个常数)求导也是$f(x)$</p><p>​        原函数存在定理：<strong>连续的函数一定有原函数</strong></p><p>​        说了这么多，我们又该怎么表示一个函数的原函数呢</p><script type="math/tex; mode=display">\int f(x)dx=F(x)+C</script><p>​        比如说：$\int x^2dx=\frac{x^3}{3}+C$</p><p>​        但是注意：这个容易错：$\int \frac{1}{x}dx=\ln{|x|}+C$</p><p>​        因为（x&lt;0）下$\ln{x}$无定义，可以把$\frac{-1}{-x}$看，这样就好了。</p><p>​        下面来看一些式子：</p><script type="math/tex; mode=display">\frac{d}{dx}[\int f(x)dx]=f(x)</script><script type="math/tex; mode=display">d[\int f(x)dx]=f(x)dx</script><p>​        说明了积分号在内微分号在外的式子，没有常数C（本质是$df(x)=f’(x)dx$）</p><p>​        </p><script type="math/tex; mode=display">\int F'(x)dx=F(x)+C</script><p>​        说明了积分号在外微分号在内的式子，有常数C（本质是$\int f(x)dx=F(x)+C$）</p><h3 id="积分表"><a href="#积分表" class="headerlink" title="积分表"></a>积分表</h3><p>​        幂函数的积分</p><script type="math/tex; mode=display">\int x^\mu dx=\frac{x^{\mu+1}}{\mu+1}+C</script><p>​        常数的不定积分：</p><script type="math/tex; mode=display">\int kdx=kx+C</script><p>​        </p><script type="math/tex; mode=display">\int \frac{dx}{1+x^2}dx=\arctan{x}+C</script><script type="math/tex; mode=display">\int \frac{dx}{\sqrt {1-x^2}}dx=\arcsin{x}+C</script><script type="math/tex; mode=display">\int \frac{dx}{\cos^2{x}}=\int \sec^2{x}=\tan{x}+C</script><script type="math/tex; mode=display">\int \frac{dx}{\sin^2{x}}=\int \csc^2{x}=-\cot{x}+C</script><script type="math/tex; mode=display">\int \sec{x}\tan xdx=\sec{x}+C</script><script type="math/tex; mode=display">\int \csc{x}\cot{x}dx=-\csc{x}+C</script><script type="math/tex; mode=display">\int \frac{1}{x}dx=\ln |x|+C</script><script type="math/tex; mode=display">\int \cos{x}dx=\sin{x}+C</script><script type="math/tex; mode=display">\int \sin{x}dx=-\cos{x}+C</script><script type="math/tex; mode=display">\int e^xdx=e^x+C</script><script type="math/tex; mode=display">\int a^xdx=\frac{a^x}{\ln{a}}+C</script><h3 id="不定积分的性质"><a href="#不定积分的性质" class="headerlink" title="不定积分的性质"></a>不定积分的性质</h3><p>​        1）$\int [f(x)\pm g(x)]dx=\int f(x)dx \pm \int g(x)dx$</p><p>​        2)$\int kf(x)dx=k\int f(x)dx$</p><h3 id="第一类换元积分（凑微分法）"><a href="#第一类换元积分（凑微分法）" class="headerlink" title="第一类换元积分（凑微分法）"></a>第一类换元积分（凑微分法）</h3><p>​        首先回到这里：$\int 1 dF(u)=F(u)+C$,现在假设$u=\varphi (x)$,这样，我们就有$\int 1dF(\varphi(x))=F(\varphi(x))+C$,进一步的：$\int f(\varphi(x))\varphi ‘(x)dx=F(\varphi(x))+C$</p><p>说白了，就是复合求导的逆过程，我们的核心过程就是通过合并至d后面从而化简函数：</p><p>1）$\int 2\cos 2xdx$</p><p>解：$\int \cos 2xd(2x)=sin(2x)+C$</p><p>2)$\int \frac{1}{3+2x}dx$</p><p>解：$\int \frac{1}{2}\frac{1}{3+2x}d(2x+3)=\frac{1}{2}\ln|(2x+3)|+C$</p><p>3)$\int 2x e^{x^2}dx$</p><p>解：$\int  e^{x^2}dx^2= e^{x^2}+C$</p><p>4)$\int x\sqrt{1-x^2}dx$</p><p>解：$-\frac{1}{2}\int \sqrt{1-x^2}d(1-x^2)=-\frac{1}{3}(1-x^2)^{1.5}+C$</p><p>5)$\int \frac{x^2}{(x+2)^3}dx$</p><p>解:</p><p>$令:x+2=u$,$\int \frac{(u-2)^2}{u^3}du=\int (\frac{1}{u}-\frac{4}{u^2}+\frac{4}{u^3})du=\ln |u|+\frac{4}{u}-2\frac{1}{u^2}$</p><p>于是:$\ln |x+2|+\frac{4}{x+2}-2\frac{1}{(x+2)^2}$</p><p>6)$\int \frac{1}{a^2+x^2}dx(a\neq 0)$</p><p>解：$=\frac{1}{a}\int \frac{1}{1+(\frac{x}{a})^2}d(\frac{x}{a})=\frac{1}{a}\arctan \frac{x}{a}+C$</p><p>7)$\int \frac{dx}{\sqrt{a^2-x^2}}$</p><p>解：$\frac{1}{a}\int \frac{dx}{\sqrt{1-(\frac{x}{a})^2}}=\arcsin \frac{x}{a}+C$</p><p>8)$\int \frac{dx}{x^2-a^2}$</p><p>解：$\frac{1}{2a}\int (\frac{1}{x-a}-\frac{1}{x+a})dx=\frac{1}{2a}\ln|\frac{x-a}{x+a}|+C$</p><p>9)$\int \frac{dx}{x(1+2\ln x)}$</p><p>解：$\int \frac{d\ln{x}}{1+2\ln x}=\frac{1}{2}\ln|1+2\ln x|+C$</p><p>10）$\int \frac{e^{3\sqrt{x}}}{\sqrt{x}}dx$</p><p>解：$=2\int e^{3\sqrt{x}}d{\sqrt{x}}=\frac{2}{3}e^{3\sqrt{x}}+C$</p><p>11)$\int \sin^3xdx$</p><p>解：$\int sin^2xd\cos x=\int (1-cos^2x)d\cos x=-\cos x-\frac{1}{3}\cos^3x+C$</p><p>12)$\int \sin^2x\cos^5xdx$</p><p>解：$\int \sin^2\cos^4xd\sin x=\int \sin^2x(1-\sin^2x)^2d\sin x=\frac{\sin^3x}{3}-\frac{2\sin^5x}{5}+\frac{\sin^7x}{7}+C$</p><p>13)$\int \tan xdx$</p><p>解：</p><p>$\int \frac{\sin x}{\cos x}dx=-\int \frac{1}{\cos x}d\cos x=-\ln|cos(x)|+C$</p><p>14)$\int \cos^2xdx$</p><p>解：$\int \frac{1+\cos2x}{2}dx=\frac{x}{2}+\frac{\sin 2x}{4}+C$</p><p>15)$\int \sin^2x\cos^4xdx$</p><p>解：$\int \frac{1-\cos{2x}}{2}(\frac{1+\cos{2x}}{2})^2dx=\frac{1}{8}(x+\frac{1}{2}\sin 2x-\frac{1}{2}x-\frac{1}{8}\sin 4x-\frac{1}{2}(\sin 2x-\frac{sin^3 2x}{3}))+C$</p><p>16)$\int \sec^6xdx$</p><p>解：$\int \sec^4xd\tan x=\int (\tan^2x+1)^2d\tan x=\frac{\tan^5x}{5}+\frac{2\tan^3x}{3}+\tan x+C$</p><p>17)$\int \csc xdx$</p><p>解：$\int \frac{1}{\sin x}dx=\frac{\cos \frac{x}{2}dx}{2\sin \frac{x}{2}\cos^2\frac{x}{2}}=\int \frac{\sec^2\frac{x}{2}}{\tan\frac{x}{2}}d(\frac{x}{2})=\int \frac{d\tan\frac{x}{2}}{\tan \frac{x}{2}}=\ln|\tan \frac{x}{2}|+C$</p><p>总结下：三角函数者：奇次提，偶次被倍角公式替换</p><h3 id="第二类换元积分"><a href="#第二类换元积分" class="headerlink" title="第二类换元积分"></a>第二类换元积分</h3><p>​        我们把d()内的东西往外提，化而言之：就是换元$x=\varphi(t)$再求积分：</p><p>$\int f(x)dx=\int f(\varphi(t))\varphi’(t)dt$</p><p>1)$\int \sqrt{a^2-x^2}dx(a&gt;0)$</p><p>解:令：$x=a\sin t,t\in(-\frac{\pi}{2},\frac{\pi}{2})$</p><p>故：$\int \sqrt{a^2-x^2}dx=a\cos tdx$</p><p>$dx=a\cos t$</p><p>因此：$\int a^2\cos^2tdt=a^2(\frac{t}{2}+\frac{\sin2t}{4})+C=a^2t+a^2\frac{\sin t\cos t}{2}+C$</p><p>又$\sin t=\frac{x}{a},\cos t=\frac{\sqrt{a^2-x^2}}{a}$</p><p>这样：$\frac{a^2}{2}\arcsin\frac{x}{a}+\frac{x}{2}\sqrt{a^2-x^2}+C$</p><p>2)$\int \frac{dx}{\sqrt{x^2+a^2}}(a&gt;0)$</p><p>现令：$x=a\tan t$</p><p>则：$\int \frac{dx}{a\sec x}$</p><p>又：$dx=a\sec^2 tdt$</p><p>那么：$\int \sec tdt=\ln|\sec t+\tan t|+C$</p><p>我们可以使用三角形法来看：</p><p><img src="image-20230120122352772.png" alt="image-20230120122352772"></p><p>这下，我们找到了：$\tan t=\frac{x}{a},\sec t= \frac{\sqrt{x^2+a^2}}{a}$</p><p>于是：$=\ln|\frac{\sqrt{x^2+a^2}}{a}+\frac{x}{a}|+C=\ln(\sqrt{x^2+a^2}+x)+C’$</p><p>3)$\int \frac{dx}{\sqrt{x^2-a^2}}$</p><p>解：</p><p>令：$x=a\sec t,则：\int \frac{dx}{a\tan t}$</p><p>$dx=a\sec t\tan tdt$</p><p>于是：$\int \sec tdt=\ln(x+\sqrt{x^2-a^2})+C$</p><p><strong>小总结：</strong></p><p>$\sqrt{a^2-x^2}\longrightarrow x=a\sin t,|a\cos t|$</p><p><strong>$\sqrt{x^2-a^2}\longrightarrow x=a\sec t,|a\tan t|$</strong></p><p>$\sqrt{a^2+x^2}\longrightarrow x=a\tan t,|a\sec t|$</p><p>4)$\int \frac{\sqrt{a^2-x^2}}{x^4}dx$</p><p>解：令：$x=\frac{1}{t}$得：</p><p>$dx=-\frac{1}{t^2}dt,-\int (a^2t^2-1)^{0.5}|t|dt$</p><p>由此：$x&gt;0下 ,=-\frac{(a^2-x^2)^{1.5}}{2a^2x^3}+C$</p><p>或者使用三角函数也可以：</p><p><img src="image-20230120124326362.png" alt="image-20230120124326362"></p><h3 id="分部积分法"><a href="#分部积分法" class="headerlink" title="分部积分法"></a>分部积分法</h3><p>​        我们来看：$\int udv=uv-\int vdu$</p><p>我们就可以化简积分了：如：</p><p>1)$\int xe^xdx=\int xde^x=xe^x-e^x=(x-1)e^x+C$</p><p>有的时候，我们可以尝试的去试试看谁做微分是简单的</p><p>往往$e^x$要放到微分里。</p><p>2)$\int x\cos xdx=\int xd\sin x=x\sin x-\int \sin xdx=x\sin x+\cos x+C$</p><p>往往三角函数要放到微分里。</p><p>那这样呢：</p><p>$\int \sin x e^xdx$</p><p>注意：$=\sin xe^x-\int e^x\cos xdx=\sin x e^x-\cos xe^x-\int \sin x e^xdx$</p><p>居然出现了我们要求的东西：</p><p>于是：$\int \sin x e^xdx=\frac{1}{2}(\sin x e^x-\cos xe^x)$</p><p>3)$\int \arccos xdx=x\arccos x-\frac{1}{2}\int \frac{d(1-x^2)}{\sqrt{1-x^2}}=x\arccos x-\sqrt{1-x^2}+C$</p><h3 id="有理函数"><a href="#有理函数" class="headerlink" title="有理函数"></a>有理函数</h3><p>​        这是针对$\frac{P(x)}{Q(x)}$的有理分式的积分方法：我们主要是添项拆项从而分离成若干简单分式的和差，从而方便我们的积分</p><p>1）P(x)的阶高于Q(x)</p><p>​        我们分离常数使之所有的子分式的分母阶比分子高：</p><p>2）P(x)的阶低于Q(x)</p><p>i.分母一阶的，直接$\ln$</p><p>ii.分母二阶的：</p><p>可以因式分解的：分解因式化简</p><p>不可以因式分解的：配方后变成$(ax+b)^2+C$的$\arctan$类型积分</p><p><img src="image-20230120130430538.png" alt="image-20230120130430538"></p><p>iii.分子分母差一次、</p><p>把分子扔进d里面升次</p><p><img src="image-20230120130642841.png" alt="image-20230120130642841"></p><p>iv.一般的</p><p>我们假设一个式子可以分解成若干的分式和，其分式的特点是：分子比分母底一阶，分子假设为全项的多项式：</p><p>如</p><p><img src="image-20230120130943140.png" alt="image-20230120130943140"></p><p>根式：</p><p>令t为根式，换元即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> Math Works </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学教程（2）</title>
      <link href="/2023/01/31/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E6%95%99%E7%A8%8B%EF%BC%882%EF%BC%89/"/>
      <url>/2023/01/31/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E6%95%99%E7%A8%8B%EF%BC%882%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="高等数学基础教程：导数的定义与使用"><a href="#高等数学基础教程：导数的定义与使用" class="headerlink" title="高等数学基础教程：导数的定义与使用"></a>高等数学基础教程：导数的定义与使用</h1><h2 id="一-基本定义和性质"><a href="#一-基本定义和性质" class="headerlink" title="一.基本定义和性质"></a>一.基本定义和性质</h2><h3 id="导数的定义"><a href="#导数的定义" class="headerlink" title="导数的定义"></a>导数的定义</h3><p>​        恭喜！你来到了导数这一章！现在，我们可以使用它来更精确的描述函数是怎么增长变动的！！！</p><p>​        首先，引入一个场景：讨论速度与位移，并且我们都用时间来表示：</p><p>那么，一个平均速度可以用如下这个式子来表达：$v=\frac{f(t)-f(t_0)}{t-t_0}$</p><p>​        这是我们中学就已经熟知的。</p><p>​        现在，让我们让$t\rightarrow{t_0}$ 也就是让t逼近$t_0$。这样，回到高中物理，我们就知道我们得到了瞬时速度。</p><p>​        其实，很多函数变化，都可以类比的使用这种办法得到函数在一个点的变化情况，下面，让我们统一一下，使用一个定义来综述：</p><p>$定义 y=f(x)在x_0的领域内有定义，对x_0取增量\Delta{x}，那么函数的增量就是\Delta{y}=f(x_0+\Delta{x})-f(x_0)，如果\lim\limits_{\Delta{x}\rightarrow{0}}\frac{\Delta{y}}{\Delta{x}}=\lim\limits_{\Delta{x}\rightarrow{0}}\frac{f(x_0+\Delta{x})-f(x_0)}{\Delta{x}}$ $是存在的，我们就称呼y=f(x)在x_0处可导，且这个极限值就是y=f(x)在x_0处的导数$</p><p>​        记作$y’| _{x=x_0},f’(x_0),\frac{dy}{dx}|_{x=x_0}，\frac{df(x)}{dx}|_{x=x_0}$上面四个选一个</p><p>当然，导数还有另一个定义：就是</p><p>​      $如果\lim\limits_{x\rightarrow{x_0}}\frac{\Delta{y}}{\Delta{x}}=\lim\limits_{x\rightarrow{x_0}}\frac{f(x)-f(x_0)}{x-x_0}是存在的，我们就称呼y=f(x)在x_0处可导，且这个极限值就是y=f(x)在x_0处的导数$ </p><p>​        如果函数在一个区间内处处可导，我们就可以再用一个函数刻画导数：导函数$f’(x)$</p><p>​        下面来看一些函数的导（函）数（方便起见使用h代替$\Delta{x}$）</p><p>（1）$f(x)=C$</p><p>则：$\lim\limits_{h\rightarrow{0}}\frac{f(x+h)-f(x)}{h}=0$</p><p>故$C’=0$</p><p>(2)$f(x)=x^n$</p><p>1.当n=1时:$\lim\limits_{h\rightarrow{0}}\frac{f(x+h)-f(x)}{h}=1$</p><p>2.当n&gt;1时：$\lim\limits_{h\rightarrow{0}}\frac{f(x+h)-f(x)}{h}=\lim\limits_{h\rightarrow{0}}\frac{(x+h)^n-x^n}{h}$</p><p>而：$(x+y)^n=x^n+nx^{n-1}y+\frac{n(n-1)}{2}x^{n-2}y^{2}+…+ny^{n-1}x+y^n$</p><p>于是$极限=\lim\limits_{h\rightarrow{0}}nx^{n-1}+(…)\times{h}=nx^{n-1}$</p><p>3.当$f(x)=x^{\mu},\mu\in{R}，(x\neq{0})$</p><p>于是：</p><p><img src="image-20221230201314473.png" alt="image-20221230201314473"></p><p>$(x^\mu)’=\mu{x^{\mu-1}}$</p><p>4.$f(x)=\sin{x}$</p><p>$\lim\limits_{h\rightarrow{0}}\frac{f(x+h)-f(x)}{h}=\lim\limits_{h\rightarrow{0}}\frac{\sin{(x+h)}-\sin{x}}{h}=\lim\limits_{h\rightarrow{0}}\frac{\cos(x+\frac{h}{2})\times{\sin{\frac{h}{2}}}}{\frac{h}{2}}=\cos{x}$</p><p>所以：$\sin’{x}=\cos{x}$</p><p>类似的$\cos’{x}=-\sin{x}$</p><p>5.$(a^x)’=a^x\ln{a},特别的(e^x)’=e^x$</p><p>6.$\log’_{a}{x}=\frac{1}{x\ln{a}},特别的\ln’x=\frac{1}{x}$</p><h3 id="单侧导数"><a href="#单侧导数" class="headerlink" title="单侧导数"></a>单侧导数</h3><p>​        导数也有单侧导数的这一概念，直观的讲，正是导数以不同的方式逼近一个点所产生的：</p><p>​        回忆我们先前的类似概念，左侧导数的定义是这样的：</p><p>​        </p><script type="math/tex; mode=display">f'_{-}(x_0)=\lim\limits_{\Delta{x}\rightarrow{0^-} }\frac{f(x_0+h)-f(x_0)}{h}</script><p>​        更容易理解的：右导数的定义是这样的：</p><script type="math/tex; mode=display">f'_{+}(x_0)=\lim\limits_{\Delta{x}\rightarrow{0^+}}\frac{f(x_0+h)-f(x_0)}{h}</script><p>​        当然，也有第二定义</p><p>​        左导数：</p>$$f'_{-}(x_0)=\lim \limits_{ { x } \rightarrow{x_0^-} } \frac{f(x_0+h)-f(x_0)} {h}$$<p>​        右导数：</p><script type="math/tex; mode=display">f'_{+}(x_0)=\lim\limits_{ { x} \rightarrow{x_0^+} }\frac{f(x_0+h)-f(x_0)}{h}</script><p>​        于是，可导的一种判断方式有了：在一个点的左右导数存在相等。</p><p>​        对于$y=|x|$ ，在$x_0$左侧的左导数为-1，右导数为1，这两个不相等，故$|x|$在$x=0$处不存在导数。</p><h3 id="导数也有几何意义"><a href="#导数也有几何意义" class="headerlink" title="导数也有几何意义"></a>导数也有几何意义</h3><p>​        导数也有几何意义，不错。那么，导数的几何意义是什么呢？直接说：导数的几何意义就是函数图像在某一点上的切线的斜率，一个处处可导的曲线必然光滑。</p><p><img src="image-20230104153906913.png" alt="image-20230104153906913"></p><p>​        于是，切线方程可以这样给出</p><script type="math/tex; mode=display">l:y-y_0=f'(x_0)(x-x_0)</script><p>​        有切线了，法线也会有：法线就是过切点的，垂直于切线的线：</p><script type="math/tex; mode=display">l':y-y_0=-\frac{1}{f'(x_0)}(x-x_0)</script><p>​        比如说，让我们求$y=\frac{1}{x}$在$(\frac{1}{2},2)$上的切线：</p><script type="math/tex; mode=display">证明:显然在x_0=\frac{1}{2}这个点上，f'(x_0)=-4</script><script type="math/tex; mode=display">于是切线方程为:y-2=-4(x-\frac{1}{2})</script><script type="math/tex; mode=display">法线方程为：y-2=\frac{1}{4}(x-\frac{1}{2})</script><h3 id="联系起来：探寻可导与连续的关系"><a href="#联系起来：探寻可导与连续的关系" class="headerlink" title="联系起来：探寻可导与连续的关系"></a>联系起来：探寻可导与连续的关系</h3><p>​        我们可以简单的理解认为可导就说明函数曲线的光滑，连续就是函数图像不产生间断。看来：函数如果光滑，则一定没有间断，函数没有间断却不一定光滑。那我们认为：<strong>可导必然连续，连续不一定可导。</strong></p><p>​        对于这件事情：可以想象一排自行车：如果他们想多米诺骨牌一样倒下了 （可 倒（导））说明他们一定连续的放置，反之，如果不去动他们，则他们就算连续放置也不会倒下，可以这样记。</p><p>​        回到数学的定义上，我们对比一下：</p><script type="math/tex; mode=display">连续:\lim\limits_{\Delta{x}\rightarrow{0}}\Delta{y}=0</script><script type="math/tex; mode=display">可导:\lim\limits_{\Delta{x}\rightarrow{0}}\frac{\Delta{y}}{\Delta{x}}=C(const)</script><p>​        于是，如果一个$\Delta{x}\rightarrow{0}$，同时，可导定义比出来的比值还必须是一个常数，由同阶无穷小的定义，我们不得不得出$\lim\limits_{\Delta{x}\rightarrow{0}}\Delta{y}=0$的结论，也就是连续。</p><p>​        反之，我们的$\Delta{y}$可能并不会与$\Delta{x}$属于同阶无穷小，因此，我们的可导定义极限可能发散。于是：就可能并不可导</p><h3 id="求导法则：和差商积"><a href="#求导法则：和差商积" class="headerlink" title="求导法则：和差商积"></a>求导法则：和差商积</h3><p>​        高中我们就接触过了：</p><p>​        首先定义$u,v$是两个可导函数，其值为$u’,v’$</p><script type="math/tex; mode=display">法则1: (u+v)'=u'+v'</script><script type="math/tex; mode=display">法则2:(u-v)'=u'-v'</script><script type="math/tex; mode=display">法则3:(uv)'=uv'+vu'</script><script type="math/tex; mode=display">法则4:(cu)'=cu'(c是常数)</script><script type="math/tex; mode=display">法则5:(\frac{u}{v})'=\frac{u'v-uv'}{v^2}</script><p>法则1234都可以扩展：</p><p>对于有限个$u_i$的可导函数：他们的和的导数为各自导数的和</p><script type="math/tex; mode=display">(u+v+w+...+...+s)'=u'+v'+w'+...+...+s'</script><p>对于有限个$u_i$的可导函数：他们的积的导数为所有$u_i$的积中轮流取出一个$u_k(k\in{(1,i)})$求一次导</p><script type="math/tex; mode=display">(uvw...s)'=u'vw...s+uv'w...s+uvw'...s+...+uvw...s'</script><h3 id="反函数的求导法则"><a href="#反函数的求导法则" class="headerlink" title="反函数的求导法则"></a>反函数的求导法则</h3><p>​        反函数也能求导。</p><script type="math/tex; mode=display">定理:x=f(y)在I_y内单调且可导，同时f'(y)\neq{0},</script><script type="math/tex; mode=display">那么反函数y=f^{-1}(x)的导函数如下：</script><script type="math/tex; mode=display">[f^{-1}(x)]'=\frac{1}{f'(y)}</script><p>​        超前一点，可以引入记号$\frac{dy}{dx}$表达$f(x)$的导数，而$\frac{dx}{dy}$就是反函数，于是：</p><script type="math/tex; mode=display">\frac{dx}{dy}=\frac{1}{\frac{dy}{dx}}</script><p>​        他让我们的导数公式可以扩充了：</p><p>​        例如:$x=\sin{y}$作为$y=\sin{x}$的反函数的公式</p><script type="math/tex; mode=display">因为:\frac{dx}{dy}=\frac{1}{\frac{dy}{dx}}=\frac{1}{\cos{y}}</script><script type="math/tex; mode=display">且:\sin^2{y}+\cos^2{y}=1\Longrightarrow{\cos{y}=\sqrt{1-\sin^2{y}}=\sqrt{1-x^2}}</script><p>​        于是：$y=\arcsin{x}$的导数公式正是：$\arcsin{x}’=\frac{1}{\sqrt{1-x^2}}$.</p><p>​        这样，我们也还可以求出其他公式：</p><script type="math/tex; mode=display">\arccos{x}'=-\frac{1}{\sqrt{1-x^2}}</script><script type="math/tex; mode=display">\arctan{x}'=\frac{1}{1+x^2}</script><h3 id="复合函数的求导法则"><a href="#复合函数的求导法则" class="headerlink" title="复合函数的求导法则"></a>复合函数的求导法则</h3><p>​        下面，我们先从严肃的讲起：</p><p>​        假设，我说假设：$f(x)$是一个很复杂的东西：但好消息是，可以是做若干函数的嵌套：比如说$\ln{\sqrt{\frac{1}{cos{\ln{\sin^2{x}}}}}{sin{x}}}$云者，那这样的函数这么求导呢？复合求导法来力！</p><p>​        </p><script type="math/tex; mode=display">法则:简单的，视函数f(x)是由f(u),u=g(x)嵌套，那么它的导数是:</script><script type="math/tex; mode=display">f'(x)=f'(u)\times{g'(x)}</script><p>​        就是说，我们可以视$u$作一个整体，先想象成单一函数$f(x)$求导，不过$x$是$u$,随后对$u$求导，乘起来的时候u要换成x.</p><p>​        使用微分语言是这样描述的：</p><script type="math/tex; mode=display">\frac{dy}{dx}=\frac{dy}{du}\times\frac{du}{dx}</script><p>​        想象成分式乘法，我们自然可以：</p><script type="math/tex; mode=display">\frac{dy}{dx}=\frac{dy}{du}\times\frac{du}{dk}\times\frac{dk}{dw}...\times\frac{ds}{dx}</script><p>​        例如说：对$e^{x^{3}}$求导</p><p>​        我们首先设$u=x^3$，而$e^u$对$u$求导显然是$e^u$，那么$u$对$x$是$3x^2$根据法则，我们要把连着直接相乘$3e^u{x^2}$，但是还没换回来$x$,因此将$u=x^3$换回来得到结果$3e^{x^3}{x^2}$</p><p>​        那么：$y=\ln{\cos{e^x}}$如何？</p><p>​        直接设置$y=\ln{u},u=\cos{v},v=e^x$结合复合函数求导法则。</p><p>​        $y’=\frac{1}{u}\times{-\sin{v}}\times{e^x}$</p><p>​        换元：$y’=\frac{-\sin{e^x}\times{e^x}}{\cos{e^x}}$</p><h3 id="导数公式表"><a href="#导数公式表" class="headerlink" title="导数公式表"></a>导数公式表</h3><p>​        介绍完导数的求导法则，我们也就可以引入一系列的求导表了：</p><script type="math/tex; mode=display">(C)'=0</script><script type="math/tex; mode=display">(x^{\mu})'=\mu{x^{\mu-1}}</script><script type="math/tex; mode=display">\sin{x}'=\cos{x}</script><script type="math/tex; mode=display">\cos{x}'=-\sin{x}</script><script type="math/tex; mode=display">\tan{x}'=\sec^2{x}</script><script type="math/tex; mode=display">\cot{x}'=-\csc^2{x}</script><script type="math/tex; mode=display">\sec{x}'=\sec{x}\tan{x}</script><script type="math/tex; mode=display">\csc{x}'=-\csc{x}\cot{x}</script><script type="math/tex; mode=display">(a^x)'=\ln{a}\times{a^x},(e^x)'={e^x}</script><script type="math/tex; mode=display">\log_a{x}'=\frac{1}{x\ln{a}}</script><script type="math/tex; mode=display">\ln{x}'=\frac{1}{x}</script><script type="math/tex; mode=display">\arcsin{x}'=\frac{1}{\sqrt{1-x^2}}</script><script type="math/tex; mode=display">\arccos{x}'=-\frac{1}{\sqrt{1-x^2}}</script><script type="math/tex; mode=display">\arctan{x}'=\frac{1}NaN</script><script type="math/tex; mode=display">arccot{x}'=-\frac{1}NaN</script><h3 id="高阶导数"><a href="#高阶导数" class="headerlink" title="高阶导数"></a>高阶导数</h3><p>​        就是对一个函数求有限次导数：比如说</p><script type="math/tex; mode=display">y=x^3,y'=3x^2,y''=6x,y'''=6,y^{(4)}=0</script><p>​        在微分学里也有专门的符号表示</p><script type="math/tex; mode=display">一阶导数:\frac{dy}{dx}</script><script type="math/tex; mode=display">二阶导数:\frac{d}{dx}(\frac{dy}{dx})=\frac{d^2y}{dx^2}</script><script type="math/tex; mode=display">N阶导数:\underbrace{\frac{d}{dx}\frac{d}{dx}...\frac{d}{dx}\frac{dx}{dy}}_{Ntimes}=\frac{d^ny}{dx^n}</script><p>一些常见的N阶导数公式是如下的：</p><script type="math/tex; mode=display">\sin^{(x)}x=\sin{(x+\frac{n}{2}{\pi})}</script><script type="math/tex; mode=display">\cos^{(x)}x=\cos{(x+\frac{n}{2}{\pi})}</script><script type="math/tex; mode=display">\ln^{(n)}{(x+1)}=(-1)^{n-1}\frac{(n-1)!}{(1+x)^n}</script><script type="math/tex; mode=display">x^{\mu{(n)}}=\mu{(\mu-1)}{(\mu-2)}...{(\mu-n+1)}x^{\mu-n}</script><p>一些法则也是成立的：</p><script type="math/tex; mode=display">(u+v)^{(n)}=u^{(n)}+v^{(n)}</script><p>但是乘法不是，是莱布尼兹公式：</p><script type="math/tex; mode=display">(uv)^{(n)}=\sum^{n}_{k=0}C^{k}_{n}u^{(u-k)}v^{k}</script><h3 id="隐函数求导"><a href="#隐函数求导" class="headerlink" title="隐函数求导"></a>隐函数求导</h3><p>​        我们现在接触的函数都是显函数，$y$与$x$都是显然分离的，比如说$y=\sin{x}$云者，有一些函数是$x$和$y$混在一起的，比如说如下的几个式子</p><p>​                                                $                e^{xy}+\sin{y^2}+x^3+8=0$</p><p>​                                                    $e^y-xy-e=0$</p><p>云者。这些被称为隐函数，或者说：关于x的一个方程。</p><p>​        下面，我们介绍这样函数的求导方式：</p><p>​        我们假设$y=y(x)$是一个x的函数，于是，这样的方程成为了一个恒等式：一个关于x的一个大函数$F(x,f(x))=0$的式子。，现在我们求导，就是使用求导法则运算解决问题：右侧作为常数，导数恒为0，对左侧求导即可。下面对：</p><p>​                                                    $e^y-xy-e=0$</p><p>求导</p><p>​        左侧：$e^y\cdot{y’}+y+xy’$</p><p>​        右侧：0</p><p>​        现在参数分离：$y’=-\frac{y}{e^y+x}$</p><p>​                                            $y^5+2y-x-3x^7=0$</p><p>求导：</p><p>​        左侧：$5y^4y’+2y’-1-21x^6=0$</p><p>​        右侧：0</p><p>​        现在参数分离：$y’=\frac{1+21x^6}{5y^4+2}$</p><h3 id="参数方程求导"><a href="#参数方程求导" class="headerlink" title="参数方程求导"></a>参数方程求导</h3><p>​        我们说一些函数可以用</p><script type="math/tex; mode=display">\begin{align*}\begin{split}\left \{\begin{array}{ll}  x= \psi{(t)}                    \\  y=  \varphi{(t)}                               \end{array}\right.\end{split}\end{align*}</script><p>表示，这个时候，可以使用微分形式的公式更好的表达求导：</p><script type="math/tex; mode=display">\frac{dy}{dx}=\frac{\frac{dy}{dt}}{\frac{dx}{dt}}=\frac{\varphi{(x)}'}{\psi{(x)}'}</script><p>微分可以视作增量的一种表达：</p><p>​        回顾增量公式$\Delta{y}=f(x_0+\Delta{x})-f(x_0)$,我们常常发现以这种形式表达的$\Delta{y}$经常可以被写成$A\Delta{x}+o(\Delta{x})$的形式，注意到$A$与$\Delta{x}$是无关的。如果函数的增量可以这样表达：</p><script type="math/tex; mode=display">\Delta{y}=A\Delta{x}+o(\Delta{x})</script><p>​        $A$与$\Delta{x}$是无关,</p><p>​        那么，我们就改写成这样的形式：</p><script type="math/tex; mode=display">dy=Adx</script><p>​        同时，我们还说这样的函数在这一点是可微的：并且，可微一定可导，可导也一定可微：事实上，以此为基准</p><script type="math/tex; mode=display">dy=f'(x_0)dx</script><p>​        微分与导数就是变化率问题的等价表达</p><p>​        于是任何微分公式都可以由上述公式给出：</p><p>​        比如说：$y=x^2,dy=2xdx$</p><h3 id="微分在近似计算的应用"><a href="#微分在近似计算的应用" class="headerlink" title="微分在近似计算的应用"></a>微分在近似计算的应用</h3><p>​        回到上面讲的公式：</p><script type="math/tex; mode=display">\Delta{y}=f(x_0+\Delta{x})-f(x_0)</script><p>​        这个公式，我们可以对一个已知临近量的函数值求另一点相近的函数值的近似值，我们对公式移项：</p><script type="math/tex; mode=display">f(x_0+\Delta{x})=f'(x_0)\Delta{x}+f(x_0)</script><p><img src="image-20230104175543374.png" alt="image-20230104175543374"></p><h2 id="二-导数的应用"><a href="#二-导数的应用" class="headerlink" title="二.导数的应用"></a>二.导数的应用</h2><h4 id="Rolle（罗尔）定理"><a href="#Rolle（罗尔）定理" class="headerlink" title="Rolle（罗尔）定理"></a>Rolle（罗尔）定理</h4><p>​        事实上，为了更好的证明罗尔定理，一般我们需要严格的引入费马定理：</p><h4 id="费马定理"><a href="#费马定理" class="headerlink" title="费马定理"></a>费马定理</h4><p><strong>$f(x)$在$x_0$及其领域有定义，且在$x_0$处可导，如果$f(x)\leqslant{f(x_0)}$(或者$f(x)\geqslant{f(x_0)}$)</strong></p><p><strong>则$\forall{x}\in \cup(x_0)$(这表示领域)，$f’(x_0)=0$</strong></p><p><img src="image-20230106084644861.png" alt="image-20230106084644861"></p><p>​        看起来容易，怎么证明？我们不妨从$x_0$可导入手：</p><p>证明：以$f(x_0)$是最大值为例：函数$f(x)$在$x_0$处可导，那就要求：</p><script type="math/tex; mode=display">x\in \cup(x_0),f(x)\leqslant{f(x_0)}</script><p>​        同时注意到$x_0+\Delta{x}$也是在$\cup(x_0)$上的，于是也有：</p><script type="math/tex; mode=display">x_0+\Delta{x} \in \cup(x_0),f(x_0+\Delta{x})\leqslant{f(x_0)}</script><p>​        同时函数$f(x)$在$x_0$处可导：</p><script type="math/tex; mode=display">f'_{-}(x_0)=\lim\limits_{\Delta{x}\rightarrow{0^-}}\frac{f(x_0+\Delta{x})-f(x_0)}{\Delta{x}}\leqslant{0}</script><script type="math/tex; mode=display">f'_{+}(x_0)=\lim\limits_{\Delta{x}\rightarrow{0^+}}\frac{f(x_0+\Delta{x})-f(x_0)}{\Delta{x}}\geqslant{0}</script><p>​        </p><script type="math/tex; mode=display">f'_{-}(x_0)=f'_{+}(x_0)</script><p>​        上面的三个式子联立：得到$f’_{-}(x_0)=f’_{+}(x_0)=f’(x_0)=0$</p><p>证毕。</p><p>​        于是：又把导数为0的点成为驻点，因为函数在这一点停靠在$y=f(x_0)$上不变化，他们是可能的极值点（会在后面阐述为什么是可能）</p><h4 id="罗尔定理"><a href="#罗尔定理" class="headerlink" title="罗尔定理"></a>罗尔定理</h4><p><strong>首先函数$f(x)$满足</strong></p><p><strong>1）在$[a,b]$上连续 2)在$(a,b)$上可导 3）$f(a)=f(b)$</strong></p><p><strong>则至少存在一点$\xi\in(a,b),f’(\xi)=0$</strong></p><p><img src="image-20230106090148355.png" alt="image-20230106090148355"></p><p>这个定理说明了在端点值相等的区间里函数必有<strong>至少</strong>一个驻点。</p><h4 id="拉格朗日中值定理"><a href="#拉格朗日中值定理" class="headerlink" title="拉格朗日中值定理"></a>拉格朗日中值定理</h4><p><strong>要求：1)$[a,b]$连续          2)$(a,b)$可导：</strong></p><p><strong>则函数$f(x)$在$(a,b)$上至少有一个点$\xi$,使得下面的式子成立：</strong></p><script type="math/tex; mode=display">f'(\xi)=\frac{f(b)-f(a)}{b-a}</script><p><img src="image-20230106090806236.png" alt="image-20230106090806236"></p><p>​        说白了，就是罗尔定理的扩展，我们链接两个端点，产生的直线称为函数的一条<strong>弦</strong>在函数上我们至少可以找到一个点的切线斜率等于这条线的斜率的大小。</p><h4 id="柯西中值定理"><a href="#柯西中值定理" class="headerlink" title="柯西中值定理"></a>柯西中值定理</h4><p>如果$f(x)$和$F(x)$满足：</p><p>1）$[a,b]$连续          2)$(a,b)$可导          3）$\forall{x}\in(a,b),F’(x)\neq{0}$</p><p>则至少有一个点$\xi$,使得$\frac{f(b)-f(a)}{F(b)-F(a)}=\frac{f’(\xi)}{F’(\xi)}$</p><p>​        这又是拉格朗日中值定理的推广。</p><h4 id="洛必达法则"><a href="#洛必达法则" class="headerlink" title="洛必达法则"></a>洛必达法则</h4><p>​        这玩意干嘛的？求解未定式$\frac{0}{0}$,$\frac{\infty}{\infty}$的式子</p><p>注意：法则内容如下：</p><p>1）两个函数$f(x),F(x)$在$x\rightarrow a$都同时倾向于$0$或者$\infty$ </p><p>2）在$a$的去心领域内$f’(x),F’(x)$都存在且$F’(x)\neq 0$</p><p>3）$\lim\limits_{x\rightarrow a}\frac{f’(x)}{F’(x)}$存在（或者无穷大）</p><p>则$\lim\limits_{x\rightarrow a}\frac{f(x)}{F(x)}=\lim\limits_{x\rightarrow a}\frac{f(x)}{F(x)}$</p><p>例子：</p><script type="math/tex; mode=display">1)\lim\limits_{x\rightarrow 0}\frac{\sin{ax}}{\sin bx}=\lim\limits_{x\rightarrow 0}\frac{a\cos ax}{b \cos bx}=\frac{a}{b}</script><p>注意：如果使用完一次洛必达后的式子<strong>仍满足洛必达的条件</strong>可以继续使用</p><p>比如说</p><script type="math/tex; mode=display">\lim\limits_{x\rightarrow 1}\frac{x^3-3x+2}{x^3-x^2-x+1}=\lim\limits_{x\rightarrow 1}\frac{3x^2-3}{3x^2-2x-1}=\lim\limits_{x\rightarrow 1}\frac{6x}{6x-2}</script><p>​        到这里就不能再使用洛必达法则了：因为$\lim\limits_{x\rightarrow 1}\frac{6x}{6x-2}$不满足条件1)，所以：直接带值得到$\frac{3}{2}$结束</p><p>​        注意，我们可以使用这个法则分析一些常见函数的发散速度：</p><p>命题：比较$\ln x,x^n,e^{\lambda{x}}$的发散速度</p><p>比较$\ln x,x^n$</p><script type="math/tex; mode=display">\lim\limits_{x\rightarrow \infty}\frac{\ln x}{x^n}=\lim\limits_{x\rightarrow \infty}\frac{1}{nx^{n-1}\cdot{x}}=0</script><p>​        这意味这$\ln{x}$的发散速度小于$x^n$的发散速度。</p><p>比较$x^n，e^{\lambda{x}}$</p><script type="math/tex; mode=display">\lim\limits_{x\rightarrow \infty}\frac{x^n}{e^{\lambda{x}}}=\lim\limits_{x\rightarrow \infty}\frac{nx^{n-1}}{\lambda e^{\lambda{x}}}=\lim\limits_{x\rightarrow \infty}\frac{n(n-1)x^{n-2}}{\lambda ^2e^{\lambda{x}}}=...=\lim\limits_{x\rightarrow \infty}\frac{n!}{\lambda ^ne^{\lambda{x}}}=0</script><p>​    这意味这$x^n$的发散速度小于$e^{\lambda{x}}$的发散速度。</p><h4 id="泰勒公式"><a href="#泰勒公式" class="headerlink" title="泰勒公式"></a>泰勒公式</h4><p>​        泰勒公式是用若干多项式近似描述函数的一个公式：</p><script type="math/tex; mode=display">P_n(x)=\sum_{k=0}^{n} a_k(x-x_0)^k +R(x)=f(x)</script><p>​        这样一个过程。$R(x)$是高于n阶的一个误差数。</p><p>​        我们求$x_0$一阶导数得到：$f’(x_0)=a_1$</p><p>​        类似的$f’’(x_0)=1\cdot 2a_2$</p><p>​        $f’’’(x_0)=1\cdot 2 \cdot 3a_3$</p><p>​        …</p><p>​        $f^{(n)}(x)=n!a_n$</p><p>​        这样多项式的系数就确定了！替换一下：</p><script type="math/tex; mode=display">f(x)=f(x_0)+f'(x_0)(x-x_0)+\frac{f''(x_0)}{2!}(x-x_0)^2+...+\frac{f^{(n)}(x_0)}{n!}(x-x_0)^n+R_n(x)</script><p>其中$R_n(x)=o(x-x_0)^n$当然，由拉格朗日中值定理，$R_n(x)$也可以这样表达：</p><script type="math/tex; mode=display">R_n(x)=\frac{f^{(n+1)}(\xi)}{(n+1)!}(x-x_0)^{n+1}</script><p>当然还有更紧凑的形式：</p><script type="math/tex; mode=display">f(x)=\sum_{k=0}^{n}\frac{f^{(k)}(x_0)}{k!}(x-x_0)^k+R_n(x)</script><p>我们使用泰勒公式看看一些函数的近似,为了简便，我们自然取$x_0=0$</p><script type="math/tex; mode=display">e^x=1+x+\frac{x^2}{2}+\frac{x^3}{6}+...+\frac{x^n}{n!}+R_n(x)=\sum_{k=0}^{n}\frac{(x-x_0)^k}{k!}+R_n(x)</script><script type="math/tex; mode=display">\sin{x}=x-\frac{x^3}{3!}+\frac{x^5}{5!}-...(-1)^{(m-1)}\frac{x^{(2m-1)}}{(2m-1)!}+R_{2m}(x)=\sum_{k=0}^{n}\frac{(-1)^{(m-1)}(x-x_0)^k}{(2m-1)!}+R_{2m}(x)</script><script type="math/tex; mode=display">\cos{x}=1-\frac{x^2}{2!}+\frac{x^4}{4!}-...(-1)^{(m-1)}\frac{x^{2m}}{(2m)!}+R_{2m}(x)=\sum_{k=0}^{n}\frac{(-1)^{(m-1)}(x-x_0)^k}{(2m)!}+R_{2m}(x)</script><script type="math/tex; mode=display">\ln{(x+1)}=x-\frac{x^2}{2}+\frac{x^3}{3}-...+(-1)^{(n-1)}\frac{x^n}{n}+\sum_{k=1}^{n}(-1)^{(n-1)}\frac{x^n}{n}+R_n(x)</script><script type="math/tex; mode=display">(1+x)^\alpha=1+\alpha{x}+\frac{\alpha(\alpha-1)}{2!}x^2+...+\frac{\alpha(\alpha-1)...(\alpha-n+1)}{n!}(x-x_0)^n=\sum_{k=0}^{n}\frac{C_k^{\alpha}}{k!}(x-x_0)^k</script><h4 id="函数的单调性"><a href="#函数的单调性" class="headerlink" title="函数的单调性"></a>函数的单调性</h4><p>​        现在，我们可以系统的分析函数的单调性了：</p><p>​        函数的单调性分为单调递增和单调递减：( x 在区间 I ,且函数连续)</p><script type="math/tex; mode=display">函数单调递增:f'(x)>0</script><script type="math/tex; mode=display">函数单调递减:f'(x)<0</script><p>​        于是下面给出定理：</p><script type="math/tex; mode=display">y=f(x)在[a,b]连续,(a,b)可导 且f'(x)\geqslant{0},更进一步的等号在有限个点取到</script><script type="math/tex; mode=display">那么我们说：函数在区间(a,b)上单调递增</script><p>​        同理：单调递减的也是类似的</p><script type="math/tex; mode=display">y=f(x)在[a,b]连续,(a,b)可导 且f'(x)\leqslant{0},更进一步的等号在有限个点取到</script><script type="math/tex; mode=display">那么我们说：函数在区间(a,b)上单调递减</script><p>​        函数的单调性与一阶导数息息相关，看一些例题 </p><script type="math/tex; mode=display">分析y=x-\sin x [-\pi,\pi]的单调性</script><p>​        </p><p>​        因为：</p><script type="math/tex; mode=display">y'=1-\cos{x}\geqslant 0</script><p>​        故函数总在$[-\pi,\pi]$单调递增。</p><p>​        这样的一些点是我们在求解一阶导数的时候需要注意的：</p><p>1）$f’(x)=0$  的点：又叫驻点。</p><p>2)导数不存在的点</p><p>例题：</p><script type="math/tex; mode=display">分析f(x)=2x^3-9x^2+12x-3 的单调性</script><script type="math/tex; mode=display">f'(x)=6x^2-18x+12=6(x-1)(x-2)</script><script type="math/tex; mode=display">所以：x<1单增，1\leqslant{x}\leqslant{2}单减，x\geqslant{2} 单增</script><h4 id="函数的凹凸性"><a href="#函数的凹凸性" class="headerlink" title="函数的凹凸性"></a>函数的凹凸性</h4><p>​        我们还要关注函数是怎样的单调递增或者单调递减，这就需要我们使用二阶导数分析函数的凹凸性。</p><p>​        首先我们来看定义：</p><p>​        <strong>仍对于$f(x)$在区间$I$上连续，如果对任意的$x_1,x_2 \in I (x_1\neq{x_2})$</strong></p><script type="math/tex; mode=display">f(\frac{x_1+x_2}{2})<\frac{f(x_1)+f(x_2)}{2}</script><p>​        <strong>我们就称呼$f(x)$在区间$I$上的图像是凹的（上凹）</strong></p><p>​        <strong>类比的：如果：</strong></p><script type="math/tex; mode=display">f(\frac{x_1+x_2}{2})>\frac{f(x_1)+f(x_2)}{2}</script><p>​        <strong>那么我们又称呼$f(x)$在区间I上的图像是凸的（下凹的）</strong></p><p><img src="image-20230107152418652.png" alt="image-20230107152418652"></p><p>​        函数$f(x)$如果在$I$上是凹（凸）的，那么$-f(x)$是凸(凹)的。</p><p><img src="image-20230107152556639.png" alt="image-20230107152556639"></p><p>​        我们先前就提到过：函数的凸凹性和函数的二阶导数密切相关，下面我们来一睹定理的芳容：</p><p>​        <strong>设$f(x)$在区间$I$上二阶可导，那么：</strong></p><p>​        <strong>（1）若在$I$上$f’’(x)&gt;0$，那么我们说函数是凹的</strong></p><p>​        <strong>（2）若在$I$上$f’’(x)&lt;0$，那么我们说函数是凹的</strong></p><h4 id="极值及其求法"><a href="#极值及其求法" class="headerlink" title="极值及其求法"></a>极值及其求法</h4><p>​        首先我们需要区分一下极值和最值：</p><p>​        极值：邻域内函数的最大最小值</p><p>​        最值：在全函数的定义域内函数的最大最小值</p><p>下面给出严肃的定义：</p><p>​        定义：$f(x)$在$x_0$的领域$\cup (x_0)$下有定义且连续,$\forall{x}\in\mathring{U}(x_0)$,$f(x)<f(x_0)(或者)(f(x)>f(x_0))$那么我们说$f(x_0)$是函数的极大值 or 极小值。</p><p>​        极值的定理 I:(必要条件)函数可导，且在此点$x_0$的导数 $f’(x_0)=0$</p><p>​        极值的定理 II:(第一充分条件)：$f(x)$在$x_0$处连续,且在$\mathring{U}(x_0)$处可导</p><p>（1）$x \in(x_0-\delta,x_0)$ 且$f’(x)&gt;0$,而$x \in(x_0,x_0+\delta)$ 且$f’(x)&lt;0$我们说函数在此点取上极大值</p><p>（2）$x \in(x_0-\delta,x_0)$ 且$f’(x)&lt;0$,而$x \in(x_0,x_0+\delta)$ 且$f’(x)&gt;0$我们说函数在此点取上极小值</p><p>如果不变号，那就不是极值点。</p><p>​        下面总结流程：</p><p>​        （1）求$f’(x)$</p><p>​        （2）求驻点和不可导点</p><p>​        （3）考察上面这些点的变号情况</p><p>例题：$f(x)=(x-4)\sqrt[3]{(x+1)^2}$的极值点.</p><p>$f’(x)=\frac{5(x-1)}{3\sqrt[3]{x+1}}$令$f’(x)=0$</p><p>得到 $x=1$是驻点，$x=-1$是不可导点</p><p>1)$x=-1$,$x&lt;-1$时，$f’(x)&gt;0$, $x&gt;-1$时，$f’(x)&lt;0$,所以这是一个极大值点</p><p>2）$x=1$,$x<1$时，$f'(x)<0$, $x>-1$时，$f'(x)>0$,所以这是一个极小值点</p><p>当然还有别的判断方式：</p><p>​        定理 II’（第二充分条件）函数$f(x)$二阶可导，$f’(x_0)=0,f’’(x_0)\neq{0}$</p><p>当：</p><p>1)$f’’(x)&lt;0$在$x_0$处取极大值</p><p>2)$f’’(x)&gt;0$,在$x_0$处极小值</p><h4 id="函数图像的绘制"><a href="#函数图像的绘制" class="headerlink" title="函数图像的绘制"></a>函数图像的绘制</h4><p>​        下面我们开始绘制函数的图像！这也是系统分析函数的步骤</p><p>​        1）分析函数的定义域，以及可能的奇偶性，周期性</p><p>​        2)求出一阶导数，二阶导数，和他们等于0的点</p><p>​        3)找出函数的间断点（从定义域得到），以及一阶导数，二阶导数不存在的点</p><p>​        4）由此求出函数的单调性凹凸性</p><p>​        5）看看是否有渐近线（铅锤，水平，斜的渐近线）</p><p>​        6）确定极值（带点）</p><p>例如：$y=x^3-x^2-x+1$</p><p>​        显然函数的定义域为$R$，且无奇偶性，周期性</p><p>​        $f’(x)=3x^2-2x-1,f’’(x)=2(3x-1)$</p><p>​        令$f’(x)=0,x=-\frac{1}{3}或x=1$,当$f’’(x)=0,x=\frac{1}{3}$</p><p>​        确定函数的分间断是：$(-\infty,-\frac{1}{3}),[-\frac{1}{3},\frac{1}{3}],[\frac{1}{3},1],[1,+\infty]$</p><p>​        并且列表时按照如下格式列</p><p>![image-20230107161122390]image-20230107161122390.png)</p><p>补充：函数的渐近线是如下公式确定的：</p><script type="math/tex; mode=display">if :\lim{\frac{f(x)}{x}}=k存在，那就有斜渐近线存在</script><script type="math/tex; mode=display">如果存在:则b=\lim{(f(x)-kx)},直线的方程就是y=kx+b</script><p>至于水平渐近线就是$\lim\limits_{x\rightarrow{\infty}}(f(x)-b)=0$那么就是$y=b$</p><p>铅锤渐近线:$\lim\limits_{x\rightarrow{a}}f(x)\rightarrow\infty$则就是$x=a$</p><h4 id="曲率分析："><a href="#曲率分析：" class="headerlink" title="曲率分析："></a>曲率分析：</h4><p>​        我们使用曲率来分析曲线的弯曲程度：</p><p><img src="image-20230107161834749.png" alt="image-20230107161834749"></p><p>​        这样看</p><p><img src="image-20230107161907141.png" alt="image-20230107161907141"></p><p>​        可以看到，如果$M$移动相同单位，其倾角变化越大，那就称之曲率越大：</p><script type="math/tex; mode=display">\overline{K}=|\frac{\Delta{\alpha}}{\Delta s}|</script><p>​        如果我们让图片里的$M,M’$靠拢，不久类比的得到一个点的曲率了吗 ？（ds是弧微分，后面有图片展示）</p><p>​        </p><script type="math/tex; mode=display">K=\lim\limits_{\Delta s \rightarrow 0}|\frac{\Delta{\alpha}}{\Delta s}|=|\frac{d\alpha}{ds}|</script><p>​        这样：直线的曲率:$K=0$</p><p>​        圆的曲率:$K=\frac{1}{r}$（ r 是圆的半径）</p><p><img src="image-20230107162607705.png" alt="image-20230107162607705"></p><p>​        曲率的公式在直角坐标系的公式可以从定义得到:</p><p>​        $y’=\tan{\alpha}$,$y’’=\sec^2{\alpha}$,于是:</p><script type="math/tex; mode=display">|\frac{d\alpha}{dx}|=\frac{y''}{\sec^2{x}}=\frac{y''}{1+\tan^2{\alpha}}=\frac{y''}{1+y'^2}</script><p>​        而$ds=$$\sqrt{1+y’^2}$</p><p><img src="image-20230107163229852.png" alt="image-20230107163229852"></p><p>​                                                                        弧微分</p><p>​        于是：</p><script type="math/tex; mode=display">|\frac{d\alpha}{ds}|=|\frac{\frac{y''}{1+y'^2}}{\sqrt{1+y'^2}}|=|\frac{y''}{(1+y'^2)^\frac{3}{2}}|</script><p>​        类比的，在参数方程下：</p><p><img src="image-20230107163642181.png" alt="image-20230107163642181"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Math Works </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法（1）</title>
      <link href="/2023/01/30/%E7%AE%97%E6%B3%95%EF%BC%881%EF%BC%89/"/>
      <url>/2023/01/30/%E7%AE%97%E6%B3%95%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="算法笔记"><a href="#算法笔记" class="headerlink" title="算法笔记"></a>算法笔记</h1><h3 id="认识时间复杂度"><a href="#认识时间复杂度" class="headerlink" title="认识时间复杂度"></a>认识时间复杂度</h3><p>​        我们有一些操作是常数时间完成的：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int a &#x3D;arr[i];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        因为我们直接计算偏移量直接取出的</p><p>​        但是这个不是</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int t&#x3D;list.get(i);&#x2F;&#x2F;链表<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        因为链表必须遍历，才能找到元素</p><p>​        以及加减乘除的操作是常数操作。</p><p>​        总而言之：涉及到数据量的操作都是<strong>非常数操作</strong></p><p>​        举个例子，选择排序：这个排序是一种选择某一个数与前面已经排好的数组开始对比。怎么保证前面的已经有序了呢？我们把算法作用在第一个元素上，这个时候那他与第二个元素排序，成功后就是一个有序小数组，这样就满足了递归的条件：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;Part I:C version without recurssion#include &lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;time.h&gt;#include&lt;windows.h&gt;&#x2F;&#x2F;using Choose sort to sort the array&#x2F;&#x2F;rand num getterint getRandNum(int maxRange)&#123;    srand((unsigned int)clock());    Sleep(10);    return rand()% maxRange;&#125;void printCurrentArray(int* array,int arraySize)&#123;    printf(&quot;Current array is shown:\n&quot;);    for(int i&#x3D;0; i&lt;arraySize; i++)    &#123;        printf(&quot;%d &quot;,array[i]);    &#125;    printf(&quot;\n&quot;);&#125;void swapInt(int* e1, int* e2)&#123;    int temp&#x3D;*e1;    *e1&#x3D;*e2;    *e2&#x3D;temp;&#125;int main()&#123;    &#x2F;&#x2F;get a rand array    int arr[10]&#x3D;&#123;0&#125;;    for(int i&#x3D;0; i&lt;10; i++)    &#123;        arr[i]&#x3D; getRandNum(100);    &#125;    &#x2F;&#x2F;Sort starts!    for(int i&#x3D;1; i&lt;10; i++)    &#123;        &#x2F;&#x2F;from the second one        &#x2F;&#x2F;Compared with the previous one and the front one        for(int j&#x3D;i;j&gt;0;j--)        &#123;            &#x2F;&#x2F;If inverted,invert them back            if(arr[j]&lt;arr[j-1])            &#123;                swapInt(&amp;arr[j], &amp;arr[j - 1]);            &#125;        &#125;        &#x2F;&#x2F;Target the Current Key and show:        printf(&quot;Current key is:%d\n&quot;,arr[i]);        printCurrentArray(arr,10);        printf(&quot;Enter the newline to go forward!&quot;);        getchar();    &#125;    printf(&quot;Eventually...\n&quot;);    printCurrentArray(arr,10);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;Or Recussion type#define _CRT_SECURE_NO_WARNINGS 1#include&lt;windows.h&gt;#include &lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;time.h&gt;&#x2F;&#x2F;using Choose sort to sort the array&#x2F;&#x2F;rand num getterint getRandNum(int maxRange)&#123;    srand((unsigned int)clock());    Sleep(10);    return rand() % maxRange;&#125;void printCurrentArray(int* array, int arraySize)&#123;    printf(&quot;Current array is shown:\n&quot;);    for (int i &#x3D; 0; i &lt; arraySize; i++)    &#123;        printf(&quot;%d &quot;, array[i]);    &#125;    printf(&quot;\n&quot;);&#125;void swapInt(int* e1, int* e2)&#123;    int temp &#x3D; *e1;    *e1 &#x3D; *e2;    *e2 &#x3D; temp;&#125;void insertSort(int* array, int arraySize, int cur_sort_place)&#123;    if (cur_sort_place &gt; arraySize-1)        return;    int j &#x3D; cur_sort_place;    while (j &gt; 0)    &#123;        if (array[j] &lt; array[j - 1])            swapInt(&amp;array[j], &amp;array[j - 1]);        j--;    &#125;    choiceSort(array, arraySize, cur_sort_place + 1);&#125;int main()&#123;    int arr[10] &#x3D; &#123; 0 &#125;;    for (int i &#x3D; 0; i &lt; 10; i++)    &#123;        arr[i] &#x3D; getRandNum(100);    &#125;    insertSort(arr, 10, 1);    printCurrentArray(arr, 10);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        这个算法的时间复杂度就是O($N^2$)，这是因为操作表达式的最高阶是$N^2$.</p><p>​        注意到O(N)表达的是表达式的最高此项，是衡量巨大数量下算法的优良度</p><p><img src="image-20230126193633933.png" alt="image-20230126193633933"></p><p>​        当时间复杂度相同时，通过==比较常数项==作出判断是否可靠。更多的时候我们选择直接开跑看看怎么样：</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public static void Process1()&#123;    int N&#x3D;1000;    int a&#x3D;1;    for(int i&#x3D;0 ; i&lt;N; i++)    &#123;        a*&#x3D;10;        a&#x3D;a+10;        a&#x3D;6127*9876;    &#125;&#125;public static void Process2()&#123;     int N&#x3D;1000;    int a&#x3D;1;    for(int i&#x3D;0 ; i&lt;N; i++)    &#123;        a&#x3D;10|1;        a^&#x3D;10;        a&#x3D;a&amp;9876;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        对，就是这种。</p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>​        回顾上面的实例代码：我们使用Java写出另一个版本：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">seletionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> minIndex<span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            minIndex<span class="token operator">=</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>arr<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token operator">?</span>j<span class="token operator">:</span>minIndex<span class="token punctuation">;</span><span class="token comment">//直接找到最小的地方</span>        <span class="token punctuation">&#125;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">,</span>minIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Using in swap minindex with arr[i]</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>​        我们也可以使用冒泡排序排数，就像大的泡泡向下沉，小的泡泡向上浮。就好了。值得注意的是，我们换完产生的最值区已经换好了，没有必要再参与排序。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>N<span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>conditions<span class="token punctuation">)</span>            swap data<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="交换的离奇写法"><a href="#交换的离奇写法" class="headerlink" title="交换的离奇写法"></a>交换的离奇写法</h3><p>请看这个</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>异或：相同为0，不同为1：</p><p>例如：</p><p>A:1011110101001</p><p>B:1000101011001</p><p>  A^B: 0011011110000                        </p><p>也可以理解为无进位相加：</p><p>性质1：0^N=N,N^N=0</p><p>性质2：满足交换律和结合律</p><p>那这是怎么交换的？</p><p>a=a^b  1)</p><p>b=a^b</p><p>a=a^b</p><p>假设a= A,b=B;</p><p>1)a=A^B b=B</p><p>2)a=A^B,b=(A^B)^B =A^(B^B)=A</p><p>3)a=A^B^A=B b=A</p><p>交换完毕</p><p>但是注意：这样的方法不适用于同一块内存，否则会洗成0.</p><p>例题：1）现在有一个整型数组：里面有诺干出现了偶数次的数和一个出现奇数次的数，找出那个奇数次数的数：</p><p>EG：[2,1,3,1,3,1,3,2,1]——-&gt;3</p><p>Solutions：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int ero&#x3D;0;for(int i&#x3D;0;i&lt;arr.length;i++)&#123;ero^&#x3D;arr[i];&#125;printf(&quot;%d &quot;,ero);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        这是因为异或顺序无关，偶数次数的全消成了0.于是可以引用在奇偶相关次序无关的题目。</p><p>2）现在有一个整型数组：里面有诺干出现了偶数次的数和两个出现奇数次的数，找出那两个奇数次数的数：</p><p>Ok，当我们依旧沿袭上面的方法的时候，我们发现：eor=a^b,这是因为一切出现了偶数次的异或为0，a和b也最后削成一个a^b。下面怎么办？</p><p>注意到a$\neq$b，这样的话：因为最右边的1是a,b作为二进制的特征数（用它来区分a,b），我们就可以提取出来：int rightOne=eor&amp;(~eor+1)，也就是源码与上补码，提取eor上的第右边的1，随后只与这个位置上是1的数，就得到a或者是b了</p><p>​        <img src="image-20230127113335433.png" alt="image-20230127113335433"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printOddTimeNum2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> eor<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        eor<span class="token operator">^</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> rightOne<span class="token operator">=</span>eor<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">~</span>eor<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//找出来最右边的数</span>    <span class="token keyword">int</span> onlyOne<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//eor'</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> cur<span class="token operator">:</span>arr<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>cur<span class="token operator">&amp;</span>rightOne<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//别写1，因为出来的只能是0或者是rightOne，如果想要另一个就!=0;</span>            onlyOne<span class="token operator">^=</span>cur<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printIn</span><span class="token punctuation">(</span>onlyOne<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span><span class="token punctuation">(</span>ero<span class="token operator">^</span>onlyOne<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>​        这个就是最上面的代码，就是相当于插牌。这个算法的表现是波动较大的：O(N)~O($N^2$)。</p><p>​        但是算法的复杂度是看最差情况的，所以是O($N^2$).</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">>=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>j<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二分查找法"><a href="#二分查找法" class="headerlink" title="二分查找法"></a>二分查找法</h3><p>​        注意，这个只使用于有序数组。这个数组使用二分查找是最快的。主要思想：找中间，比大小，挪边界，继续二分。这个算法的复杂度因此是$O(\log n)$.</p><h3 id="对数器"><a href="#对数器" class="headerlink" title="对数器"></a>对数器</h3><p>​        假设我们要进行测试方法A，我们使用随机样本产生器，我们随机的产生数据放到多个方法，他们结果要是不一样，那要不就是A错，要不就是B错，要不就是都错了。这个时候人工干预的方式修改方法。</p><h3 id="递归行为下时间复杂度的计算"><a href="#递归行为下时间复杂度的计算" class="headerlink" title="递归行为下时间复杂度的计算"></a>递归行为下时间复杂度的计算</h3><h4 id="求取中点的方法"><a href="#求取中点的方法" class="headerlink" title="求取中点的方法"></a>求取中点的方法</h4><pre class="line-numbers language-C" data-language="C"><code class="language-C">int mid&#x3D;L+((R-L)&gt;&gt;1);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    为什么这样书写：防止R+L溢出int上限、</p><h4 id="使用递归求解数组最大值："><a href="#使用递归求解数组最大值：" class="headerlink" title="使用递归求解数组最大值："></a>使用递归求解数组最大值：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">L</span><span class="token operator">==</span><span class="token class-name">R</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token class-name">L</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">R</span><span class="token operator">-</span><span class="token class-name">L</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> leftMax<span class="token operator">=</span><span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token class-name">L</span><span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rightMax<span class="token operator">=</span><span class="token function">process</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>leftMax<span class="token punctuation">,</span>rightMax<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个写法我们是在二分类是常用的：先处理递归左边，再递归处理右边，最后从小到大的返回各层的最大值，最后得到整体的最大值。下面也有C++版本的</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;#include&lt;vector&gt;#include&lt;Windows.h&gt;class Finder &#123;public:int getMax(std::vector&lt;int&gt; s) &#123;return Dofindmax(s, 0, s.size()-1);&#125;int Dofindmax(std::vector&lt;int&gt; s, int left, int right)&#123;if (left &#x3D;&#x3D; right)return s[left];int mid &#x3D; left + ((right - left) &gt;&gt; 1);int leftMax &#x3D; Dofindmax(s, left, mid);int rightMax &#x3D; Dofindmax(s, mid + 1, right);return leftMax &gt; rightMax ? leftMax : rightMax;&#125;&#125;;void PrintVector(std::vector&lt;int&gt; s)&#123;for (std::vector&lt;int&gt;::iterator it &#x3D; s.begin(); it !&#x3D; s.end(); it++)std::cout &lt;&lt; *it &lt;&lt; &quot; &quot;;std::cout&lt;&lt;std::endl;&#125;int getRandNum()&#123;srand((unsigned int)clock());Sleep(10);return rand() % 100;&#125;int main()&#123;std::vector&lt;int&gt; s;for (int i &#x3D; 0; i &lt; 10; i++)s.push_back(getRandNum());PrintVector(s);Finder f;int t &#x3D; f.getMax(s);std::cout &lt;&lt; t;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然，别太常用，因为容易把栈搞炸</p><p><img src="image-20230127160815732.png" alt="image-20230127160815732"></p><p>画个递归树</p><h3 id="Master公式"><a href="#Master公式" class="headerlink" title="Master公式"></a>Master公式</h3><script type="math/tex; mode=display">if:T(N)=a*T(\frac{N}{b})+O(N^d)</script><script type="math/tex; mode=display">then:1)\log_ba>d->T(N^{\log_ba})</script><script type="math/tex; mode=display">2)\log_ba=d->T(N^{d}log N)</script><script type="math/tex; mode=display">3)\log_ba<d->T(N^{d})</script><p>有人话版本吗？有的：就是说我们的一次递归可以拆分一个问题为b个子问题，当然右额外开销$N^d$,这样，我们就有分层级讨论：比较$\log_ba$与d的大小从而一步写出公式。</p><p>以上面为例：上面的问题把问题拆成两个子问题：b=2,并且在单个函数体内调用了两次：a=2,剩下的时间复杂度为O(1).这下，我们的公式就是：</p><script type="math/tex; mode=display">T(N)=2*T(N/2)+O(1)</script><p>这样就直接带入公式:T(N)=O(logn).</p><h3 id="补充Reading"><a href="#补充Reading" class="headerlink" title="补充Reading"></a>补充Reading</h3><p>​        平时设计或者阅读一个算法的时候，必然会提到算法的复杂度（包括时间复杂度和空间复杂度）。比如我们说一个二分查找算法的平均时间复杂度为 O(log n)，快速排序可能是 O(n log n)。那这里的 O 是什么意思？这样的表达是否准确呢？</p><p>​        今天来复习一下与算法复杂度相关的知识：函数渐进阶，记号 O、Ω、θ和 o；Master 定理。</p><p>​        先插一句，在算法复杂度分析中，log 通常表示以 2 为底的对数。</p><p>​        算法复杂度（算法复杂性）是用来衡量算法运行所需要的计算机资源（时间、空间）的量。通常我们利用渐进性态来描述算法的复杂度。</p><p>​        用 n 表示问题的规模，T(n) 表示某个给定算法的复杂度。所谓渐进性态就是令 n→∞ 时，T(n) 中增长最快的那部分。严格的定义是：如果存在 $T’(n)$，当 n→∞ 时，有:</p><script type="math/tex; mode=display">\frac{T(n)-T'(n)}{T(n)}\rightarrow 0</script><p>​        我们就说$T’(n)$是 T(n) 当 n→∞ 时的渐进性态。</p><p>​        比如 T(n) = 2 <em> n ^ 2 + n log n + 3，那么显然它的渐进性态是 2 </em> n ^ 2，因为当 n→∞ 时，后两项的增长速度要慢的多，可以忽略掉。引入渐进性态是为了简化算法复杂度的表达式，只考虑其中的主要因素。当比较两个算法复杂度的时候，如果他们的渐进复杂度的阶不相同，那只需要比较彼此的阶（忽略常数系数）就可以了。</p><p>​        总之，分析算法复杂度的时候，并不用严格演算出一个具体的公式，而是只需要分析当问题规模充分大的时候，复杂度在渐进意义下的阶。记号 O、Ω、θ和 o 可以帮助我们了解函数渐进阶的大小。</p><p>​        假设有两个函数 f(n) 和 g(n)，都是定义在正整数集上的正函数。上述四个记号的含义分别是：</p><ul><li>f(n) = O(g(n))：$∃c&gt;0,n_0∈N,∀n≥n_0,f(n)≤cg(n)$；f 的阶<strong>不高于</strong> g 的阶。</li><li>f(n) = Ω(g(n))：$∃c&gt;0,n_0∈N,∀n≥n_0,f(n)≥cg(n)$；f 的阶<strong>不低于</strong> g 的阶。</li><li>f(n) = θ(g(n))：⟺$f(n)=O(g(n))\&amp;\&amp;f(n)=Ω(g(n))$；f 的阶<strong>等于</strong> g 的阶。</li><li>f(n) = o(g(n))：$∀\varepsilon&gt;0,∃n_0∈N,∀n≥n_0,f(n)/g(n)&lt;\varepsilon$；f 的阶<strong>低于</strong> g 的阶。</li></ul><p>​        可见，记号 O 给出了函数 f(n) 在渐进意义下的上界（但不一定是最小的），相反，记号Ω给出的是下界（不一定是最大的）。如果上界与下界相同，表示 f(n) 和 g(n) 在渐进意义下是同阶的（θ），亦即复杂度一样。</p><p>​        列举一些常见的函数之间的渐进阶的关系：</p><p><img src="image-20230127163435272.png" alt="image-20230127163435272"></p><p>​        有些人可能会把这几个记号跟算法的最坏、最好、平均情况复杂度混淆，它们有区别，也有一定的联系。</p><p>​        即使问题的规模相同，随着输入数据本身属性的不同，算法的处理时间也可能会不同。于是就有了最坏情况、最好情况和平均情况下算法复杂度的区别。它们从不同的角度反映了算法的效率，各有用处，也各有局限。</p><p>​        有时候也可以利用最坏情况、最好情况下算法复杂度来粗略地估计算法的性能。比如某个算法在最坏情况下时间复杂度为θ(n ^ 2)，最好情况下为θ(n)，那这个算法的复杂度一定是 O(n ^ 2)、Ω(n) 的。也就是说 n ^ 2 是该算法复杂度的上界，n 是其下界。</p><p>​        接下来看看 Master 定理。</p><p>​        有些算法在处理一个较大规模的问题时，往往会把问题拆分成几个子问题，对其中的一个或多个问题递归地处理，并在分治之前或之后进行一些预处理、汇总处理。这时候我们可以得到关于这个算法复杂度的一个递推方程，求解此方程便能得到算法的复杂度。其中很常见的一种递推方程就是这样的：</p><p>​        设常数 a &gt;= 1，b &gt; 1，f(n) 为函数，T(n) 为非负整数，T(n) = a T(n / b) + f(n)，则有：</p><p><img src="C:\Users\陈冠豪\Desktop\Hexo-Blog\source\_posts\算法（1）\image-20230127163457999.png" alt="image-20230127163457999"></p><p>​        比如常见的二分查找算法，时间复杂度的递推方程为 T(n) = T(n / 2) + θ(1)，显然有 $n^{\log _b^a}⁡=n^0=Θ(1)$，满足 Master 定理第二条，可以得到其时间复杂度为 T(n) = θ(log n)。</p><p>​        再看一个例子，T(n) = 9 T(n / 3) + n，可知 $n^{\log_b^a}=n^2$，令ε取 1，显然满足 Master 定理第一条，可以得到 T(n) = θ(n ^ 2)。</p><p>​        来一个稍微复杂一点儿例子，T(n) = 3 T(n / 4) + n log n。$n^{\log_b^a}=O(n^{0.793})$，取ε = 0.2，显然当 c = 3 / 4 时，对于充分大的 n 可以满足 a <em> f(n / b) = 3 </em> (n / 4) <em> log(n / 4) &lt;= (3 / 4) </em> n <em> log n = c </em> f(n)，符合 Master 定理第三条，因此求得 T(n) = θ(n log n)。</p><p>​        运用 Master 定理的时候，有一点一定要<strong>特别注意</strong>，就是第一条和第三条中的ε必须<strong>大于零</strong>。如果无法找到大于零的ε，就不能使用这两条规则。</p><p>​        举个例子，T(n) = 2 T(n / 2) + n log n。可知 $n^{\log_b^a}=n$，而 f(n) = n log n，显然不满足 Master 定理第二条。但对于第一条和第三条，也无法找到大于零的ε使得 nlog⁡n=O$(n^{1−\varepsilon})$ 或者Ω$(n^{1−\varepsilon})$，因此不能用 Master 定理求解，只能寻求别的方式求解。比如可以利用递归树求出该算法的复杂度为 $T(n)=O(n\log^2n)$。简单的说一下计算过程：</p><p>​        递归树的建立过程，就像是模拟算法的递推过程。树根对应的是输入的规模为 n 的问题，在递归处理子问题之外，还需要 n log n 的处理时间。然后根据递推公式给根节点添加子节点，每个子节点对应一个子问题。这里需要两个子节点，每个节点处理规模为 n / 2 的问题，分别需要 (n / 2) <em> log(n / 2) 的时间。因此在第二层一共需要 n </em> (log n - 1) 的时间。第三层节点就是将第二层的两个节点继续分裂开，得到四个各需要 (n / 4) <em> log(n / 4) 时间的节点，总的时间消耗为 n </em> (log n - 2)。依此类推，第 k（设树根为 k = 0）层有 2 ^ k 的节点，总的时间为 n * (log n - k)。而且可以知道，这棵树总共有 log n 层（最后一层每个节点只处理规模为 1 的子问题，无须再分治）。最后将每一层消耗的时间累加起来，得到：</p><p><img src="image-20230127163854294.png" alt="image-20230127163854294"></p><h3 id="归并排序（MergeSort）"><a href="#归并排序（MergeSort）" class="headerlink" title="归并排序（MergeSort）"></a>归并排序（MergeSort）</h3><p>​        1）整体就很简单，就是一个简单的递归，左边排好序，右边排好序，然后整体就有序。</p><p>​        2）让其整体有序的方式用了排外序方法</p><p>​        3）继续使用master公式求解:$O(N\log N)$，空间复杂度O(N)</p><p>​        4）归并排序的实质</p><p>思路</p><p><img src="image-20230127164408704.png" alt="image-20230127164408704"></p><p>​        对于一块区域，我们使用指针访问：左右双指针法。开辟一块小空间，如果左边的大于右边的，左边指针拷贝同时指针后移一个，右边大于左边的同理。</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class Solution&#123;    public static void mergeSort(int[] arr)    &#123;        if(arr&#x3D;&#x3D;null||arr.length&lt;2)            return;        process(arr,0,arr.length-1);    &#125;    public static void process(int[] arr,int L, int R)    &#123;        if(L&#x3D;&#x3D;R)            return;      int mid &#x3D; left + ((right - left) &gt;&gt; 1);        process(arr,L,mid);        process(arr,mid+1,R);        merge(arr,L,mid,R);    &#125;    public static void merge(int[] arr,int L,int M,int R)&#123;        int[] helpSort&#x3D;new int[R-L+1];&#x2F;&#x2F;这是辅助空间        int i&#x3D;0;        int p1&#x3D;L;        int p2&#x3D;M+1;&#x2F;&#x2F;划分区域        while(p1&lt;&#x3D;M&amp;&amp;p2&lt;&#x3D;R)&#123;            helpSort[i++]&#x3D;arr[p1]&lt;&#x3D;arr[p2]?arr[p1++]:arr[p2++];            &#125;        while(p1&lt;&#x3D;M)&#123;           helpSort[i++]&#x3D;arr[p1++];        &#125;        while(p2&lt;&#x3D;R)&#123;            helpSort[i++]&#x3D;arr[p2++];        &#125;        for(i&#x3D;0;i&lt;helpSort.length;i++)&#123;            arr[L+i]&#x3D;helpSort[i];        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C++:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;using namespace std; void Merge(int arr[],int low,int mid,int high)&#123;    &#x2F;&#x2F;low为第1有序区的第1个元素，i指向第1个元素, mid为第1有序区的最后1个元素    int i&#x3D;low,j&#x3D;mid+1,k&#x3D;0; &#x2F;&#x2F;mid+1为第2有序区第1个元素，j指向第1个元素    int *temp&#x3D;new(nothrow) int[high-low+1]; &#x2F;&#x2F;temp数组暂存合并的有序序列    if(!temp)&#123; &#x2F;&#x2F;内存分配失败        cout&lt;&lt;&quot;error&quot;;        return;    &#125;    while(i&lt;&#x3D;mid&amp;&amp;j&lt;&#x3D;high)&#123;        if(arr[i]&lt;&#x3D;arr[j]) &#x2F;&#x2F;较小的先存入temp中            temp[k++]&#x3D;arr[i++];        else            temp[k++]&#x3D;arr[j++];    &#125;    while(i&lt;&#x3D;mid)&#x2F;&#x2F;若比较完之后，第一个有序区仍有剩余，则直接复制到t数组中        temp[k++]&#x3D;arr[i++];    while(j&lt;&#x3D;high)&#x2F;&#x2F;同上        temp[k++]&#x3D;arr[j++];    for(i&#x3D;low,k&#x3D;0;i&lt;&#x3D;high;i++,k++)&#x2F;&#x2F;将排好序的存回arr中low到high这区间arr[i]&#x3D;temp[k];    delete []temp;&#x2F;&#x2F;删除指针，由于指向的是数组，必须用delete []&#125; &#x2F;&#x2F;用递归应用二路归并函数实现排序——分治法void MergeSort(int arr[],int low,int high)&#123;    if(low&lt;high)&#123;        int mid&#x3D;(low+high)&#x2F;2;        MergeSort(arr,low,mid);        MergeSort(arr,mid+1,high);        Merge(arr,low,mid,high);    &#125;&#125; int main()&#123;    int a[10]&#x3D;&#123;5,1,9,3,7,4,8,6,2,0&#125;;    MergeSort(a,0,9);    for(int i&#x3D;0;i&lt;10;i++)        cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;;    return 0;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="扩展我们的归并排序问题"><a href="#扩展我们的归并排序问题" class="headerlink" title="扩展我们的归并排序问题"></a>扩展我们的归并排序问题</h3><p>​        小和问题：对一个数组中，每个数左边比当前数小的数累加起来，叫做这个数的小和：请写一个程序：求解一个数组的小和。</p><p>Example:[1,3,4,2,5]产生的单个小和是[0,1,4,1,10],故数组的小和是16.</p><p>​        逆序问题：在一个数组中，左边的数如果比右边的数大，则这连哥哥数构成一个逆序对，请打印所有的逆序对。</p><p>​        （1）暴力解法是很简单的：对于位置i直接暴力遍历，但是$O(N^2)$</p><p>​        有没有更快的：有！</p><p>​        仔细思考一下：我们的小和可以这样产生！看一个数右边走，如果有别的数大于它就加一次这个数本身。如[1,3,4,2,5]：看1，右边四个数比他大，就加四次1，看3，右边两个数比他大，就加两个3，依次类推。。。</p><p>​        现在，我们对全数组进行二分。针对拆分后的数组一级一级使用我们新的求小和的过程，我们在比较的同时也排序：如：[1，3，4，2，5]下，拆分成2级[1,3,4]和[2,5]，然后又是:[1,3] [4]  和[2]  [5]最后是:[1] [3] [4] [2] [5]，现在返回去合并：[1,3]产生小和1，[1,3,4]产生1个1，1个3，（左侧小，左侧加小和，左侧移动指针到下一个，于是产生）[2,5]合并产生一个2，之后再次合并产生一个1，一个3，一个4，现在完事了：1+1+1+3+2+1+3+4=16</p><p>​        这个算法为什么是O(NlogN),就是因为排序的时候不需要在暴力遍历之后才知道有几个数比当前的数小。这才省略了新的遍历。</p><p>​        可能不一样的是：在这题里面，我们必须在左右数字相等的时候先拷贝右边的，再拷贝左边的.</p><p>​        （2）类似的，仍可以使用mergeSort，也就是说，只要产生小和操作就是说明产生了逆序。我们只要统计这个就好了</p><p>​        荷兰国旗问题：指定一个数，比他大的放右边，小的放左边，但是注意空间复杂度O(1)</p><p>​        思路：我们把使用两个指针。把小于num的放到左边，与小于区的下一个数字直接交换就好了。这样小于区右扩，否则指针直接右移。</p><p>​        荷兰国旗问题（2）：指定一个数，比他大的放右边，小的放左边，相等的放中间。但是注意空间复杂度O(1)</p><p>​        </p><p>​        还是类似，只不过有趣的是我们可以：</p><p>​        小于：[i]和小于区域的下一个交换，小于区东扩</p><p>​        相等：直接++</p><p>​        大于：[i]和大于区域的上一个交换，大于区西扩，但是i不动（我们还没排序那个交换过来的数嘞！）。</p><p>看看代码实现（看2就好了）</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;void swap(int* e1, int* e2)&#123;int temp &#x3D; *e1;*e1 &#x3D; *e2;*e2 &#x3D; temp;&#125;typedef struct Pair_ &#123;int pair1;int pair2;&#125;Pair;void arrangeArray(Pair* pair, int* arr, int arrsize,int sortnum)&#123;if (!pair &amp;&amp; !arr)return;if (arrsize &lt; 0)return;int* smaller &#x3D; &amp;arr[-1];int* bigger &#x3D; &amp;arr[10];int* check &#x3D; arr;while (check &lt; bigger)&#123;if (*check &lt; sortnum)&#123;swap(check, smaller + 1);check++;smaller++;&#125;else if (*check &#x3D;&#x3D; sortnum)&#123;check++;&#125;else&#123;swap(check, bigger - 1);bigger--;&#125;&#125;pair-&gt;pair1 &#x3D; smaller - arr;pair-&gt;pair2 &#x3D; bigger - arr;&#125;void PrintArr(int* arr, int arr_size)&#123;for (int i &#x3D; 0; i &lt; arr_size; i++)&#123;printf(&quot;%d &quot;, arr[i]);&#125;printf(&quot;\n&quot;);&#125;int main()&#123;int arr[10] &#x3D; &#123; 3,5,6,3,4,5,2,6,9,0 &#125;;PrintArr(arr, 10);Pair* p&#x3D;(Pair*)malloc(sizeof(Pair));p-&gt;pair1 &#x3D; 0;p-&gt;pair2 &#x3D; 0;arrangeArray(p, arr, 10, 5);PrintArr(arr, 10);printf(&quot;%d\n&quot;, arr[p-&gt;pair1]);printf(&quot;%d\n&quot;, arr[p-&gt;pair2]);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        C++:</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">#include&lt;iostream&gt;class Array &#123;public:void initVal(int* arr, int size) &#123;int* arrayData &#x3D; new int[size];for (int i &#x3D; 0; i &lt; size; i++)&#123;arrayData[i] &#x3D; arr[i];&#125;arraydata &#x3D; arrayData;arraysize &#x3D; size;&#125;void swapPartialData(int swap1,int swap2)&#123;int temp &#x3D; arraydata[swap1];arraydata[swap1] &#x3D; arraydata[swap2];arraydata[swap2] &#x3D; temp;&#125;void arrangeandSort(int sortnum)&#123;int smaller &#x3D; -1;int bigger &#x3D; arraysize;int check &#x3D; 0;while (check &lt; bigger)&#123;if (arraydata[check] &lt; sortnum)&#123;swapPartialData(check, smaller + 1);check++;smaller++;&#125;else if (arraydata[check] &#x3D;&#x3D; sortnum)&#123;check++;&#125;else&#123;swapPartialData(check, bigger - 1);bigger--;&#125;&#125;&#125;void PrintVal()&#123;for (int i &#x3D; 0; i &lt; arraysize; i++)&#123;std::cout &lt;&lt; arraydata[i] &lt;&lt; &quot; &quot;;&#125;std::cout &lt;&lt; std::endl;&#125;private:int* arraydata;int arraysize;&#125;;int main()&#123;int arr[10] &#x3D; &#123; 3,5,6,3,4,5,2,6,9,0 &#125;;Array a;a.initVal(arr, 10);a.PrintVal();a.arrangeandSort(5);a.PrintVal();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>​        快速排序请先把上面的代码琢磨明白：快速排序使得我们以一个数区分好了左右，排除掉标杆数我们只要对左右再次区分直到一个尽头结束。这次我们直接拿最后一个数当作标杆进行快排，这样我们就使得整个数组有序了。</p><p>​        这个思想还可以进一步优化：直接把标杆数（最后一个）直接放到中间，左右再递归。</p><p>​        当然，这个时间复杂度很不稳定：当划分值再中间的时候：</p><script type="math/tex; mode=display">T(n)=2T(\frac{T}{2})+O(N)</script><p>​        但是如果划分值再最左边和最右边：则就是经典排序为O($N^2$)。</p><p>​        我们继续改进：如果我们在一个划分区域随机选一个数，是不是就更多的避免了总是遇到最差情况？是的，这就是随机快速排序。这下，我们就可以</p><p><img src="image-20230130193038830.png" alt="image-20230130193038830"></p><p>​        对所有的情况求时间期望:$O(N\log N)$</p><h3 id="堆结构"><a href="#堆结构" class="headerlink" title="堆结构"></a>堆结构</h3><p>​        堆在逻辑结构上是一个完全二叉树。也就是说，每个非叶子节点必有左节点。怎么实现呢？我们可以将天然的一维数组视作一棵完全二叉树。</p><p><img src="C:\Users\陈冠豪\Desktop\Hexo-Blog\source\_posts\算法（1）\image-20230131092857709.png" alt="image-20230131092857709"></p><p>我们可以使用这个公式快速找到左孩子的节点下标：(i是当前节点的下标)</p><script type="math/tex; mode=display">I_{left}=2i+1</script><p>类似的：</p><script type="math/tex; mode=display">I_{right}=2i+2</script><p>父节点：</p><script type="math/tex; mode=display">I_{father}=\frac{i-1}{2}</script><p>完全二叉树的高度也可以求解：</p><script type="math/tex; mode=display">H=logN+1</script><p>堆在这个概念上派生：他是一个特殊的完全二叉树。大根堆中其父节点总是大于子节点，比如说</p><p><img src="C:\Users\陈冠豪\Desktop\Hexo-Blog\source\_posts\算法（1）\image-20230131093338557.png" alt="image-20230131093338557"></p><p>类比的：小根堆就是父节点总是小于子节点。怎么创建一个堆呢？</p><p>​        假设：我们有一个干净的数组，现在往数组里放数。现在，标记一下一个heapsize:他描述我们现在已经成型的堆的大小。显然刚开始heapsize一定是0！因为压根数没来呢！随着数进来，如果一个数比父节点大，那就准备交换父节点！</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">swap(arr[i],arr[(i-1)&#x2F;2]);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        如果作为上一级的子节点还是比父节点大，那不就是又要交换？是的。这就是一个递归算法。但是如果相等呢？没关系，就停在那里就好了！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//不用担心0位置的问题，因为根节点的父节点还是他自己，取等依旧跳出循环</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">></span>add<span class="token punctuation">[</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>index<span class="token punctuation">,</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        index<span class="token operator">=</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        </p><p>​        这下很容易了：arr[0]就是我们的最大值，返回出去就好了。那如果我们要把它抹掉，然后还是一个大根堆。这又如何？很简单，与最后一个数交换，或者是被覆盖。然后heapsize—.然后，我们让父节点和子节点比较。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> index，<span class="token keyword">int</span> heapsize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//得到左孩子下标</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> index<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//一旦left&lt;heapsize那显然我们的当前节点就没有孩子节点了</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>heapsize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//比较两个孩子节点谁大，把大的那个下标给largest</span>        <span class="token keyword">int</span> largest<span class="token operator">=</span>            <span class="token comment">//万一没右孩子嘞？判断一下！</span>            left<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>heapsize            <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span>            <span class="token operator">?</span> left<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">:</span> left <span class="token punctuation">;</span>        <span class="token comment">//父亲和孩子之间谁大？谁大把谁的下表交给largest</span>        largest <span class="token operator">=</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">?</span> largest <span class="token operator">:</span> index<span class="token punctuation">;</span>        <span class="token comment">//如果到位了，退出循环！</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span> largest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//反之，交换，继续跑路</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>largest<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        index<span class="token operator">=</span>largest<span class="token punctuation">;</span>        left <span class="token operator">=</span> index<span class="token operator">*</span> <span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        OK，现在我们的用户又抽风了，现在它随即指定一个节点变成?，那怎么怎么让他成为一个新的堆？很简单！如果变大了，只能往上走，就像上heapify,变小了那就是向下走。</p><p>​        算法复杂度如何？我们发现他就是遍历了树的高度：也就是说</p><script type="math/tex; mode=display">T(N)=O(\log N)</script><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>​        现在我们拿到一个数组，想要进行堆排序，就首先需要构建堆。使用heapInsert就好了。然后怎么排序？我们想到，heap总是确定最大值，只需要：最大值和最后一个值交换，在heapsize—再堆排序。这是一个逐步弹出最大值的算法排序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Array</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HeapSort</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>arr<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">heapInsert</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> heapsize<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">--</span>heapsize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>heapSize<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">swap</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">--</span>heapsize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​            这个算法：空间复杂度:O(1) 时间复杂度: O(nlogn)</p><p>下面是C++版本：</p><pre class="line-numbers language-C++" data-language="C++"><code class="language-C++">class Array &#123;public:void Updatearray(int* arr, int size) &#123;int* trans &#x3D; new int[size];for (int i &#x3D; 0; i &lt; size; i++) &#123;trans[i] &#x3D; arr[i];&#125;this-&gt;array &#x3D; trans;this-&gt;arraysize &#x3D; size;&#125;void swap(int i1, int i2) &#123;int temp &#x3D; array[i1];array[i1] &#x3D; array[i2];array[i2] &#x3D; temp;&#125;int* getArrayDataPointer() &#123;return this-&gt;array;&#125;int getsize()&#123;return this-&gt;arraysize;&#125;void printArray() &#123;for (int i &#x3D; 0; i &lt; arraysize; i++)&#123;std::cout &lt;&lt; array[i] &lt;&lt; &quot; &quot;;&#125;std::cout &lt;&lt; std::endl;&#125;private:int* array;int arraysize;&#125;;class heapSort &#123;public:void heapInsert(Array a, int index) &#123;while (            a.getArrayDataPointer()[index]             &gt;             a.getArrayDataPointer()[(index - 1) &#x2F; 2]              )         &#123;a.swap(index, (index - 1) &#x2F; 2);index &#x3D; (index - 1) &#x2F; 2;&#125;&#125;void heapify(Array a, int index, int heapsize) &#123;int left &#x3D; 2 * index + 1;while (left &lt; heapsize) &#123;int largest &#x3D;left + 1 &lt; heapsize&amp;&amp;a.getArrayDataPointer()[left + 1] &gt; a.getArrayDataPointer()[left]? left + 1 : left;largest &#x3D; a.getArrayDataPointer()[largest] &gt; a.getArrayDataPointer()[index] ? largest : index;if (index &#x3D;&#x3D; largest)&#123;break;&#125;a.swap(largest, index);index &#x3D; largest;left &#x3D; index * 2 + 1;&#125;&#125;void heapsort(Array a) &#123;if (a.getArrayDataPointer() &#x3D;&#x3D; NULL || a.getsize() &lt; 2)&#123;return;&#125;for (int i &#x3D; 0; i &lt; a.getsize(); i++)heapInsert(a, i);int heapsize &#x3D; a.getsize();a.swap(0, --heapsize);while (heapsize &gt; 0) &#123;heapify(a, 0, heapsize);a.swap(0, --heapsize);&#125;&#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        对于几乎排好序的（向我保证在-K~K内有序）数组，我们可以使用小根堆来排序，把小数往前弹就可以了。</p><h3 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h3><p>​        这个算法跟之前的不一样，之前的算法都是基于比较的排序算法，现在介绍一个更逆天的算法：计数排序。这个算法的局限性极大：就是必须为整形，同时空间复杂度为O(N)，这样，我们得知了一个数据范围[K1,K2]，我们创造一个大小为[k2-k1+1]的数组，遇到一个数就在这个数对应的位置上+1，使用位置来衡量这个值的大小。随后，根据值来覆写数组。比如说统计到1的个数10，那就在数组里写10个1.但是，一旦数据量大起来就是寄！</p><p>​        现在，引入一个全新的算法：基数算法：我们首先确定数据的最大几位，对其他数字补齐0操作：如[72,100]-&gt;[072,100]就好了。然后基于个位数，创造10个桶。个位数是0的去0，1去1.。。以此类推，然后，从小到大导倒出来，随后比十位，再百位。。。以此类推</p><p>​        比如说：[17,13,25,100,72]-&gt;[ 017 , 013 , 025 , 100 , 072 ],然后个位入桶。再导出来</p><p><img src="image-20230131115105002.png" alt="image-20230131115105002"></p><p>然后把这个数组再倒入桶，这次按十位数</p><p><img src="image-20230131115241365.png" alt="image-20230131115241365"></p><p>然后把这个数组再倒入桶，这次按百位数</p><p><img src="image-20230131115325430.png" alt="image-20230131115325430"></p><p>倒出来，排好序了</p><p><img src="image-20230131115343881.png" alt="image-20230131115343881"></p><p>本质上，我们是按照位数排序</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> _RadixSort<span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>arr<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token function">radixsort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">maxbits</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>       <span class="token comment">//这个函数的本质是求解digit 表示最大的数有几个十进制位数</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxbits</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> max<span class="token operator">=</span><span class="token class-name">Interger</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            max<span class="token operator">=</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>max<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token operator">++</span><span class="token punctuation">;</span>            max<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//digit 表示最大的数有几个十进制位数</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token class-name">L</span> <span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token class-name">R</span><span class="token punctuation">,</span><span class="token keyword">int</span> digit<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> radix<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//准备空间</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bucket<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">R</span><span class="token operator">-</span><span class="token class-name">L</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> d<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>d<span class="token operator">&lt;=</span>digit<span class="token punctuation">;</span>d<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token comment">//有多少位就进出多少次，从个位起步</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> count <span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>radix<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//这个代码统计数字频率，改进后则是统计小于等于该位置数的个数</span>             <span class="token comment">//这个count[i]表示小于等于i有count[i]个，数组代替了队列使得我们保证了后进后出</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token class-name">L</span><span class="token punctuation">,</span>i<span class="token operator">&lt;=</span><span class="token class-name">R</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                j<span class="token operator">=</span><span class="token function">getDigit</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>                count<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>radix<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//改进count</span>            count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>count<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token class-name">R</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token class-name">L</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//取出位数</span>            j<span class="token operator">=</span><span class="token function">getDigit</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//放到辅助数组</span>             bucket<span class="token punctuation">[</span>count<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment">//我们放置一个,就在频数上减一</span>            count<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">--</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">//出桶</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token class-name">L</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token class-name">R</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getDigit</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> d<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>d<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Opencv in Pycharm</title>
      <link href="/2023/01/29/Opencv-in-Pycharm/"/>
      <url>/2023/01/29/Opencv-in-Pycharm/</url>
      
        <content type="html"><![CDATA[<h1 id="Pycharm下的opencv使用1：基本图像操作导论"><a href="#Pycharm下的opencv使用1：基本图像操作导论" class="headerlink" title="Pycharm下的opencv使用1：基本图像操作导论"></a>Pycharm下的opencv使用1：基本图像操作导论</h1><h3 id="在Pycharm中导入opencv"><a href="#在Pycharm中导入opencv" class="headerlink" title="在Pycharm中导入opencv"></a>在Pycharm中导入opencv</h3><p>​        笔者被C++实现的opencv干到心态炸裂了，所以这里先整一篇基于python的opencv的博客。</p><p>​        在pycharm中导入opencv很容易：只需要在Project的setting里给解释器安装上opencv-python库就好了。使用这个程序跑一下看看可不可以读取图像：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#向工程文件下新建一个img文件夹,放好你的图片，我这里放的是test.png</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="image-20230129194508512.png" alt="image-20230129194508512"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2img_path<span class="token operator">=</span><span class="token string">"img/test.png"</span>img<span class="token operator">=</span>cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>img_path<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"Test img can be shown below!"</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        跳出这个即为成功！开始你的opencv的欢乐时间！</p><p><img src="image-20230129194919800.png" alt="image-20230129194919800"></p><h3 id="计算机眼中的图片"><a href="#计算机眼中的图片" class="headerlink" title="计算机眼中的图片"></a>计算机眼中的图片</h3><p>​        在计算机眼中，图像由矩阵构成</p><p><img src="image-20230115212443109.png" alt="image-20230115212443109"></p><p>​        </p><p>​        数值的大小表明了图像的亮度，而通道表明了一个颜色：一个R通道上的255表明这是在Red上很亮</p><p>​        下面，我们来介绍一下我们应该怎么读取图像：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token comment">#不同于RGB，我们读取的格式是BGR</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment">#caution:the input should be the addr of the img</span>img<span class="token operator">=</span>cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">"\\imgpath!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>读取的结果是：一个nd array</p><p>好抽象：可不可以直接展示图片啊：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们试一下这个：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> showimg <span class="token keyword">as</span> simg<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltimg <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'1.png'</span><span class="token punctuation">)</span>simg<span class="token punctuation">.</span>imgshow<span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以封装一个函数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cv_show</span><span class="token punctuation">(</span>nameWindow<span class="token punctuation">,</span>img<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>     cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>nameWindow<span class="token punctuation">,</span>img<span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们也可以查看一个图片的大小：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">img<span class="token punctuation">.</span>shape<span class="token comment">#(175, 286, 3)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们可以设置读入的方式：比如说读入灰度图</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">img<span class="token operator">=</span>cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">"\\imgpath!"</span>，cv2<span class="token punctuation">.</span>IMREAD_GREYSCALE<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>保存我们产出的图像</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">'savedfilename'</span><span class="token punctuation">,</span>img<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 可以计算像素点的个数：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">img<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h3><p>​        视频由图像组成，也就是说，我们可以读取视频：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">vc<span class="token operator">=</span>cv2<span class="token punctuation">.</span>VideoCapture<span class="token punctuation">(</span><span class="token string">'videofilepath'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        我们是不是读取成功了？这个看如下的代码判断：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> vc<span class="token punctuation">.</span>isOpened<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">open</span><span class="token punctuation">.</span>frame<span class="token operator">=</span>vc<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token builtin">open</span><span class="token operator">=</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        我们来运行的读取视频</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">while</span> <span class="token builtin">open</span><span class="token punctuation">:</span>ret<span class="token punctuation">,</span>frame<span class="token operator">=</span>vc<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> frame <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">if</span> ret<span class="token operator">==</span><span class="token boolean">True</span><span class="token punctuation">:</span>        gray<span class="token operator">=</span>cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>frame<span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>        cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'result'</span><span class="token punctuation">,</span>gray<span class="token punctuation">)</span>        <span class="token keyword">if</span> cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xFF</span><span class="token operator">==</span><span class="token number">27</span><span class="token punctuation">:</span><span class="token comment">#按下ESC退出或者视频播放完毕</span>            <span class="token keyword">break</span>vc<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="截取部分图片（ROI）"><a href="#截取部分图片（ROI）" class="headerlink" title="截取部分图片（ROI）"></a>截取部分图片（ROI）</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">img<span class="token operator">=</span>cv2<span class="token punctuation">.</span>imgread<span class="token punctuation">(</span><span class="token string">'Path'</span><span class="token punctuation">)</span>cat<span class="token operator">=</span>img<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">200</span><span class="token punctuation">]</span>cv_show<span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">,</span>cat<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样我们就利用切片截取了部分图片了.</p><h3 id="颜色通道提取"><a href="#颜色通道提取" class="headerlink" title="颜色通道提取"></a>颜色通道提取</h3><p>我们可以分离图片，通过不同的颜色通道提取：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">b<span class="token punctuation">,</span>g<span class="token punctuation">,</span>r<span class="token operator">=</span>cv2<span class="token punctuation">.</span>split<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这是效果：1，2，3分别代表b,g,r</p><p><img src="2.png" alt="2"> </p><p>1:</p><p><img src="b.png" alt="b"></p><p>2:</p><p><img src="g.png" alt="g"></p><p>3:<img src="r.png" alt="r"></p><p>当然也可以合回去：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">img<span class="token operator">=</span>cv2<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>b<span class="token punctuation">,</span>g<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我们也可以单独保留，直接修改：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#只保留R</span>cur_img<span class="token operator">=</span>img<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>cur_img<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>cur_img<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span>cur_img<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="边界填充"><a href="#边界填充" class="headerlink" title="边界填充"></a>边界填充</h3><p>我们可以扩充图像，通过一些方式来对图像进行扩充：请看这里：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">top_size<span class="token punctuation">,</span>bottom_size<span class="token punctuation">,</span>left_size<span class="token punctuation">,</span>right_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token comment">#定位点</span>replicate<span class="token operator">=</span>cv2<span class="token punctuation">.</span>copyMakeBorder<span class="token punctuation">(</span>img<span class="token punctuation">,</span>top_size<span class="token punctuation">,</span>bottom_size<span class="token punctuation">,</span>left_size<span class="token punctuation">,</span>right_size<span class="token punctuation">,</span>borderType<span class="token operator">=</span>cv2<span class="token punctuation">.</span>BORDER_REPLICATE<span class="token punctuation">)</span>reflect<span class="token operator">=</span>cv2<span class="token punctuation">.</span>copyMakeBorder<span class="token punctuation">(</span>img<span class="token punctuation">,</span>top_size<span class="token punctuation">,</span>bottom_size<span class="token punctuation">,</span>left_size<span class="token punctuation">,</span>right_size<span class="token punctuation">,</span>borderType<span class="token operator">=</span>cv2<span class="token punctuation">.</span>BORDER_REFLECT<span class="token punctuation">)</span>reflect101<span class="token operator">=</span>cv2<span class="token punctuation">.</span>copyMakeBorder<span class="token punctuation">(</span>img<span class="token punctuation">,</span>top_size<span class="token punctuation">,</span>bottom_size<span class="token punctuation">,</span>left_size<span class="token punctuation">,</span>right_size<span class="token punctuation">,</span>borderType<span class="token operator">=</span>cv2<span class="token punctuation">.</span>BORDER_REFLECT_101<span class="token punctuation">)</span>wrap<span class="token operator">=</span>cv2<span class="token punctuation">.</span>copyMakeBorder<span class="token punctuation">(</span>img<span class="token punctuation">,</span>top_size<span class="token punctuation">,</span>bottom_size<span class="token punctuation">,</span>left_size<span class="token punctuation">,</span>right_size<span class="token punctuation">,</span>borderType<span class="token operator">=</span>cv2<span class="token punctuation">.</span>BORDER_WRAP<span class="token punctuation">)</span>constant<span class="token operator">=</span>cv2<span class="token punctuation">.</span>copyMakeBorder<span class="token punctuation">(</span>img<span class="token punctuation">,</span>top_size<span class="token punctuation">,</span>bottom_size<span class="token punctuation">,</span>left_size<span class="token punctuation">,</span>right_size<span class="token punctuation">,</span>borderType<span class="token operator">=</span>cv2<span class="token punctuation">.</span>BORDER_CONSTANT<span class="token punctuation">,</span>value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        我们得到了五张图像，随后，我们使用imwrite输出图像，同时导入matplotlib的pyplot子库进行观察：</p><p>​        这是总的效果：</p><p><img src="matplot_version.png" alt="matplot_version"></p><p>​         仔细观察：</p><p><img src="replicate.png" alt="replicate"></p><p><img src="reflect.png" alt="reflect"></p><p><img src="reflect101.png" alt="reflect101"></p><p><img src="wrap.png" alt="wrap"></p><p><img src="constant.png" alt="constant"></p><p>​        第一张图是展示了</p><p>​        replicate：这个单词是复制的意思：直接复制最边缘的像素</p><p>​        reflect：对感兴趣的部分进行两边复制：fedcba|abcdef|fedcba</p><p>​        reflect101:但是是对最边缘的像素为对称轴进行复制:gfedcba|abcdefgh|gfedcba</p><p>​        wrap:外包装：cdefgh|abcdefgh|abcdefg</p><p>​        constant:对图像以默认黑值填充</p><h3 id="对图像进行数值操作"><a href="#对图像进行数值操作" class="headerlink" title="对图像进行数值操作"></a>对图像进行数值操作</h3><p>​        我们可以对numpy进广播操作。人话翻译成C++就是cv2库重载了运算符号，使之我们可以对矩阵进行广义的加法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">img_cat<span class="token operator">=</span>cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'cat.jpg'</span><span class="token punctuation">)</span>img_cat_GeneralAdd<span class="token operator">=</span>img_cat<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>img_cat<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>img_cat2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        在控制台上输出就可以发现矩阵里每一个数值都加上了一个10。</p><p><img src="image-20230129191422226.png" alt="image-20230129191422226"></p><p>​        （懒得自己跑，截个图）</p><p>​        那可不可以狭义相加呢？当然可以，结合线性代数的常识，相加的矩阵必须满足大小完全一致。假设我们已经满足了这个前提，直接相加得到的结果是不是就是放到矩阵的值呢？</p><p>​        显然不是！因为RGB有界，不可以超过255.在重载的+中，矩阵的RGB值自动%256，就是除以2256取它的余数放到矩阵里。那还有别的加法吗？有：使用方法add，传入cv2.add(img_cat,img_cat2)就可以了，达到255之后就不会取模，只会停在255不动</p><h3 id="图像叠加"><a href="#图像叠加" class="headerlink" title="图像叠加"></a>图像叠加</h3><p>​        我们也可以对图像进行叠加。但是注意，我们首先要调整图像大小一致：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">img_cat<span class="token punctuation">.</span>shapeimg_dog<span class="token operator">=</span>imread<span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token comment"># path是路径</span>img_dog<span class="token operator">=</span>cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>img_dog<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token operator">*</span>size required to resize<span class="token operator">*</span><span class="token operator">/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="image-20230129192417117.png" alt="image-20230129192417117"></p><p>​        同样的还有其他resize方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">required_pic<span class="token operator">=</span>cv2<span class="token punctuation">.</span>resize<span class="token punctuation">(</span>img_required_resize<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>fx<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>fy<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        这是个什么玩意呢？指的是我们依照某个点把图像在X轴上拉长3倍数，Y轴不变。</p><p>​        现在，我们使用addWeighted来叠加图像，以混合图片特征。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">res<span class="token operator">=</span>cv2<span class="token punctuation">.</span>addWeighted<span class="token punctuation">(</span>img_cat<span class="token punctuation">,</span><span class="token number">0.4</span><span class="token punctuation">,</span>img_dog<span class="token punctuation">,</span><span class="token number">0.6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#img_cat*0.4+img_dog*0.6+0//最后一项是亮度提升</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="图像阈值"><a href="#图像阈值" class="headerlink" title="图像阈值"></a>图像阈值</h3><p>​        我们可以使用一些参数，对图像进行有条件的处理</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ret<span class="token punctuation">,</span>dst<span class="token operator">=</span>cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>src<span class="token punctuation">,</span>thresh<span class="token punctuation">,</span>maxval<span class="token punctuation">,</span><span class="token builtin">type</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>src:输入，只能输入单通道图像，通常是灰度图</p><p>dst：输出图</p><p>thresh:执行阈值</p><p>maxval:超过或小于阈值后所赋予的值</p><p>type:方法，如下：</p><p>1.cv2.THRESH_BINARY：超过阈值的取maxval,否则取0</p><p>2.cv2.THRESH_BINARY_INV反过来</p><p>3.THRESH_TRUNC大于阈值的设置成阈值</p><p>4.THRESH_TOZERO大于阈值的不变，否则设置成0</p><p>5.THRESH_TOZERO_INV反转</p><p>我们依旧使用matplotlib的pyplot库放送一下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltimg<span class="token operator">=</span>cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'2.png'</span><span class="token punctuation">)</span>ret<span class="token punctuation">,</span>thresh1<span class="token operator">=</span>cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>THRESH_BINARY<span class="token punctuation">)</span>ret<span class="token punctuation">,</span>thresh2<span class="token operator">=</span>cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>THRESH_BINARY_INV<span class="token punctuation">)</span>ret<span class="token punctuation">,</span>thresh3<span class="token operator">=</span>cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>THRESH_TRUNC<span class="token punctuation">)</span>ret<span class="token punctuation">,</span>thresh4<span class="token operator">=</span>cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>THRESH_TOZERO<span class="token punctuation">)</span>ret<span class="token punctuation">,</span>thresh5<span class="token operator">=</span>cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>img<span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span>cv2<span class="token punctuation">.</span>THRESH_TOZERO_INV<span class="token punctuation">)</span>titles<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Original Image'</span><span class="token punctuation">,</span><span class="token string">'BINARY'</span><span class="token punctuation">,</span><span class="token string">'BINARY_INV'</span><span class="token punctuation">,</span><span class="token string">'THRESH_TRUNC'</span><span class="token punctuation">,</span><span class="token string">'TOZERO'</span><span class="token punctuation">,</span><span class="token string">'TOZERO_INV'</span><span class="token punctuation">]</span>images<span class="token operator">=</span><span class="token punctuation">[</span>img<span class="token punctuation">,</span>thresh1<span class="token punctuation">,</span>thresh2<span class="token punctuation">,</span>thresh3<span class="token punctuation">,</span>thresh4<span class="token punctuation">,</span>thresh5<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>images<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'gray'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>titles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看看：</p><p><img src="Figure_1.png" alt="Figure_1"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Opencv </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高等数学教程（1）</title>
      <link href="/2023/01/28/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E6%95%99%E7%A8%8B%EF%BC%881%EF%BC%89/"/>
      <url>/2023/01/28/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6%E6%95%99%E7%A8%8B%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="高等数学教程笔记1"><a href="#高等数学教程笔记1" class="headerlink" title="高等数学教程笔记1"></a>高等数学教程笔记1</h1><h2 id="极限运算与函数分析基础"><a href="#极限运算与函数分析基础" class="headerlink" title="极限运算与函数分析基础"></a>极限运算与函数分析基础</h2><h4 id="函数与极限"><a href="#函数与极限" class="headerlink" title="函数与极限"></a>函数与极限</h4><p>函数部分主要是奠基于高中的一些基础，这里做一些简单的复习</p><p>1.映射与函数</p><p>首先来了解以下映射：4</p><p>​        先定义X，Y是两个非空集合。现在有一个法则f，使得X中的每个元素$x$（$X$={$x_0$,$x_1$,$x_2$,…}）,都有<strong>唯一</strong>的y($Y$={$y_0$,$y_1$,$y_2$,$y_3$,…})与之对应。那么，我们称f是一个<strong>映射</strong>。</p><p>​        也就是说，这个定义是围绕f的。他是一个这样的法则（或者说规则）让两个非空的集合建立起如定义所言的联系，仅此而已。</p><p>​        也不必太过担心，映射在这本笔记里大概不会再次出现了。</p><p>不过，我们把它引出来必有我们的目的：回过头来，我们实际上用一大长串定义干了这样一件事：</p><script type="math/tex; mode=display">{X}\xrightarrow{f}Y</script><p>现在，让我们开始取其名字：</p><p>X：是一个定义域，有写法D,或者写法更明确一些：$D_f$</p><p>实际上这是Domain的意思</p><p>Y：是一个值域，有写法R,或者同样更明确一些：$R_f$</p><p>实际上这是Range的意思。</p><p>至于：f，我们刚刚讲过了，这就是一个法则，表明一种对应关系。</p><p>依然有这样的更简单的写法：</p><script type="math/tex; mode=display">X\xrightarrow{f}R_f</script><p>重复一些以下的要点：</p><p>（1）上述定义阐述了三要素：X（定义域），f(法则)，Rf(对应值域)</p><p>（2）对于x属于X这回事，对应的y是唯一的。不可以又对应y1同时对应y2.</p><p>Q:可以多个x对应一个y吗？可以！事实上，用图片表示是这样的：</p><p><img src="C:\Users\陈冠豪\Desktop\image-20221226141035208.png" alt="image-20221226141035208"></p><p>（3）Rf属于Y，但不是Y！！！但特别的：当Rf=Y下，我们又称这样厉害的f叫满射。</p><p>（4）在众多的映射中，还有一种特殊的映射：单射。人话就是一一对应</p><p>（5）那么，又是单射又是满射如何？这又有名字：一一映射（一夫一妻）因为必须全部对应且一一对应。</p><p>正过来叫映射，倒过来又如何？</p><p>设 f有如下关系：</p><script type="math/tex; mode=display">X\longrightarrow{Y}</script><p>是一个单射，那么，我们可以倒过来：对于Y属于Rf而言都有唯一的一个$x$属于$X$.这又是一组对应关系，不过是倒过来的。记作如下：</p><script type="math/tex; mode=display">g:R_f\longrightarrow{X}</script><p>这样看不出什么联系，我们采用与 f 相关的表示：</p><script type="math/tex; mode=display">f^-1:D_{f^-1}\longrightarrow{D_f}</script><p>好吧，太复杂了，好好回味一下，我们继续折磨：</p><p>现在我们来看这样一个内容：</p><p>在学习完映射之后，我们来看这样的一个D(定义域),且</p><script type="math/tex; mode=display">D\subset{R}</script><p>换而言之，这个数集是R里的一部分，而f是一个使得：</p><script type="math/tex; mode=display">f:D\longrightarrow{R}</script><p>的映射。</p><p>那么，这样来看我们构造了一个映射使得一个实数集映射到了另一个实数集上。这样的映射有一个大家熟悉的名字：函数，简记作：</p><script type="math/tex; mode=display">y=f(x),x\in{D}</script><p>这下看懂了：</p><p>x是一个自变量，y是一个因变量 ，定义域为D，值域是R（不是实数集的R！！！）</p><p>构成一个函数的两要素，就可以从动态的角度来看了，这使得我们信息的表达可以更为浓缩：$D_f$ ,$ f$ 就可以了</p><p>函数的表达有三种：表格法，图形法，解析法。这个是大家高中就已经熟知的了</p><p>说完了定义和表示，我们来看一个函数最广泛的几个性质：</p><h4 id="1-有界性"><a href="#1-有界性" class="headerlink" title="1.有界性"></a>1.有界性</h4><p>听名字就知道：表明的是一些函数可能是有界限的。但这样的表达不规范。</p><p>仔细思考，函数的界限分为两种：不大于一个数和不小于一个数（当然，也可以说是小于一个数或者是大于一个数）</p><p>那么，我们说：对于总是一个小于一个数或者是不大于一个数的函数，我们说他有上界。表达是这样的：</p><script type="math/tex; mode=display">\exists{k_1},f(x)\leqslant{k_1}</script><p>这是什么东西呢？先别急，它还有另一个符号，也是在数学中相当常见的：$\exists$ , $\forall$</p><p>上面的两个符号，一个表示：存在；另一个表示任意。</p><p>那么，上界是唯一的吗？不是的。比如说：</p><script type="math/tex; mode=display">f(x)=x , x\in{(-\infty,1]}</script><p>这就有无穷个上界：可以是1，可以是2，可以是$\pi$…总而言之，并不唯一。</p><p>那么与之对应的，还会有一个下界：</p><script type="math/tex; mode=display">\exists{k_2} ,f(x)\geqslant{k_2}</script><p>我们说：对于总是一个大于一个数或者是不小于一个数的函数，我们说他有下界。</p><p>同样的，下界也不唯一。</p><p>这在我们后面证明极限的存在时是很有必要的！！！</p><p>统称起来，我们就可以说：函数是有界的：上下界都有！总而言之，这种情况称为有界的。反之，一个函数若是既没有上界有没有下界，或者是只有上界，或者是只有下界，则称这个函数无界。用数学符号定义有界是这样的：</p><script type="math/tex; mode=display">\exists M>0,|f(x)|\leqslant{M}</script><p>那么，无界的是这样定义的：</p><script type="math/tex; mode=display">\forall{M}>0,\exists x_1\in{x},|f(x)|>M</script><h4 id="2-单调性"><a href="#2-单调性" class="headerlink" title="2.单调性"></a>2.单调性</h4><p>这个性质是讨论函数的变化趋势的：是增加还是减少？我们用这个性质衡量：</p><p>当在一个区间里：</p><script type="math/tex; mode=display">x_1<x_2,f(x_1)<f(x_2)</script><p>这样的性质叫单调递增，</p><p>反之：</p><script type="math/tex; mode=display">x_1 < x_2,f( x_1 )>f( x_2 )</script><p>这样的性质叫单调递减，但是注意，这称之为严格单调，后面我们会讲述什么是严格单调什么是广义单调的。</p><h4 id="3-奇偶性"><a href="#3-奇偶性" class="headerlink" title="3.奇偶性"></a>3.奇偶性</h4><p>首先声明一点：我们的函数的定义域必须对称：也就是说：函数的$D_f$必须关于原点对称：</p><p>实数域$R$是对称的，$[-1,1]$是对称的，以此类推。当：$f(x)=f(-x)$时，我们称呼这样的函数是一个偶函数，反之：$f(-x)=-f(x)$或者$-f(-x)=f(x)$ 则称之为奇函数。</p><p>有趣的是：在图像法表达函数时：奇函数关于原点对称，偶函数关于$y$轴对称。</p><h4 id="4-周期性"><a href="#4-周期性" class="headerlink" title="4.周期性"></a>4.周期性</h4><p>有一些函数很有意思，伴随$x$的增大，我们甚至可以看到$f(x)$会有周期的重现。这时候，我们说这个函数具有周期性，用数学语言的表达是如下的：</p><script type="math/tex; mode=display">\exists l>0 , f(x+l)=f(x)</script><p>这个$l$就是周期，同时，我们讨论的周期常常是最小正周期。</p><p>比如说：</p><script type="math/tex; mode=display">y=\sin(x)</script><p>这个函数的（最小正）周期就是2$\pi$。</p><p>但是，不是所有的函数都有最小的正周期。如</p><script type="math/tex; mode=display">D(x)=\begin{cases}1 &  x\in{Q}\\ 0 & x\in{Q^C} \\\end{cases}</script><h4 id="5-反函数"><a href="#5-反函数" class="headerlink" title="5.反函数"></a>5.反函数</h4><p>有点像逆映射的感觉了：</p><p>设$f:D\rightarrow{f(D)}$是一个单射，且$f$单调 则有$f^-1:f(D)\rightarrow{D}$ ，且$f^-1$单调，单调性跟 $f$一致</p><p>那么称$x=f^-1(y)$ 是$y=f(x)$的反函数，且这两个函数的图像是关于$y=x$对称的</p><h4 id="6-复合函数"><a href="#6-复合函数" class="headerlink" title="6.复合函数"></a>6.复合函数</h4><p>引入两个函数：$y=f(t) , t=g(x)$ ,把$t$换成$g(x)$，我们就得到了一个复合函数$f(g(x))$。</p><p>值得注意的是：我们如此操作是把 $t =g(x)$视作了一个自变量， $t$的取值范围（f(x)的自变量范围）由我们的$g(x)$决定了，这就是$g(x)$的值域决定了$f(x)$的定义域， 于是，复合函数想要有定义，其$g(x)$的值域必须在$f(x)$的定义域内部才可以。</p><h4 id="函数的运算"><a href="#函数的运算" class="headerlink" title="函数的运算"></a>函数的运算</h4><p>下面引入两个函数：$f(x),g(x)$ 其中：其定义域以次为$D_f,D_g$ ，产生的新函数的定义域为$D=D_f\cap{D_g}$</p><p>函数的和差：</p><script type="math/tex; mode=display">(f\pm{g})(x)=f(x)\pm{g(x)}</script><p>函数的乘积：</p><script type="math/tex; mode=display">(f\cdot{g})(x)=f(x)\cdot{g(x)}</script><p>函数的相除：</p><script type="math/tex; mode=display">(\frac{f}{g})(x)=\frac{f(x)}{g(x)}, g(x)\neq0</script><h4 id="常见的初等函数"><a href="#常见的初等函数" class="headerlink" title="常见的初等函数"></a>常见的初等函数</h4><p>幂函数：$y=a^{\mu}$</p><p>指数函数:$y=a^x$</p><p>对数函数$y=log_a{x}$, 当$a=e$时，记作：$y=e^x$</p><p>特别的：当$a=e$时，又记成$y=\ln(x)$，当$a=10$时，又记成 $y=\lg(x)$.</p><p>三角函数：$\sin(x)$</p><p>反三角函数:$\arcsin(x)$</p><p>所有的这些函数经过有限次数的组合，运算得到的函数都是初等函数。</p><h2 id="极限定义与使用"><a href="#极限定义与使用" class="headerlink" title="极限定义与使用"></a>极限定义与使用</h2><h4 id="数列的极限的定义"><a href="#数列的极限的定义" class="headerlink" title="数列的极限的定义"></a>数列的极限的定义</h4><p>​            数列可以简单的理解为一列数：按照一定的规律排放：{$x_1,x_2,x_3,x_4,x_5…$}，我们简记作：$\{x_n\}$（注意到N是无穷大的）,比如说：</p><p>​                                                        $\{\frac{1}{2^n}\}$:$\{\frac{1}{2},\frac{1}{4},\frac{1}{8},\frac{1}{16}…\}$</p><p>其中，我们单取出来一项：这是数列的一个项。对于$\frac{1}{2^n}$这个东西，则我们叫做一般项：因为我们可以通过带入N的值来求得第N项的值来。</p><p>​        再来看一些数列：</p><p>​                                            $\{\frac{1}{n}\}$:{1,$\frac{1}{2},\frac{1}{3},\frac{1}{4},\frac{1}{5},\frac{1}{6},\frac{1}{7}$…}</p><p>​        这些数列似乎都随着N的增大逼近一个数，比如说，上面的这些数列都在$N\rightarrow\infty$下，{$x_n$}都在逼近一个数，比如和上面两个都在向0逼近。</p><p><img src="C:\Users\陈冠豪\Desktop\image-20221227094255924.png" alt="image-20221227094255924"></p><p>​        这是$\{\frac{1}{n}\}$在数轴上的表示：当N越来越大下，数代表的点越来越靠近0代表的点。</p><p>我们称数列随着$N\rightarrow\infty$下，逼近的那一个数称之为这个数列的极限。</p><p>​        大概如此，所以我们来看看数学分析下定义的极限：</p><p>​        定义：$\{x_n\}$作为一个数列，$\forall \varepsilon&gt;0$，总$\exists{N},$当$n&gt;N$下，$|x_n-a|&lt;\varepsilon$</p><p>​        好吧，看一脸懵逼。那这个是什么意思呢？为什么引出这个抽象的定义？</p><p>​        注意到：$\forall \varepsilon&gt;0$ :这个是表明任意的一个$ \varepsilon$，只要它大于0都算，都要让上面的式子成立。</p><p>​        这就是说，我的$ \varepsilon$可以取得任意的小，多小都得行！，而$\exists{N},$表明了存在数列的一个项：使得在之后的项（这在$n&gt;N$已经说明白了）都与一个数a的差的绝对值（嘛，就是之后的项与这个数a的距离）为任意小。还不是相等，是一个动态的过程，因为如同</p><p>$\{\frac{1}{n}\}$中$n=10000000000000$一样，只是$x_n=\frac{1}{10000000000000}$罢了，但绝对不是0！但是，伴随这N取的越来越大，我们的{$x_n$}会越来越逼近0的。这描述的是一个动态的过程。</p><p>下面我们来引入一道经典例题：</p><p>​                                                            $2,\frac{1}{2},\frac{4}{3},\frac{3}{4}…\frac{n+(-1)^{n-1}}{n}$</p><p>​        这个数列的极限如何？</p><p>​        首先分析以下大通项：$\frac{n+(-1)^{n-1}}{n}$，它可以做出分离：$1+\frac{(-1)^{n-1}}{n}$ 注意到$(-1)^{n-1}$是一个震荡的数，在-1与1之间震荡，如果看作是一个函数的话，他是有界的，而$\frac{1}{n}$或者是$-\frac{1}{n}$无论如何都会随N增大而趋向于0.那么，这个数列的极限很明了了：</p><p>​    那我们使用数列的极限来证明：</p><p>​    $证明：$</p><p>​    $    因为 |x_n-1|=|\frac{(-1)^{n-1}}{n}|=\frac{1}{n}$</p><p>​    $于是\forall \varepsilon&gt;0,取{N=[\frac{1}{n}]+1}, 此时|x_n-1|=|\frac{(-1)^{n-1}}{n}|=\frac{1}{n}&lt;\varepsilon$</p><p>​    于是数列的极限是1.</p><p>​    我们再来看一个例题：</p><p>​    证明：$x_n=\frac{(-1)^n}{(n+1)^2}$的极限是0：</p><p>​    这是好说的：我们照猫画虎：</p><p>​    $证明：$</p><p>​    $    因为：|x_n-1|=\frac{1}{(n+1)^2}&lt;\frac{1}{n^2}$</p><p>​    $于是\forall \varepsilon&gt;0，取N=[\frac{1}{\sqrt{ \varepsilon}}]+1,此时有 |x_n-1|=\frac{1}{(n+1)^2}&lt;\frac{1}{n^2}&lt;\varepsilon$</p><p>​    于是数列的极限为0.</p><p>​    收敛数列的性质：</p><p>​    我们讨论一个收敛数列，是要关注他有什么特性的：</p><p>​    显然：</p><p>（1）收敛数列的极限唯一。</p><p>​    不太好证，所以我们来引入反证法：</p><p>​    证明：假设$x_n\rightarrow{a}同时x_n\rightarrow{b}$ ($a\neq{b}$),我们取$\varepsilon=\frac{b-a}{2}$（1）,</p><p>​    $于是：\exists{N_1},当n&gt;N_1下 |x_n-a|&lt;\frac{b-a}{2}$（2）</p><p>​    同时，又有$\exists{N_2},当n&gt;N_2下 |x_n-b|&lt;\frac{b-a}{2}$</p><p>​    这个时候，我们处理一下上面的式子：（展开我们的绝对值写成不等式）</p><p>​    此时由（1）得到的是：$x_n&lt;\frac{a+b}{2}$</p><p>​    由（2）得到的是：$x_n&gt;\frac{a+b}{2}$</p><p>​    毫无疑问这是矛盾的。所以，我们的极限不可以同时趋近于两个数。</p><p>​    （2）收敛数列一定有界。</p><p>​    证明：设$\lim\limits_{n\to+\infty}{x_n}=a$，此时此刻，我们可以随意的取一个$\varepsilon=1,\exists {N},当n&gt;N下，|x_n-a|&lt;1$</p><p>​    这个时候：</p><p>​    $    |x_n|=|x_n-a+a|\leqslant|x_n-a|+|a|&lt;1+|a|$</p><p>​        这显然符合有界的定义。但是呢？这是保证了$x&gt;N$的形况下，这个时候，我们只需要取出$M=max\{x_1,x_2,…x_N,1+|a|\}$（取出前N个里中最大的与1+$|a|$中还要大的那个，此时，M就是$\{x_n\}$下最大的一项了），这下子：$x_n\leqslant{M}$肯定有界了</p><p>（3）收敛数列具有保号性</p><p>​        这是什么意思呢？就是说：如果一个数列的极限为正（为负），那么，我们的数列在某一项之后肯定都是正的（负的）</p><p>​        数学的表达是这样的：</p><p>​        $\lim\limits_{n\to+\infty}{x_n}=a$,且$a&gt;0$，$\exists{N},$当$n&gt;N下,x_n&gt;0$</p><p>证明：</p><p>​        $a&gt;0$时，取$\varepsilon=\frac{a}{2}&gt;0,\exists{N},$当$n&gt;N$下,$|x_n-a|&lt;\frac{a}{2},$此后，我们的$0&lt;\frac{a}{2}&lt;x_n&lt;\frac{3a}{2}$</p><p>证毕。</p><p>​        反过来讲，如果数列从一项起都大于（小于）0，并且：$\lim\limits_{n\to+\infty}{x_n}=a$，那么：$a\geqslant0(\leqslant0)$</p><p>​    （4）收敛数列的任意子数列都收敛于同一极限</p><p>子数列：就是从原本的数列中抽取一些元素组成一个全新的数列。</p><p>$x_{n_k}$就是一种表示。</p><p>​        证明:</p><p>记：$\{x_{n_k}\}$是$\{x_{n}\}$的一个子数列，并且$\lim\limits_{n\to+\infty}{x_n}=a$</p><p>则$\forall \varepsilon&gt;0,\exists N&gt;0,n&gt;N下$</p><p>$|x_n-a|&lt;\varepsilon,这时，我们取K=N,k&gt;K时，n_k&gt;n_K=n_N\geqslant{N}$</p><p>${|x_{n_k}-a|}&lt;\varepsilon$</p><p><img src="C:\Users\陈冠豪\Desktop\image-20221228145330449.png" alt=""></p><p>​        于是，我们又多了一种证明方式：如果一个数列中，存在两个子数列收敛于不同的极限，则我们说这个数列是发散。</p><p>补充：</p><p>​        反三角函数：三角函数的反函数时反三角函数。有如下的对应关系：</p><p>$sin(x)\rightarrow{arcsin(x)}$</p><p>$cos(x)\rightarrow{arccos(x)}$</p><p>$tan(x)\rightarrow{arctan(x)}$</p><p>​        实际上，就是$x=siny$的离谱写法我们看不惯，于是我们选择用一个全新的表达来表达一个全新的函数</p><p>​        图像上，回忆第一小节的笔记，图像关于$y=x$对称，做出来的图像就如下图所示：</p><p><img src="C:\Users\陈冠豪\Desktop\image-20221228145914221.png" alt="image-20221228145914221"></p><p>​        同时，为了保证是函数（还是第一小节的知识），截取我们的函数得到：</p><p><img src="C:\Users\陈冠豪\Desktop\image-20221228145933050.png" alt="image-20221228145933050"></p><p>​        于是：$x\in[-1,1],y\in[-\frac{\pi}{2},\frac{\pi}{2}]$</p><p>​        一些常见的函数值对应表：</p><p><img src="C:\Users\陈冠豪\Desktop\image-20221228150223124.png" alt="image-20221228150223124"></p><p>其他的：</p><p><img src="C:\Users\陈冠豪\Desktop\image-20221228150313511.png" alt="image-20221228150313511"></p><h5 id="（二）函数的极限"><a href="#（二）函数的极限" class="headerlink" title="（二）函数的极限"></a>（二）函数的极限</h5><p>​        1）$x\rightarrow{a}$下的函数极限</p><p>​        $f(x)$在$x_0$的去心领域内有定义，在我们的$x\rightarrow{a}$之下（这就意味着$x=a$处是可以没有定义的！！！这很重要，后面还会有其他类似的概念！！！）,当$\exists A,\forall\varepsilon&gt;0,\exists{\delta}&gt;0,使得在0&lt;|x-x_0|&lt;\delta时：|f(x)-A|&lt;\varepsilon$.这一大长串，简记成如下：</p><p>法1）$\lim\limits_{x\rightarrow{x_0}}f(x)=A$</p><p>法2)$f(x)\rightarrow{A}(x\rightarrow{x_0})$</p><p>​        这定义还是很抽象：我们用人话讲：就是只要$x到{x_0}$是充分接近的，$f(x)$到$A$的距离可以为任意小。</p><p>​        但是，我们的${x}$可以从左右两侧逼近于${x_0}$，这就要求我们的函数必须左右两侧方式逼近同一点时，我们的函数值相同。</p><p>下面我们就使用这个定义来证明一些命题：</p><p>$(1)\lim\limits_{x\rightarrow x_0}C=C$</p><p>证明：$\forall\varepsilon&gt;0,\exists\delta=N(N&gt;0)$</p><p>使得$0&lt;|x-x_0|&lt;\delta,|f(x)-A|=0,这明显小于\varepsilon$</p><p>证毕</p><p>$(2)\lim\limits_{x\rightarrow{1}}(2x-1)=1$</p><p>证明：</p><p>$\forall\varepsilon&gt;0,\exists\delta=\frac{\varepsilon}{2}(N&gt;0)$</p><p>使得$0&lt;|x-1|&lt;\delta,|f(x)-A|=2|x-1|&lt;\varepsilon$</p><p>$(3)\lim\limits_{x\rightarrow{1}}\frac{x^2-1}{x-1}=2$</p><p>证明：</p><p>$\forall\varepsilon&gt;0,\exists\delta={\varepsilon}(N&gt;0)$</p><p>使得$0&lt;|x-1|&lt;\delta,|f(x)-A|=|x-1|&lt;\varepsilon$</p><p>证毕</p><p>​        回到我刚刚讲到的：因为我们的${x}$可以从左右两侧逼近于${x_0}$，这就要求我们的函数必须左右两侧方式逼近同一点时，我们的函数值相同。为了方便描述，我们引入左，右极限的概念来描述从左侧右侧来逼近函数一点时产生的极限</p><p>左极限:$\lim\limits_{x\rightarrow{x_0^-}}f(x)=A$</p><p>右极限:$\lim\limits_{x\rightarrow{x_0^+}}f(x)=A$</p><p>那么，回到这个定义：</p><p>​        $f(x)$在$x_0$的去心领域内有定义，在我们的$x\rightarrow{a}$之下（这就意味着$x=a$处是可以没有定义的！！！这很重要，后面还会有其他类似的概念！！！）,当$\exists A,\forall\varepsilon&gt;0,\exists{\delta}&gt;0,使得在0&lt;|x-x_0|&lt;\delta时：|f(x)-A|&lt;\varepsilon$.</p><p>​    其中$x$怎么趋近的方式是已经确定的，于是上面的$|x-x_0|$就可以拆成$x-x_0$或者是$x_0-x$了</p><p>那么，我们再次阐述：</p><p>​        我们的函数必须左右两侧方式逼近同一点时，我们的函数值相同。</p><p>这个定理：$x\rightarrow{x_0}$,$f(x)$的极限存在$\Leftrightarrow$ 左右极限存在且相等</p><p>比如说</p><p>$\begin{equation}f(x)=\left\{\begin{array}{cl}x+1 &amp;  x &gt; 0 \\0  &amp;  x = 0 \\x-1 &amp;  x &lt; 0 \\\end{array} \right.\end{equation}$</p><p>$\lim\limits_{x\rightarrow{0^-}}f(x)=-1$</p><p>$\lim\limits_{x\rightarrow{0^+}}f(x)=1$</p><p>两者不相等，于是$f(x)$在0处的极限是不存在的。</p><p>​        2）$x\rightarrow{\infty}$下的函数极限</p><p>​        假设啊，我们的函数在无穷远处有定义的：这个时候，我们的$x$越远，我们的函数值越是接近某一个数。用数学语言表达是这样的：</p><p>​        $\forall{\varepsilon}&gt;0,\exists X&gt;0,\mbox{使得}|x|&gt;X时，|f(x)-A|&lt;\varepsilon$</p><p>此时，我们简记作$\lim\limits_{x\rightarrow{\infty}}=A$</p><p>例题：</p><p>​        $(1)\lim\limits_{x\rightarrow{\infty}}{\frac{1}{x}=0}$</p><p>证明：</p><p>​        $\forall{\varepsilon}&gt;0,\exists X=\frac{1}{\varepsilon},\mbox{使得}|x|&gt;X时，|\frac{1}{x}|&lt;\varepsilon$</p><p>证明完毕</p><p>​        </p><p>​        说完了，让我们谈谈性质</p><p>​        1)函数的极限唯一性</p><p>​        2)函数的局部有界限：$\lim\limits_{x\rightarrow{x_0}}f(x)=A,\exists{M&gt;0},\forall{\delta&gt;0},0&lt;|x-x_0|&lt;\delta时，|f(x)|\leqslant{M}$</p><p>​        3)局部保号性：$\lim\limits_{x\rightarrow{x_0}}f(x)=A,A&gt;0,\exists{\delta&gt;0}则在0&lt;|x-x_0|&lt;\delta,f(x)&gt;0$</p><p>​        4）$Henn$定理：$\lim\limits_{x\rightarrow{x_0}}f(x)=A,\{x_n\}\rightarrow{x_0},\lim\limits_{n\rightarrow{\infty}}f(x_n)=\lim\limits_{x\rightarrow{x_0}}f(x)$</p><h6 id="无穷小和无穷大"><a href="#无穷小和无穷大" class="headerlink" title="无穷小和无穷大"></a>无穷小和无穷大</h6><p>​        无穷小：趋于0的一个量（动态的！），是正是负和0都叫无穷小。同时，无穷小除了0意外，无穷小都不确定。具体的定义是这样的：</p><p>​        定义：$x\rightarrow{x_0}(x\rightarrow{\infty})$时，$f(x)$ 的极限为0，称$f(x)$是当$x\rightarrow{x_0}(x\rightarrow{\infty})$下的无穷小</p><p>​        这么说来，无穷小并不唯一，有无穷多个无穷小</p><p>下面介绍以下无穷小的一些性质:</p><p>​        定义$a,b$是两个无穷小</p><p>​        $a+b$是一个无穷小；</p><p>​        $a-b$是一个无穷小;</p><p>​        $a\times b$是一个无穷小;</p><p>​        $c\times{a}$是一个无穷小;</p><p>​        注意！！！$a\div{b}$是未定式，在没有给定a,b的具体情况，我们是不知道这个值究竟是多少的！它本身可以是任何数！！！</p><p>​        无穷大：这个有特定的符号：$\infty$</p><p>​        他也是有定义的：$\lim\limits_{ {x\rightarrow{x_0} } }f(x)= \infty$或者$\lim\limits_{ {x\rightarrow{\infty} } }f(x)=\infty$</p><p>​        注意！！！注意！！！无穷大可以是正无穷大或者是负无穷大！！！于是</p><p>​        引入两个无穷大记作$a,b$</p><p>​        无论是$a+b还是a-b$都是未定义的</p><p>​        但是$a\times{b}$一定是无穷大，$c\times{ \infty }(c\neq{ 0 })$一定是无穷大</p><p>​        $a\div{ b }$结果未知</p><p>​        定理：$f(x)$如果是无穷大，那么$\frac{1}{f(x)}$是无穷小。</p><p>​        $f(x)$如果是无穷小，那么$\frac{1}{f(x)}$是无穷大。（$f(x)\neq{0}$）</p><p>​        极限运算法则</p><p>​        法则1：两个甚至是若干有限个的无穷小的和是无穷小的</p><p>​        <strong>法则2：有界函数与无穷小的乘积是无穷小</strong></p><p>​        推论：常数乘以无穷小还是无穷小</p><p>​                    有限个无穷小的乘积还是无穷小</p><p>​        定理：记：$\lim{f(x)}=A,\lim{g(x)}=B$</p><p>​        1)$\lim{f(x)\pm{g(x)}}=A\pm{B}$</p><p>​        2)$\lim{f(x)\times{g(x)}}=A\times{B}$</p><p>​        3)$\lim{\frac{f(x)}{g(x)}}=\frac{A}{B}(B\neq{0})$</p><p>​        4)$\lim{cf(x)}=c\lim{f(x)}$</p><p>​        5)$\lim{ {f(x)}^n}=[{\lim{f(x) } }]^n$</p><p>对于数列还是一样的</p><p>​        定理:$\psi(x)\geqslant\varphi(x)$,$\lim{\psi(x)}&gt;\lim{\varphi(x)}$</p><p>哎，这后面这么没有等号了呢?举个例子:$\frac{1}{x}$,$-\frac{1}{x}$</p><h5 id="极限存在准则，两个重要极限"><a href="#极限存在准则，两个重要极限" class="headerlink" title="极限存在准则，两个重要极限"></a>极限存在准则，两个重要极限</h5><p>准则I：对于数列$\{x_n\},\{y_n\}$,${z_n}$ (1)$\exists {n_0}\in{N},y_n\leqslant{x_n}\leqslant{z_n}$(2)$\lim{y_n}=lim{z_n}=a$那么：$\lim{x_n}=a$</p><p>准则I’ :对于函数f(x),g(x),h(x),且(1)$g(x)\leqslant{f(x)}\leqslant{h(x)}$(2)$\lim{g(x)}=\lim{h(x)}=A$那么：$lim{f(x)}=A$</p><p>两个重要极限：</p><h6 id="I-lim-limits-x-rightarrow-0-frac-sin-x-x-1"><a href="#I-lim-limits-x-rightarrow-0-frac-sin-x-x-1" class="headerlink" title="I:$\lim\limits_{x\rightarrow{0}}\frac{\sin{x}}{x}=1$"></a>I:$\lim\limits_{x\rightarrow{0}}\frac{\sin{x}}{x}=1$</h6><p>注意一定是$x\rightarrow{0}$！！！</p><p>同时！！！也可以有推广：</p><h6 id="I’-lim-limits-Box-rightarrow-0-frac-sin-Box-Box-1"><a href="#I’-lim-limits-Box-rightarrow-0-frac-sin-Box-Box-1" class="headerlink" title="I’:$\lim\limits_{\Box\rightarrow {0}}\frac{\sin{\Box}}{\Box}=1$"></a>I’:$\lim\limits_{\Box\rightarrow {0}}\frac{\sin{\Box}}{\Box}=1$</h6><p>其他派生的极限：</p><p>$\lim\limits_{x\rightarrow{0}}\frac{\tan(x)}{x}=1$</p><p>这是因为：$\lim\limits_{x\rightarrow{0}}\frac{\tan(x)}{x}=\lim\limits_{x\rightarrow{0}}(\frac{\sin{x}}{x})\times(\frac{1}{\cos{x}})$=1</p><p>例题：$\lim\limits_{x\rightarrow{0}}\frac{1-\cos{x}}{x^2}$</p><p>解：<img src="C:\Users\陈冠豪\Desktop\image-20221229164852173.png" alt="image-20221229164852173"></p><p>等价无穷小：（I派生）</p><p>$\sin{x}\backsim{x}$ , $\tan{x}\backsim{x}$, $\arcsin{x}\backsim{x}$</p><h4 id="准则II：单调有界数列必有极限！"><a href="#准则II：单调有界数列必有极限！" class="headerlink" title="准则II：单调有界数列必有极限！"></a>准则II：单调有界数列必有极限！</h4><p>性质：收敛必有界，而有界不一定收敛</p><p>为什么有界不一定收敛呢？举个反例：$\{(-1)^{N}\}$就可以了，这个数列显然有界：</p><p>II:$\lim\limits_{x\rightarrow{\infty}}(1+\frac{1}{x})^{x}=e$</p><p>注意$x$一定是趋于无穷！！！</p><p>派生的还有。。。</p><p>II’$\lim\limits_{\Box\rightarrow{\infty}}(1+\frac{1}{\Box})^{\Box}=e$</p><p>II’’$\lim\limits_{x\rightarrow{0}}(1+{x})^\frac{1}{x}=e$</p><p>补充：Cauchy极限审敛法：</p><p>$\{x_n\}收敛\Leftrightarrow \forall{\varepsilon&gt;0},\exists N,当m&gt;N时，|x_n-x_m|&lt;\varepsilon$</p><p>无穷小的比较：</p><p>​        不同无穷小趋于0的速度不一样，我们比较无穷小就是比较不同无穷小趋于0的速度：</p><p>方法是简单的，看他们的商的极限即可：</p><p>如：$\lim\limits_{x\rightarrow{0}}x=0,\lim\limits_{x\rightarrow{0}}\sqrt{x}=0$,而$\lim\limits_{x\rightarrow{0}}\frac{x}{\sqrt{x}}=\lim\limits_{x\rightarrow{0}}\sqrt{x}=0$</p><p>于是：我们发现这个极限为0，说明在趋近速度上$x&gt;\sqrt{x}$</p><p>这样，我们就比较出来了</p><p>定义：</p><p>$若\lim\frac{\beta}{\alpha}=0,则称\beta是\alpha的高阶无穷小，记作\beta=o(\alpha)$</p><p>$若\lim\frac{\beta}{\alpha}=\infty,则称\beta是\alpha的低阶无穷小$</p><p>$若\lim\frac{\beta}{\alpha}=c(c\neq{0}),则称\beta是\alpha的同阶无穷小,特别的，当c=1时，又称等价无穷小,记作{\beta}\backsim{\alpha}$</p><p>$若\lim\frac{\beta}{\alpha^k}=c(c\neq{0}),则称\beta是\alpha的k阶无穷小$</p><p>下面是一些常见的等价无穷小：</p><p>1)$x\rightarrow{0}时，\sqrt[n]{1+x}-1\backsim\frac{x}{n},\sin(x)\sim{x}$</p><p>定理：</p><p>1）$\beta于\alpha等价\Leftrightarrow \beta=\alpha+o(\alpha)$</p><p>2)$\alpha\sim\widetilde{\alpha},\beta\sim\widetilde{\beta},且\lim{\frac{\widetilde{\alpha}}{\widetilde{\beta}}}是存在的，则:\lim\frac {\alpha}{\beta}=\lim{\frac{\widetilde{\alpha}}{\widetilde{\beta}}}$</p><p>于是：</p><p>2)$\tan{x}\sim{x},\arcsin{x}\sim{x}$</p><p>上面的$x$都可以被替换成$\Box$</p><p>定理：</p><p>1）两个无穷小相比的极限时，分子分母可以用等价无穷小替换</p><p>2）如果分子或分母是若干因子的乘积，则我们可以对其中一个或者几个无穷小做替换，但是因子用加减法是不可以的！！！！！！！！！！！！！！！！</p><h4 id="函数的连续性"><a href="#函数的连续性" class="headerlink" title="函数的连续性"></a>函数的连续性</h4><p>对于函数增量的定义：</p><p><img src="C:\Users\陈冠豪\Desktop\image-20221229174949222.png" alt="image-20221229174949222"></p><p>则增量$\Delta f(x)=f(x+\Delta{x})-f(x)$</p><p>实际上，叫做改变量更切合实际，因为函数也可以递减</p><p>那么，连续的定义由此引出：</p><p>若$\lim\limits_{\Delta{x}\rightarrow{0}}\Delta{y}=\lim\limits_{\Delta{x}\rightarrow{0}}(f(x_0+\Delta{x})-f(x_0))=0$时，则函数在$x_0$处连续</p><p>或者</p><p>$\lim\limits_{x\rightarrow{x_0}}f(x)=f(x_0)$时，则函数在$x_0$处连续</p><p>总结而言，一个函数若是想在$x_0$ 处有极限，且有定义，并且函数值与极限值必须相等，三个条件缺一不可！！！</p><p>既然有左右极限，于是也使得函数也有左右连续。函数的左右极限就是由$x$以不同的方向逼近产生的。</p><p>左连续：$\lim\limits_{x\rightarrow{x_0^-}}f(x)=f(x_0)$</p><p>右连续：$\lim\limits_{x\rightarrow{x_0^+}}f(x)=f(x_0)$</p><p>类似的：函数的连续的充要条件是函数即左连续又右连续。</p><h4 id="间断点"><a href="#间断点" class="headerlink" title="间断点"></a>间断点</h4><p>回到连续需要满足的条件：</p><p>一个函数若是想在x_0 处有极限，且有定义，并且函数值与极限值必须相等，三个条件缺一不可！！！于是，间断点也就有三种产生原因：</p><p>1)在$x_0$无定义</p><p>2)$\lim\limits_{x\rightarrow{x_0}}f(x)$不存在</p><p>3）$\lim\limits_{x\rightarrow{x_0}}f(x)\neq{f(x_0)}$</p><p>举例子：</p><p>1)$y=\tan{x}在x=\frac{\pi}{2}$处无定义，所以在这一点上不连续这是可去间断点.</p><p>2)$y=\sin{\frac{1}{x}}$在x=0处极限不存在，所以在这一点上不连续.</p><p>3）</p><script type="math/tex; mode=display">\begin{equation}f(x)=\left\{\begin{array}{cl}\frac{x^2-1}{x-1} &  x \neq 0 \\0  & x = 0 \\\end{array} \right.\end{equation}</script><p>，这个函数在x=1处不连续。这个间断点叫跳跃间断点</p><p>间断点有两类：</p><p>第一类：左右极限都存在</p><p>有可去间断点，跳跃间断点</p><p>第二类：左右极限不都存在</p><p>有震荡间断点</p><p>连续函数的性质：</p><p>对于$[a,b]$上，且$f(a)f(b)&lt;0$时，则其中至少存在一个点$\xi \in[a,b]，$使得$f(\xi)=0$</p><p>推广：</p><p>定理：$f(x)在[a,b]$上连续,$f(a)=A,f(b)=B$,则$\exists C\in[A ,B]$,至少有一个$\xi \in [a,b]$使得，$f(\xi)=C$</p>]]></content>
      
      
      
        <tags>
            
            <tag> Math Works </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C简单教程（1）</title>
      <link href="/2023/01/28/C%E7%AE%80%E5%8D%95%E6%95%99%E7%A8%8B%EF%BC%881%EF%BC%89/"/>
      <url>/2023/01/28/C%E7%AE%80%E5%8D%95%E6%95%99%E7%A8%8B%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="简单C教程1"><a href="#简单C教程1" class="headerlink" title="简单C教程1"></a>简单C教程1</h1><p>​        首先打开你的VS，或者是已经配置好GCC和相关插件的Vscode,亦或者Dev C++这个东西，以及切换到英文输入法！！！！！！！！！！！！小心中文的分号给你小小的计算机震撼</p><p>​        我们首先明确：C语言是一个人和计算机交流的语言。语言既然有发展的历史，那么，计算机语言也有发展的过程</p><p>​        最开始的时候：我们使用0，1来代表正电负电，后来用助记符 ，而后有用更高级的语言表达一些固定的助记符。C语言由此诞生。</p><p>​        C语言也有标准：C89/C90是我们这个时候学习的主力。</p><h3 id="My-Fisrt-C-Project"><a href="#My-Fisrt-C-Project" class="headerlink" title="My Fisrt C Project"></a>My Fisrt C Project</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token expression"><span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h</span><span class="token comment">//1</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//2</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//3</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        //1:首先，我们首先引入头文件stdio.h，这个文件里包含了我们以后要使用的函数，我需要把他们包含进来才可以使用，否则编译器不认识他们。</p><p>​        //2:接着，main是主函数的意思，这是我们程序的入口：只能有一个main函数不可以有第二个，更不可以没有main函数，int是integer的缩写，表明的是整形。这个表达的是这个函数返回的是一个整形。这个函数负责完成任务</p><p>​        //3：返回0：这是因为函数需要返回东西，我们返回0表达的是成功完成任务</p><p>​        //4：printf:print formatly标准的打印，里面放进去的是一个字符串”hello world\n”,\n是一个换行符</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><div class="table-container"><table><thead><tr><th style="text-align:left">char</th><th>short</th><th>long</th><th>int</th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td style="text-align:left">long long</td><td>float</td><td>double</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td style="text-align:left"></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table></div><p>​    数据类型有上面这几种，生活中无非就是小数，整数。上面就是引申出来的七种类型</p><p>1.char类型</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int main()&#123;char ch&#x3D;&#39;A&#39;;&#x2F;&#x2F;存放一个字符，我们起了一个名字ch，里面放了一个A    printf(&quot;%c&quot;,ch);&#x2F;&#x2F;使用%c来输出一个字符变量的内容，函数以这样的方式取出一个字符    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.int类型</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int main()&#123;int stdint&#x3D;114514;&#x2F;&#x2F;存储一个整形，我们起了一个名字叫stdint，里面放了一个114514printf(&quot;%d&quot;,stdint);&#x2F;&#x2F;使用%d来输出一个整形变量的内容，函数以这样的方式取出一个整形return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.long, long long（C99）</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int main()&#123;long stdint&#x3D;114514;&#x2F;&#x2F;存储一个长整形，我们起了一个名字叫stdint，里面放了一个114514printf(&quot;%ld&quot;,stdint);&#x2F;&#x2F;使用%ld来输出一个长整形变量的内容，函数以这样的方式取出一个长整形return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4.float，double</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int main()&#123;float stdflt&#x3D;114514.1919810;&#x2F;&#x2F;存储一个浮点型，我们起了一个名字叫stdflt，里面放了一个114514.1919810printf(&quot;%f&quot;,stdflt);&#x2F;&#x2F;使用%f来输出一个浮点型变量的内容，函数以这样的方式取出一个浮点型    double stddbl&#x3D;114514.1919810;&#x2F;&#x2F;存储一个双精度浮点型，我们起了一个名字叫stddbl，里面放了一个114514.1919810    printf(&quot;%lf&quot;,stddbl);&#x2F;&#x2F;使用%lf来输出一个双精度浮点型变量的内容，函数以这样的方式取出一个双精度浮点型return 0;&#125;&#x2F;&#x2F;打印还有其他方式访问：%p声明打印地址，%x以十六进制的方式打印，%o以八进制的方式打印<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        问题来了，为什么整这么多花里胡哨的东西呢？一个不香吗？</p><p>​        首先我们区分他们在计算机在内存中占用的内存。使用一个运算符叫做sizeof(),我们的括号里面放的就是类型。大伙看一看，有什么区别</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int main()&#123;    printf(&quot;%d\n&quot;,sizeof(char));&#x2F;&#x2F;char申请内存的大小    printf(&quot;%d\n&quot;,sizeof(short));&#x2F;&#x2F;short申请内存的大小    printf(&quot;%d\n&quot;,sizeof(int));&#x2F;&#x2F;int申请内存的大小    printf(&quot;%d\n&quot;,sizeof(long));&#x2F;&#x2F;long申请内存的大小    printf(&quot;%d\n&quot;,sizeof(float));&#x2F;&#x2F;float申请内存的大小    printf(&quot;%d\n&quot;,sizeof(double));&#x2F;&#x2F;double申请内存的大小&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="image-20230129173130931.png" alt="image-20230129173130931"></p><p>​        等等，我们是得到了数，单位是什么呢？字节（byte）。下面插一个小科普：计算机的单位有以下几个层级：</p><p>​        bit                    byte            kb            mb            gb            tb            pb </p><p>​        计算机力最小的单位是怎么定义的呢？</p><p>​        计算机通电工作，这些硬件下通过的电流分为正电和负电，分别代表0和1。（高低电平）这就是2进制的来源，我们用一系列的0和1来表达数据或者物体的状态。1个比特位就可以存储一个0或者是1，8个比特位构成一个字节，随后k,m,g,t,p的进位关系是1024倍数的关系。就是说：一个char的大小是8个比特位，一个int由32个比特位构成。我们的这些类型就是为了更加方便和丰富的表达生活的类型，所以才产生的。</p><h3 id="常量与变量"><a href="#常量与变量" class="headerlink" title="常量与变量"></a>常量与变量</h3><p>​        我们针对数据变不变来区分出来数据是常量还是变量。</p><p>​        比如说：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int age&#x3D;10;&#x2F;&#x2F;向内存申请4个字节存放一个20，而这个字节表达的含义是age<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        这个age是可以变动的：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int age&#x3D;10;printf(&quot;%d\n&quot;,age);age&#x3D;20;printf(&quot;%d\n&quot;,age);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>​        上面的代码打出来了10和20 。</p><p>​        定义变量的方法是这样的：</p><pre class="line-numbers language-none"><code class="language-none">类型 变量名 &#x3D; 值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​        变量自身也有分类：局部变量和全局变量，区别又是什么呢？</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;int num1&#x3D;20;int main()&#123;    int num2&#x3D;10;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        不难猜到：num1是全局变量，num2是局部变量。全局变量指的是定义在代码块{ }之外的变量。反之，在{ }内的是全局变量。问题来了：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">int global &#x3D;2023;int main()&#123;    int local&#x3D;2022;    &#x2F;&#x2F;?So what about the next line?int global&#x3D;2022;    printf(&quot;global here is %d\n&quot;,global);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​         当你在VS2022一敲出来，高亮颜色就告诉你，答案是2022：</p><p>​        <img src="image-20230129180112913.png" alt="image-20230129180112913"></p><p>​        能同时共存，而且：<strong>局部变量优先</strong> 这里给出建议：</p><p>​        <strong>打代码的时候不要使用同名的局部变量和全局变量，如果相同了，记住一件事情：局部变量优先！</strong></p><p>​        下面我们继续玩一个新的函数：scanf函数。</p><p>​        我说停停！！！先别函数玩的欢乐，这是因为在新标准下，C标准委员会嫌这东西不安全（为什么不安全这里先不扯，简单来讲就是这个函数读到什么东西就往里塞，实在读不进去就直接扔回一个-1摆烂，导致程序安全性很差）, 所以整了一个船新函数scanf_s ,这个函数我的评价是VS用用行，但是移植到别的编译器还要切换标准，怎么办呢？在VS编译器下面使用一个宏定义#define _CRT_SECURE_NO_WARNINGS 1 让编译器赶紧闭嘴通过就完事，这个宏（可以先不追究这是什么东西）扔到程序的最前面就可以了</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;Example#define _CRT_SECURE_NO_WARNINGS 1&#x2F;&#x2F;Looking here#include&lt;stdio.h&gt;int global &#x3D; 2023;int main()&#123;    int local &#x3D; 2022;    &#x2F;&#x2F;?So what about the next line?    int global &#x3D; 2022;    printf(&quot;global here is %d\n&quot;, global);    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        这个函数读取键盘的输入，使用方法如下：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">&#x2F;&#x2F;A basic program that reads two numbers then returns the sum of themint num1&#x3D;0;int num2&#x3D;0;scanf(&quot;%d%d&quot;,&amp;num1,&amp;num2);&#x2F;&#x2F;字符串里面不要塞上空格！不要塞上空格int sum&#x3D;num1+num2;printf(&quot;%d&quot;,sum);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        对了，这个&amp;是什么捏？取地址符号，后面我们提到指针的时候我们会天天见到他。人话就是这样讲：告诉这个函数，这两个变量在计算机的哪里。</p><p>​        认真的讲，计算机有巨大的内存，那么多数据，我们的计算机怎么哪里是哪里？使用地址，就像你们家的门牌号一样。</p><p>​        变量也有作用域：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;int global&#x3D;10;int main()&#123;    int numlevel1&#x3D;10;    &#123;        int numlevel2&#x3D;20;    &#125;    &#x2F;&#x2F;How about this one?    printf(&quot;%d&quot;,numlevel1);    &#x2F;&#x2F;How about this one?    printf(&quot;%d&quot;,numlevel2);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        你的编译器很快（也很不幸的）告诉你，我不到numlevel2是什么啊。那就对了，因为每个变量都有它的作用域：范围就是从他定义的位置到当前它在的大括号区域}结束处：</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include&lt;stdio.h&gt;int global&#x3D;10;int main()&#123;printf(&quot;%d&quot;,numlevel1);&#x2F;&#x2F;NOOOO,变量还没被声明，不要用:(    int numlevel1&#x3D;10;&#x2F;&#x2F;----init numlevel1    &#123;       int numlevel2&#x3D;20;&#x2F;&#x2F;----init numlevel2    &#125;&#x2F;&#x2F;----destroy numlevel2 Sadly    &#x2F;&#x2F;How about this one?    printf(&quot;%d&quot;,numlevel1);   &#x2F;&#x2F;How about this one?    printf(&quot;%d&quot;,numlevel2);&#125;&#x2F;&#x2F;----destroy numlevel1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        上面的图就表示了程序变量的生命周期或者说作用域：创建完之后到被回收之前，变量才是被允许使用的。所以，当你的编译器不知道你想要使用的变量的时候，他会指出错误：未声明的标识符。这个时候回去看看你的代码哪里出现了问题⑧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> C/C++ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
